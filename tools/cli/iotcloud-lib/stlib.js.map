{"version":3,"sources":["webpack:///webpack/bootstrap 12a01ab82d6687293ad6","webpack:///./src/common/getClassLogger.js","webpack:///./src/errors/StError.js","webpack:///./src/common/util.js","webpack:///external \"bluebird\"","webpack:///external \"path\"","webpack:///./src/controllers/FileSystemHandler.js","webpack:///external \"events\"","webpack:///./src/controllers/ProjectConfigurator.js","webpack:///./src/controllers/IotConsoleAgent.js","webpack:///./src/models/Project.js","webpack:///external \"lodash/cloneDeep\"","webpack:///./src/controllers/StCloudAgent.js","webpack:///external \"os\"","webpack:///./src/models/SmartApp.js","webpack:///./src/common/StLogger.js","webpack:///./src/controllers/CertManager.js","webpack:///./src/controllers/DeviceProfileManager.js","webpack:///./src/controllers/IotCloudAgent.js","webpack:///external \"fs-extra\"","webpack:///./src/models/DeviceProfile.js","webpack:///./src/controllers/DeviceResourceManager.js","webpack:///./src/controllers/ProjectBuilder.js","webpack:///./src/controllers/ProjectGenerator.js","webpack:///./src/models/CoapOptions.js","webpack:///external \"lodash\"","webpack:///./src/common/TextHandler.js","webpack:///./src/controllers/RequestManager.js","webpack:///external \"child-process-es6-promise\"","webpack:///./src/controllers/MetaDataGenerator.js","webpack:///./src/controllers/ResourceTypeManager.js","webpack:///external \"xml2js\"","webpack:///./src/models/WebConsoleProject.js","webpack:///external \"fs\"","webpack:///./src/models/CoapMessage.js","webpack:///external \"uuid\"","webpack:///external \"uuid/v4\"","webpack:///./src/models/OcfDeviceResource.js","webpack:///./src/controllers/OcfGroupManager.js","webpack:///./src/controllers/IotCloudClient.js","webpack:///./src/models/OcfGroup.js","webpack:///./src/common/archiveBuilder.js","webpack:///./src/controllers/SmartAppManager.js","webpack:///./src/models/AppCatalog.js","webpack:///external \"qs\"","webpack:///external \"debug\"","webpack:///./src/controllers/AuthProviderAgent.js","webpack:///./src/controllers/DevPortalManager.js","webpack:///./src/controllers/AwsManager.js","webpack:///external \"lodash/isEmpty\"","webpack:///./src/controllers/CapabilityManager.js","webpack:///./src/models/OcfDeviceInfo.js","webpack:///./src/models/OcfDevicePlatform.js","webpack:///./src/controllers/Configurator.js","webpack:///./src/models/OcfDevice.js","webpack:///./src/controllers/IotCloudServer.js","webpack:///./src/controllers/ManifestManager.js","webpack:///external \"tv4\"","webpack:///./src/common/Schema.js","webpack:///./src/controllers/OcfLogManager.js","webpack:///external \"adbkit\"","webpack:///./src/controllers/ProjectManager.js","webpack:///./src/controllers/PackageBuilder.js","webpack:///external \"lodash/clone\"","webpack:///./src/controllers/OcfProjectController.js","webpack:///./src/controllers/PluginPackageController.js","webpack:///./src/models/WebConsoleDeviceProfile.js","webpack:///./src/models/WebConsoleDevicePlugin.js","webpack:///./src/models/WebConsoleCatalog.js","webpack:///./src/controllers/ServicePluginProjectController.js","webpack:///./src/controllers/AutomationProjectController.js","webpack:///./src/controllers/ThingsSdkConverter.js","webpack:///./src/models/InstalledSmartAppConfig.js","webpack:///./src/models/SmartAppSubscription.js","webpack:///./src/index.js","webpack:///./src/controllers/AuthManager.js","webpack:///./src/controllers/CoapTcpConnector.js","webpack:///external \"http\"","webpack:///external \"tls\"","webpack:///external \"net\"","webpack:///external \"i18next\"","webpack:///external \"i18next-sync-fs-backend\"","webpack:///./src/errors/Errors.js","webpack:///external \"crypto\"","webpack:///external \"cbor\"","webpack:///external \"log4js\"","webpack:///external \"source-map\"","webpack:///external \"cycle\"","webpack:///external \"request-promise\"","webpack:///external \"request-promise/errors\"","webpack:///external \"async-lock\"","webpack:///./src/controllers/DevPortalAgent.js","webpack:///external \"x509.js\"","webpack:///external \"https-proxy-agent\"","webpack:///external \"aws-sdk\"","webpack:///./src/controllers/C2cDeviceProfileManager.js","webpack:///./src/controllers/DeviceProfileMapper.js","webpack:///./src/models/DeviceProfileEntry.js","webpack:///external \"lodash/union\"","webpack:///external \"raml-1-parser\"","webpack:///./src/models/Capability.js","webpack:///./src/models/OcfDeviceType.js","webpack:///./src/models/C2cDeviceProfile.js","webpack:///external \"data-store\"","webpack:///./src/models/Configuration.js","webpack:///./src/controllers/DeviceManager.js","webpack:///./src/models/Device.js","webpack:///./src/controllers/OcfGroupMapper.js","webpack:///./src/controllers/LocationManager.js","webpack:///./src/models/Location.js","webpack:///./src/controllers/ManifestMapper.js","webpack:///./src/models/ManifestPresentationResource.js","webpack:///./src/models/ManifestVoiceResource.js","webpack:///./src/controllers/OcfDeviceManager.js","webpack:///./src/models/OcfLog.js","webpack:///./src/controllers/OneAppController.js","webpack:///./src/controllers/AdbController.js","webpack:///./src/models/TemplateInfo.js","webpack:///external \"jszip\"","webpack:///./src/controllers/LambdaAppBuilder.js","webpack:///./src/models/DevicePlugin.js","webpack:///./src/models/WebConsoleSmartApp.js","webpack:///./src/models/WebConsoleManifest.js","webpack:///./src/controllers/C2cProjectController.js","webpack:///./src/controllers/SmartAppInstManager.js","webpack:///./src/models/InstalledSmartApp.js","webpack:///./src/controllers/SmartAppSchManager.js","webpack:///./src/models/SmartAppSchedule.js","webpack:///./src/controllers/SmartAppSubManager.js","webpack:///./src/controllers/PluginManager.js","webpack:///./src/controllers/StLogManager.js","webpack:///external \"eventsource\"","webpack:///./src/controllers/WebConsoleProjectManager.js","webpack:///./src/controllers/WebConsoleProjectConfigurator.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","logger","decycle","os","getLogString","varArgs","reduce","acc","arg","newAcc","Error","EOL","JSON","stringify","createOverridedMethod","className","targetMethod","methodLogger","[object Object]","target","thisArg","args","trace","result","Reflect","apply","e","error","then","res","err","Proxy","getInstanceLogger","targetMethods","propName","receiver","includes","constructor","getClassLogger","instance","construct","overridedInstance","getText","errorCode","parseArguments","key","cause","argv","length","slice","StError","getError","shortMessage","MSG_KEY","super","message","this","code","path","fs","fsExt","isInt","Number","isFloat","getRoot","root","__dirname","existsSync","resolve","getListIterator","list","url","isNext","agent","agentMethodName","getList","items","_links","forEach","item","push","next","href","removeProxyEnv","proxyEnvVars","v","process","env","getSmallUuid","chars","randomstring","rnum","Math","floor","random","substring","getProxy","config","server","globalProxy","proxy","serverConfig","serverProxy","undefined","proxyWithProtocol","split","getServerConfig","assign","getFlatKeys","parentKey","keys","flatKeys","value","flatKey","subKeys","concat","sort","isValidVid","vid","vidRegex","test","filterFloat","NaN","getLibVersion","packageFile","readJsonSync","version","encodeBase64","str","Buffer","from","toString","decodeBase64","validLamdaARN","arns","LAMBDA_ARN_REG_EXP","arn","validWebhookUrl","WEBHOOK_URL_REG_EXP","require","fsExtra","promisify","makeDir","mkdir","readDir","readdir","readDirSync","readdirSync","writeFile","readFile","readFileSync","deleteFile","unlink","stat","statSync","createReadStream","exists","pathExists","readJson","ensureDir","writePath","outputFile","copy","remove","removeSync","renameSync","pathUtil","CONFIG_FILE","ProjectConfigurator","projPath","configPath","join","projConfig","updateConfig","OUT_IOS_DIR","SIDELOADING_DIR","SMART_APP_FILE","CATALOG_FILE","APP_CATALOG_FILE","PROD_CATALOG_FILE","DEVICE_PROFILE_FILE","MANIFEST_DIR","UI_MANIFEST_FILE","VOICE_MANIFEST_FILE","PLUGIN_DIR","PPKS_DIR","PLUGIN_MANIFEST_FILE","PLUGIN_INDEX_FILE","PLUGIN_ICON_FILE","PLUGIN_CSS_FILE","PLUGIN_JS_FILE","PLUGIN_CSS_DIR","PLUGIN_JS_DIR","PLUGIN_LIB_DIR","SCPLUGINAPI_JS_FILE","ANDROID_GENERIC_DEVICE_PLUGIN_URI","IOS_GENERIC_DEVICE_PLUGIN_URI","DEFAULT_GENERIC_DEVICE_PLUGIN_URI","SMART_APP_DIR","LAMBDA_CONFIG_FILE","LAMBDA_PACKAGE_JSON_FILE","DEFAULT_LAMBDA_JS_FILE","Promise","RequestManager","uuid","EventEmitter","URL","SDK_LOGIN","SDK_AUTHCODE","SIGN_IN","TEMPLATE","WORKFLOW","UIMANIFEST","DELETEUIMANIFEST","UPDATEUIMANIFEST","VOICEMANIFEST","DELETEVOICEMANIFEST","UPDATEVOICEMANIFEST","AUTHOR_CERTIFICATE","DISTRIBUTOR_CERTIFICATE","DEVICE_CERTIFICATE","CLOUD_CONNECTED_PROJECT","AUTOMATION_PROJECT","SERVICE_PLUGIN_PROJECT","PLUGIN","LOGIN_DONE","AUTHENTICATION_STATUS","METHOD","GET","POST","PUT","DELETE","TEMPLATE_LIST_PATH","sendRequest","method","response","payload","startsWith","json","urlFrags","tid","templates","parse","filter","t","id","reject","templatePath","values","extractMessage","resultMsg","resultDetail","status","IoTConsoleAgent","accessToken","userId","mnid","email","uri","serverUri","rejectUnauthorized","requestManager","on","msg","emit","isInit","init","Authorization","X-IOT-UID","X-IOT-MNID","workflowid","workflowtype","ownerId","METHODS","query","headers","getHeader","request","mnmn","type","workflowId","manifest","csr","deviceName","splitCsr","strippedCsr","body","purpose","catch","platform","distributorType","privilegeLevel","extraOptions","requestProject","projectId","pageSize","pageNum","ppkFile","formData","options","filename","basename","contentType","X-SDK-VER","state","requestAuthentication","ssoToken","authCode","deviceId","pluginType","reqStatus","plgnType","devStatCd","pkgNm","PROJ_TYPE","freeze","OCF","AUTOMATION","C2C","SERVICE","isValidProjectType","Project","endpointApp","lambda","outputPath","APPS","OAUTH","INSTALLED_APPS","DEVICES","CONFIGS","SETTINGS","LOCATIONS","SUBSCRIPTIONS","SCHEDULES","DEVICE_PROFILES","CLIENT_SUBSCRIPTION","CAPABILITY","statusCodeToMessageKey","400","401","403","404","422","429","handleStCloudError","statusCode","details","element","StCloudAgent","baseUri","authorization","getHeaders","requestBody","appType","nameOrId","clientName","scope","locationId","appStatus","installedAppStatus","installedAppId","configStatus","configurationStatus","iid","configId","cid","PATCH","sid","di","ci","deviceCommand","Accept","subscriptionFilters","APP_TYPE","LAMBDA","WEBHOOK","BEHAVIOR","isValidAppType","SmartApp","appName","appId","displayName","description","singleInstance","owner","createdDate","lastUpdatedDate","lambdaSmartApp","webhookSmartApp","behavior","impl","ui","oauth","resp","smartApp","appNm","appRefUuId","appTypeCd","appDsc","multInstanceTypeCd","ownrId","appScopeList","map","scopeNm","functions","tgtArnList","tgtArn","targetUrl","rgtUrl","tgtUrl","refAppId","publicKey","toCreateRequestBodyIotConsole","log4js","SourceMapConsumer","sourceMapFilesRepo","DEFAULT_LOG_LEVEL","VALID_LOG_LEVELS","isValidLogLevel","logLevel","getItemInStack","stack","stackIndex","trimedSecondLineOfStack","trim","replace","splitItems","file","line","column","getOriginCodeInfo","smc","originalPosition","originalPositionFor","parseInt","coordinateSourcePath","source","searchValue","sep","startIdx","indexOf","getLogLineInfo","originPosition","appenders","logfile","maxLogSize","homedir","layout","pattern","categories","default","level","configure","StLogger","getLogger","log4jConfig","addLogMethods","toLowerCase","log","isLevelEnabled","lineInfo","newArgs","cp","IotConsoleAgent","x509","csrGeneratorPath","decryptPriPath","CertManager","securityProfilesPath","securityPath","targetDir","password","commonName","organizationalUnit","organization","locality","country","PASSWORD_REGEX","outDir","spawn","stderr","createPpkCsrPair","authorCsrPath","distributorCsrPath","authorCertPath","distributorCertPath","authorCsrBuffer","getAuthorCertificate","certificate","distributorCsrBuffer","getDistributorCertificate","createDeviceCsrForProduct","csrPath","certPath","csrBuffer","getDeviceCertificate","createDeviceCsr","keyPath","exist","authorKeyPath","distributorKeyPath","validatePpkCert","authorPem","distPem","authorCert","distCert","parseCert","Date","notAfter","deviceCertPath","devicePem","deviceCert","iotCloud","clientKey","clientCert","validateDeviceCert","isValidPassword","correct","cert","getDeviceKeyCertPath","cloneDeep","isEmpty","devProfileMapper","DeviceProfile","CapabilityManager","DeviceResourceManager","OcfDeviceType","OcfDeviceInfo","OcfDevicePlatform","OcfDeviceResource","MAX_VID_LENGTH","MAX_DEVICE_NAME_LENGTH","MAX_CAPABILITY_NUM","retrieveDeviceProfileListFromFile","listFilePath","data","dataObject","deviceProfiles","deviceTypes","entry","mapToDeviceProfileEntry","writeDeviceProfileListToFile","contents","dirname","encoding","writeCustomDeviceProfileToFile","deviceProfileFilePath","deviceProfile","verifyCapabilitiesInComponents","components","cm","retrieveCapabilityList","supportedCaps","specifiedCaps","comp","capabilities","cap","specifiedCap","found","find","supportedCap","DeviceProfileManager","customDeviceProfileDirPath","baseDeviceProfileDirPath","builtInListFilePath","customListFilePath","mapFilePath","oldCustomDirPath","copySync","dtypes","profileId","validateDeviceProfile","deleteMnid","deviceProfile0","deviceProfileList","newDeviceProfileList","createDeviceProfileEntry","retrieveDeviceProfile","searchCriteria","filterList","category","builtIn","retrieveDeviceProfileList","retrieveDeviceProfileFromFile","filePath","mapToDeviceProfile","retrieveConfig","profilePath","deviceProfilePath","targetDeviceProfile","newEntry","deviceProfileId","profiles","profile","includeDefault","isCapabilityModelType","isCap","convertToResourceModelByDeviceProfile","allResources","component","capability","resources","mapCapabilityToResources","deviceResource","DEFAULT_OIC_D_RESOURCE","metadata","ocfDeviceType","rt","metaDeviceType","deviceType","dtype","retrieveDeviceType","DEFAULT_OIC_P_RESOURCE","deviceInfo","icv","dmv","platformInfo","mnml","mnmo","mndt","mnpv","mnos","mnhw","mnfv","device","capabilityId","componentId","useDefaultComponent","mappedResources","mappedResource","r","resourceHref","ocfResource","if","title","bm","resource","capabilityMap","matched","promises","all","validateMetaDeviceType","retrieveDeviceTypeList","userDeviceName","dpManager","links","deviceMnmn","origDeviceProfile","querystring","CoapTcpConnector","AuthProviderAgent","AsyncLock","CREATE_TOKEN","SIGN_UP","REFRESH_TOKEN","DEVICE_PROFILE","DEVICE_RESOURCE","DEVICE_STATES","DEVICE_LIST","GROUP","DELETE_DEVICE","PING","PUBLISH_DEVICE","OBSERVE_SERVICE","OBSERVE","UNOBSERVE","lock","IotCloudAgent","useRedirection","redirecturi","serverCert","uri0","serverCert0","connected","connector","socket","connect","disconnect","sendResponse","accesstoken","authprovider","uid","asDevice","clientid","CLIENT_ID","devicetype","authcode","getAccessTokenResponse","getAccessTokenByAuthCode","signUpResponse","login","refreshtoken","granttype","interval","in","members","delimiter","gid","gname","parent","op","masters","devices","interf","acquire","observe","cancelObserve","callback","handler","setRequestHandler","DTYPES_JSON_PATH","DEVICE_RT_JSON_PATH","supportedDeviceTypes","resourceTypeMap","resourceType","resourceTypes","retrieveDeviceResourceTypeList","retrieveDeviceResourceType","tv4","clone","Emitter","SmartAppManager","ManifestManager","Schema","PackageBuilder","xml","ProjectBuilder","dpFilePath","manifestFilePath","mtime","bind","projType","isUpdatedDeviceProfile","buildOcfProject","buildC2cProject","buildAutomationProject","buildDeviceProfileFile","buildManifestFiles","buildPluginFiles","buildCatalogFile","outFilePath","deviceProfileData","metaDirPath","uiManifestPath","voiceManifestPath","buildUiManifestFile","buildVoiceManifestFile","outputFilePath","uiManifestData","uiManifest","validate","uiSchema","dataPath","validatePoCodes","language","lang","newLang","outputManifest","voiceManifestData","voiceManifest","voiceSchema","pluginPath","manifestXmlPath","tempPluginPath","tempLibPath","outManifestXmlPath","srcSCPluginApiJsPath","outSCPluginApiJsPath","validatePackageName","validatePackageNameInSmartApp","manifestXmlData","packer","pack","parser","Parser","parseXmlStr","parseString","manifestDoc","plugin","manifestAttrs","$","manifestDeviceAttrs","ppkName","package","versionName","pluginFilePath","pluginContext","versionCode","deviceSubType","subType","deviceManufacturer","manufacturer","platformVersion","minPluginSdkVersion","finally","catalogFilePath","catalog","versions","appData","setupAppData","ocf","mnId","setupIdRegex","setupId","smartAppManager","retrieveSmartAppInProject","smartAppConfig","automationAppData","endpointAppId","prodCatalog","modelCd","easysetupId","RSRC_BASE_DIR","DEFAULT_C2C_CATALOG","DEFAULT_AUTOMATION_CATALOG","readManifestXml","packageName","expectedDpUri","dpInfo","info","dpUri","smartAppJsonPath","pluginId","files","catalogFile","prodCatalogFile","dpFile","manifestFile","catalogOutFilePath","dpOutFilePath","splitedManifestFile","content","manifestOutFilePath","ppkOutFilePath","packageFileName","archiveBuilder","MAX_PROJECT_NAME_LENGTH","PROJECT_NAME_INVALID_CHAR","PROJECT_NAME_INVALID_START_WITH_REG_EXP","PROJECT_NAME_INVALID_END_WITH_REG_EXP","PKG_NAME_REG_EXP","scPluginJsFile","DEFAULT_INDEX","DEFAULT_JS","DEFAULT_CSS","DEFAULT_MANIFEST","DEFAULT_OCF_CATALOG","DEFAULT_DEVICE_PROFILE","LAMBDA_DEFAULT_FILE","DEFAULT_PACKAGE_JSON","ProjectGenerator","uiMetaGenerator","deviceProfileManager","deviceProfileInfo","mainState","mainAction","devicePluginId","createDevicePlugin","proj","validateProjectInfo","generateDeviceProfileFile","generateManifestFiles","generateDevicePluginFiles","generateCatalogFile","generateConfig","lambdaConfig","generateLambdaSmartAppFiles","template","sourceType","unzip","resolvedProfilePath","isFile","manifestDir","generateUiMetaFromDeviceProfile","msCapability","maCapability","devicePlugin","uiManifestPathContents","libPath","jsDirPath","cssDirPath","defaultManifest","catalogPath","prjName","lambdaArns","endpointAppName","runtime","lambdaFileContents","smartAppPath","configFile","packageJsonFile","lambdaFilePath","validateProjectInput","_","MAX_OBSERVE","OptionNameToNumber","If-Match","Uri-Host","ETag","If-None-Match","Observe","Uri-Port","Location-Path","Uri-Path","Content-Format","Max-Age","Uri-Query","Location-Query","Block2","Block1","Proxy-Uri","Proxy-Scheme","Size1","NumberToOptionName","invert","MediaTypeToNumber","text/plain","text/csv","text/html","image/gif","image/jpeg","image/png","image/tiff","application/link-format","application/xml","application/octet-stream","application/rdf+xml","application/soap+xml","application/atom+xml","application/xmpp+xml","application/exi","application/fastinfoset","application/soap+fastinfoset","application/json","application/x-obix-binary","application/cbor","NumberToMediaType","CONTENT_FORMAT","CBOR","numberTo4Bytes","buffer","alloc","masked","writeUInt8","CoapOptions","format","setObserve","setUriPath","setUriQuery","setContentFormat","uriPath","contentFormat","uriQuery","has","number","seg","bufferList","totalLength","lastNumber","option","delta","deltaLengthByte","extDeltaBytes","extLengthBytes","writeUInt16BE","strings","fromRawOptions","opts","readUInt8","util","i18next","backend","use","lng","fallbackLng","debug","initImmediate","interpolation","escapeValue","loadPath","subUri","noBaseUri","qs","requestLog","responseLog","errorLog","ResourceTypeManager","DEFAULT_UI_META","DEFAULT_VOICE_META","manifestMergeFunc","obj","src","isArray","mergeWith","generateMainStateResource","ms","origResource","index","group","iconUrl","label","arguments","range","valueType","visible","alternatives","controlType","capabilityPropertyMap","tgtHrefPattern","argument","rscIndex","pop","generateMainActionResource","ma","link","generateDpResource","order","dpResource","dpResources","MetaDataGenerator","resourceTypeMgr","baseDir","mapToResourcesFile","poCodeResources","uiMeta","uiVersion","dpType","generateMainStateFromDeviceProfile","generateMainActionFromDeviceProfile","generateDisplayResourcesFromDeviceProfile","generateLanguageFromDeviceProfile","voiceMeta","voiceVersion","dalias","metaOcfDeviceType","generateVoiceSmlFromDeviceProfile","sml","uiManifestFile","voiceManifestFile","generateVoiceMetaFromDeviceProfile","cwd","manifestPath","retrieveCapabilityMapperFile","capMapInfo","generateVoiceSmlFromCapability","hrefTokens","mainComponent","subComponents","each","dstLang","locale","poCodes","unionWith","isEqual","defaultLang","retrieveAllPoCodeResources","poCode","po","addedCapabilities","voiceCapability","Array","origCapability","mapperFile","getMapperFileFromCapability","mapperFilePath","capabilityMetaInfo","warn","srcHrefPattern","capability2MapperFile","mapToResources","capId","resourceInfo","getResourceFilePathFromTitle","fileName","tok","charAt","toUpperCase","substr","localeStr","localeJson","union","ramlParser","initModule","getInterfacesFromTraits","traits","interfaces","trait","queryParameters","enum","getPropertiesFromAllOf","allOf","refJsonFileMap","properties","ref","refToks","$ref","refFile","refRt","definitions","trgtDefinitions","mapToResourceType","rootNode","toJSON","is","methods","api","schemaNameOrContent","schema","example","responses","schemas","schemaObj","schemaObjKey","required","resourceTypeDirPath","includeDetail","initRefJsonFileMap","ramlFiles","extname","retrieveResourceType","rts","rPath","parseRAML","httpResolver","getResourceAsync","fsResolver","contentAsync","initialized","relPath","jsonFiles","jsonFile","WebConsoleDeviceProfile","WebConsoleSmartApp","WebConsolePlugin","WebConsoleCatalog","WebConsoleManifest","TYPE","CLOUD_CONNECTED","STATUS","ALPHA","RC","WebConsoleProject","connectorApp","appCatalog","project","pjtId","pjtNm","pjtDsc","certificated","devStatNm","createFromCloudConnectedResp","ctlgId","whProdId","refProdUuid","whGrpId","refGrpUuid","refWhAppId","refAppUuid","createFromResp","rows","pjt","webPrj","createFromAutomationResp","includesClientSecret","createFromServicePluginResp","oauthClientId","clntId","oauthClientSecret","clntSec","crypto","cbor","PAYLOAD_MARKER","PAYLOAD_MARKER_BUFFER","STATUS_CODE","CREATED","DELETED","VALID","CHANGED","CONTENT","BAD_REQUEST","UNAUTHORIZED","BAD_OPTION","FORBIDDEN","NOT_FOUND","METHOD_NOT_ALLOWED","NOT_ACCEPTABLE","PRECONDITION_FAILED","REQUEST_ENTITY_TOO_LARGE","UNSUPPORTED_CONTENT_FORMAT","INTERNAL_SERVER_ERROR","NOT_IMPLEMENTED","BAD_GATEWAY","SERVICE_UNAVAILABLE","GATEWAY_TIMEOUT","PROXYING_NOT_SUPPORTED","codeToString","1","2","3","4","65","66","67","68","69","128","129","130","131","132","133","134","140","141","143","160","161","162","163","164","165","225","226","227","228","229","serializePayload","normalized","mapValues","encode","CoapMessage","token","randomBytes","buffers","optionsBuffer","toBytes","payloadBufer","codeLength","codePart","tokenPart","tokenLength","bodyPart","makeBody","bodyLength","byte","lengthPart","lenPartLength","writeUInt32BE","optionsString","decodeTcpMessage","position","readUInt16BE","readUInt32BE","rawOptions","firstByte","deltaLengthPart","decodeFirstSync","simpleObj","oicdResource","oicpResource","IotCloudClient","OcfGroupManager","client","iotCloudConfig","iotConsoleConfig","authProviderConfig","getDeviceKeyCert","clientConfig","authProvider","iotConsole","createGroup","retrieveGroupList","retrieveGroup","operation","validateDeletableDevices","updateGroup","deleteGroup","groupId","isDefaultGroup","dis","checkStatus","retrieveDevice","OcfGroupMapper","OcfGroup","OcfDevice","signedIn","intervalId","clearInterval","isConnected","getDeviceResources","rm","post","propKeys","argKeys","invalidKey","argKey","propKey","promise","signIn","getPing","setPing","setInterval","getAuthCodeBySsoToken","signUpWithAuthCode","prefix","resourceUri","ensureSignIn","getDeviceState","prslist","validateCommandArgs","commandDevice","getDeviceProfile","getGroupList","stateResponse","profileResponse","resourcesResponse","groupsResponse","filtered","nick","a","b","aName","bName","localeCompare","createListEntryFromResp","things","retrieveDeviceList","getDeviceList","dilist","isClient","deleteDevice","foundDevice","match","matchedResources","getDeviceResource","mapToGroup","getGroup","subGroups","getAllSubGroups","groups","grs","mapToGroupList","subs","ds","mbs","mts","rs","PRIVATE","observeDeviceState","cancelObserveDeviceState","eventTypes","observeServiceEvent","observeresponsetype","observeResource","cancelObserveResource","PUBLIC","latitude","longitude","radius","backgroundImage","gacl","createTime","updateTime","JSZip","pathJoin","pathBasename","zipHelper","zipObject","isDirectory","innerFiles","paths","innerFile","folder","mode","unixPermissions","zip","destPath","generateAsync","compression","compressionOptions","archivePath","zipData","loadAsync","entries","zipPaths","zipPath","targetPath","dir","async","AwsManager","LambdaAppBuilder","awsManager","appConfig","validateSmartAppConfig","createApp","lambdaArn","registerSmartApp","validateProjectConfig","registerLambdaFunction","endpointInfo","cleanUpLambdaFunction","getAppListIterator","apps","getAppList","getApp","retrieveSmartApp","updateApp","updateSmartApp","updateSmartAppInternalInProject","updateSmartAppInProject","deleteApp","forceDeleteLambda","func","lambdaAppName","deleteLambdaFunction","deleteSmartApp","lambdaAppPath","deleteLambdaSmartApp","updateAppOauth","updateSmartAppOauth","getAppOauth","retrieveSmartAppOauth","settings","baseUrl","stCloud","setting","updateAppSettings","updateSmartAppSettings","getAppSettings","retrieveSmartAppSettings","lambdaConfigPath","role","aws","toRequestBody","app","smartAppDir","updateLambdaFunction","updatedConfig","retrieveLambdaConfig","existsLambdaFunction","builder","build","lambdaZipFile","LAMBDA_ZIP_FILE_NAME","createLambdaFunction","FunctionArn","clean","SETUP","AppCatalog","appInternalName","localizations","StatusCodeError","INVALID_SSO_TOKEN_CODE","response_type","sso_token","physical_address_text","service_type","client_id","redirect_uri","followRedirect","location","subStringStartIndex","error_code","DevPortalAgent","DEPRECATED_ID","PROGRAM_ID","DevPortalManager","configurator","getConfig","devPortal","programId","set","requestAccount","Contact","Email","individualMnnm","Name","individualMnid","MNid__c","companyMnnm","Account","companyMnid","currentMnid","currentMnnm","previousMnidMnnm","hasCompany","HttpsProxyAgent","AVAILABLE_AWS_REGIONS","LAMBDA_ACTION","LAMBDA_STATEMENT_ID","AWS","region","accessKeyId","secretAccessKey","awsConfig","httpOptions","update","lambdaFunction","awsLambda","Lambda","apiVersion","createFunction","context","params","FunctionName","Runtime","Role","Handler","Code","ZipFile","addStInvokePermission","listFunctions","funcName","listLambdaFunctions","Functions","updateFunctionCode","updateFunctionConfiguration","getLambdaPolicy","policy","Policy","Statement","Sid","removeStInvokePermission","deleteFunction","addPermission","Action","Principal","awsAccount","StatementId","removePermission","getPolicy","Capability","sortByVersion","verA","verB","comparison","tolowercase","capabilitiesFilePath","mapToResourcesFilePath","metaDataGenerator","capabilityIds","mapToResourcesList","canBeUsedAsMainState","canBeUsedAsMainAction","canBeUsed","sdkOnly","retrieveCapabilityListFromSTCloud","stCapabilites","retCpbtList","stCpbt","cpbt","resultCpbtList","capabilityInfo","retrieveCapabilityVersionList","sortedList","getCapability","getCapabilityVersionList","getCapabilityList","Store","Configuration","merge","unset","VALID_CONFIG_KEYS","SECURITY_PROPERTIES","DEFAULT_CONFIG_DIR_NAME","DEFAULT_CONFIG_PATH","DEFAULT_SECURITY_PATH","SECURITY_FILE_NAME","Configurator","toolConfigFilePath","systemConfigFilePath","toolConfigDirPath","toolConfigDirName","toolConfigFileName","systemConfigDirPath","systemConfigFileName","oldProxyInToolConfig","serverName","defaultConfigPath","adbPath","accessTokenExpireDate","authState","mnnm","refreshToken","refreshTokenExpireDate","toolConfig","getDefaultToolConfig","systemConfig","getDefaultSystemConfig","securityConfig","getDefaultSecurityConfig","iotCloudProd","stCloudProd","getDefaultConfig","iotConsoleUri","save","clearSecurityProfile","shouldChange","issueNewDeviceCert","checkDeviceKeyCert","createDeviceCert","filterToolConfig","clear","filterSystemConfig","filterSecurityConfig","toolKeys","isSystemProperty","isSecurityProperty","toolKey","toolValue","systemKeys","systemKey","systemValue","securityKeys","securityKey","endsWith","toolConfigOption","loadedToolConfig","defaultToolConfig","pathExistsSync","del","setLogLevel","systemConfigOption","loadedSystemConfig","defaultSystemConfig","securityBasePath","securityDirPath","securityFilePath","loadedSecurityConfig","awsRole","newSecurityConfig","validateSecurityPath","separator","volumeWithBackSlash","volumeWithSlash","hasDisAllowedChar","absolute","disAllowedChars","splice","names","disAllowedChar","initToolConfig","initSystemConfig","initSecurityConfig","changeSecurityPath","setToolConfig","setSystemConfig","setSecurityConfig","force","toSimple","deviceRt","profileResp","resourcesResp","stateResp","groupsResp","oicdLink","SUBSCRIBE","UNSUBSCRIBE","NOTIFY","PUBLISH_TIMEOUT","PUBLISH_WAIT","IotCloudServer","ocfDeviceProfile","toCreateDeviceProfileBody","toPublishDeviceBody","handlers","Map","subscribers","handleRequest","delete","errorResponse","publish","ensureSignUp","createDeviceProfile","timeout","oicd","responded","/oic/p","/oic/d","req","clearTimeout","setTimeout","publishResources","ensurePublish","signOut","addHandler","getSubscribers","sequence","countNextSequence","newSequence","manifestMapper","manifestType","createManifest","validStatus","statusFilter","exceptType","getManifestList","mapToManifestResourceList","getManifest","mapToPresentationManifest","mapToVoiceResource","getManifestTypebyId","updateManifest","deleteManifest","manifestData","regex","validatePoCodeUsage","defined","validatePoCodesInMa","maIndex","alternativesIndex","usagePath","validatePoCodesInMs","msIndex","argIndex","validatePoCodesInDpResources","dpRes","dpResIndex","$schema","detailPageLinkObject","conditionObject","did","operand","operator","iconUrlObject","small","large","mid","vector","alternativeArray","valueTypeObject","controlTypeObject","argumentObject","labelObject","argements","linkObject","mainStateObject","emphasis","mainActionObject","minItems","maxItems","step","ResourcePresentationObject","controllable","ruleEvent","ruleAction","languageObject","LanguageResource","maxLength","enumerationObject","voiceActionObject","action","enumerations","capabilityObject","voiceActions","cts","languageSchema","manifestSchema","OcfLog","getFormattedDate","date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","logDeviceDirPath","OcfLogManager","observingResource","targetDeviceId","logDeviceFilePath","loggers","deleteLogDevice","deleteLogDeviceFromFile","exit","handleSignal","signUp","addLogDeviceToFile","bit","observable","pl","onResourceChangeHandler","listener","observingPromise","clearObservation","onStateChangeHandler","signUpLogDevice","removeAllListeners","cancel","TemplateInfo","OcfProjectController","ServicePluginProjectController","AutomationProjectController","C2cProjectController","ThingsSdkConverter","isValidArnsOrUrl","ProjectManager","projectGenerator","thingsSdkConverter","projectPath","projectBuilder","projectController","createProject","generateAutomationProject","generateC2cProject","retrieveTemplate","generateProjectByTemplate","createDefaultProject","generatePlugin","enableDashboardCard","projects","dirPath","buildProject","projBuilder","signPpk","passwd","signPackage","generateIosOutput","isBuilt","getTemplate","finish","getTemplateList","ppk","testMode","ppkOut","authKey","authCert","distKey","authPass","distPass","getSecurityProfilesPath","checkPpkKeyCert","errmessage","print","ppkPath","unpack","deviceDef","convertToDeviceProfile","configuration","easySetup","connectivity","softAP","createOcfProject","profileFilePath","convertFromDeviceProfile","deviceDefData","iosOutputDir","iosOutputDir2","iosPluginDir","iosPpksDir","iosManifestDir","pluginFile","PACKAGE_FILE_EXT","validateManifest","xmlDoc","checkFileExists","indexPath","iconPath","cssPath","jsPath","existManifest","existIndex","existIcon","existCss","existJs","jsIsDir","cssIsDir","xmlFilePath","outPath","manifestXmlFile","PluginPackageController","getOcfProjectCreateReqBody","reqBody","prodType","dvcPrflNm","dvcPrflDsc","mtdtTypeCd","mtdtJson","getOcfProjectUpdateReqBody","currDir","prodCatalogPath","buildOcfProdCatalogFile","readUiManifestFile","readVoiceManifestFile","readPluginManifestXml","output","selfPublish","registeredWebPrj","postCloudConnectedProject","postCloudConnectedPpkFile","publishWebConsoleProject","deleteWebConsoleProject","getCloudConnectedProjectList","createListFromCloudConnectedResp","getCloudConnectedProject","putCloudConnectedProject","rollback","deleteCloudConnectedProject","postCloudConnectedSelfPublish","postCloudConnectedUnpublish","manifestFileName","DevicePlugin","createFromManifestDoc","dvcPrflId","dvcType","ocfSpecVer","WebConsoleDevicePlugin","plgnId","verNm","dispNm","whAppId","PLUGIN_ID_REGEXP","getSvcPlgnCreateReqBody","appInfoTypeCd","appSettingList","settingKey","settingValue","appUi","dasbdCardYn","dashboardCardsEnabled","getSvcPlgnUpdateReqBody","generateSmartAppFile","generateServicePluginFiles","validateProjectOptions","appCatalogPath","createPlugin","postServicePluginProject","createFromSvcPlgnResp","getServicePluginProjectList","createListFromSvcPlgnResp","getServicePluginProject","putServicePluginProject","deleteServicePluginProject","postServicePluginSelfPublish","postServicePluginUnpublish","en-US","metadataDisplayName","getAutomationCreateReqBody","getAutomationUpdateReqBody","postAutomationProject","getAutomationProjectList","createListFromAutomationResp","getAutomationProject","putAutomationProject","deleteAutomationProject","postAutomationSelfPublish","postAutomationUnpublish","getPropertyType","ramlProperty","deviceProfileMgr","deviceSpec","specification","deviceResources","single","mapToOcfResourceFromResource","mapResourceToCapability","ocfResourceType","retrieveDeviceTypeFromResourceType","vendorId","covertedResources","mapToResourcesFromOcfResources","generateResourceTypesFromOcfResources","specVersion","dataModelVersion","manufactuererName","manufacturerUrl","manufacturingDate","modelNumber","osVersion","hardwareVersion","firmwareVersion","artik","ownershipTransferMethod","wifi","frequency","svrdb","provisioning","privateKey","ocfResources","types","usedResourceTypes","usedResourceType","ocfResourceTypes","convertedProp","prop","rw","mandatory","CONFIG_STATUS","STAGED","DONE","AUTHORIZED","REVOKED","isValidConfigStatus","InstalledSmartAppConfig","configurationId","SOURCE_TYPE","DEVICE","isValidSourceType","SmartAppSubscription","AuthManager","C2cDeviceProfileManager","DeviceManager","FileSystemHandler","GroupManager","LocationManager","OcfDeviceManager","OneAppController","SmartAppInstManager","SmartAppSchManager","SmartAppSubManager","PluginManager","StLogManager","TextHandler","WebConsoleProjectManager","library","iotCloudAgent","authProviderAgent","iotConsoleAgent","iotCloudServerConfig","authProviderServerConfig","iotConsoleServerConfig","authProviderUri","signUpDeviceWithProgress","loginDoneFromIotConsole","ensureDeviceKeyCertWithProgress","getAuthenticationByIotConsole","issueAccessTokenFromIotCloud","signUpWithProgress","requestToken","requestTokenWithoutSignUp","signUpConfig","refreshOnlyWhenExpired","expireDate","now","EXPIRE_DATE_THRESHOLD","expiresin","refreshtoken_expiresin","refreshTokenExpiresin","getAuthentication","accessTokenExpiresIn","refreshTokenExpiresIn","receivedAuthCode","getLoginDone","devPortalManager","requestEnrollmentData","http","tls","net","stLog","createMessage","serverUrl","tlsMode","serverAddr","observeTokenMap","callbackMap","errorCallbackMap","isObserveMap","requestHandler","idx","proxyOptions","host","port","proxySocket","end","serverAddrs","ca","connectType","remoteAddress","remotePort","authorized","encrypted","cipher","getCipher","getPeerCertificate","resetSocket","prevData","errorCallback","coapCode","coapPayload","errorCallbacks","destroy","write","toTcpMessage","send","ADB_CONTROLLER_NO_DEVICE","ADB_CONTROLLER_NO_DEVICE_SERIAL","ADB_CONTROLLER_MANY_DEVICE","CERT_NO_KEY","CERT_NO_CERT","CERT_NO_AUTHOR_KEY","CERT_NO_AUTHOR_CERT","CERT_NO_DISTRIBUTOR_KEY","CERT_NO_DISTRIBUTOR_CERT","CERT_NO_DEVICE_KEY","CERT_NO_DEVICE_CERT","CERT_NO_PASSWORD","CERT_INVALID_PASSWORD","CERT_NO_LOGIN","CERT_NO_DEVICE_NAME","DEVICE_TURNED_OFF","IOT_CONSOLE_DEVICE_CRT_API_FAILED","IOT_CONSOLE_PPK_AUTH_CRT_API_FAILED","IOT_CONSOLE_PPK_DIST_CRT_API_FAILED","IOT_CONSOLE_PRJ_API_FAILED","IOT_CONSOLE_AUTH_API_FAILED","IOT_CONSOLE_SDK_LOGIN_API_FAILED","IOT_CONSOLE_SDK_AUTHCODE_API_FAILED","IOT_CONSOLE_PLUGIN_API_FAILED","SIGN_UP_NO_LOGIN","SIGN_IN_NO_LOGIN","SIGN_IN_EXPIRED_TOKEN","SIGN_IN_NO_SIGN_UP","CREATE_PROJECT_PRJ_ALREADY_EXISTS","CREATE_PROJECT_INVAID_VID","CREATE_PROJECT_INVALID_LAMBDA_ARN","CREATE_PROJECT_INVALID_WEBHOOK_URL","CREATE_PROJECT_VID_EXCEEDS_MAX_LENGTH","CREATE_PROJECT_DEVICE_PLUGIN_OPTION_REQUIRED","CREATE_PROJECT_UNSUPPORTED_DEVICE_MODEL","CREATE_PROJECT_APP_NAME_OPT_REQUIRED","CREATE_PROJECT_APP_TYPE_OPT_REQUIRED","CREATE_PROJECT_LAMBDA_ARN_OPT_REQUIRED","CREATE_PROJECT_TARGET_URL_OPT_REQUIRED","CREATE_PROJECT_PLUGIN_ID_OPT_REQUIRED","PROJECT_NAME_EMPTY","PROJECT_NAME_LENGTH_EXCEEDS_MAX_LENGTH","PROJECT_NAME_START_WITH_INVALID_CHAR","PROJECT_NAME_END_WITH_INVALID_CHAR","THINGS_SDK_PROPERTY_TYPE_MAPPING_NOT_FOUND","INVALID_PLUGIN_ID_REGEX","DEVICE_PLUGIN_PACKAGE_NAME_NOT_MATCHED","PLUGIN_PACKAGE_NAME_NOT_MATCHED_SMART_APP_PLUGIN_ID","VERIFY_PPK_NO_IN","VERIFY_PPK_FAIL","VERIFY_PPK_UNKNOWN_FAIL","VERIFY_PPK_VERIFY_FAIL","VERIFY_PPK_FILE_NOT_FOUND_FAIL","VERIFY_PPK_ZIP_FORMAT_FAIL","SIGN_PPK_NO_AUTH_KEY","SIGN_PPK_NO_AUTH_CERT","SIGN_PPK_NO_DIST_KEY","SIGN_PPK_NO_DIST_CERT","SIGN_PPK_NO_AUTH_PASS","SIGN_PPK_NO_DIST_PASS","SIGN_PPK_NO_PASSWD","SIGN_PPK_INVALID_KEY","SIGN_PPK_FILE_NOTFOUND","SIGN_PPK_FAIL","SIGN_PPK_NO_REQUIRED","EXTRACT_PPK_NO_OUT","INSTALL_APP_FAIL","INSTALL_APP_FAIL_ON_SIM","INSTALL_APP_NO_OPT","INSTALL_APP_FAIL_PUSH","INSTALL_APP_FAIL_CMD","LAUNCH_ONEAPP_SIM_FAIL","LAUNCH_ONEAPP_SIM_FAIL_BY_MEMORY","KILL_ONEAPP_SIM_FAIL","LAUNCH_VD_FAIL","CANNOT_FIND_VIRTUAL_DEVICE","DESCRIBE_MANIFEST_FAIL","REGISTER_MANIFEST_FAIL","DELETE_MANIFEST_FAIL","UPDATE_MANIFEST_FAIL","PUBLISH_DEVICE_NO_TOKEN","CREATE_LOCATION_NO_LATITUDE","CREATE_LOCATION_NO_LONGITUDE","CREATE_LOCATION_NO_RADIUS","CREATE_LOCATION_NO_RADIUS_FLOAT","UPDATE_LOCATION_NO_LATITUDE","UPDATE_LOCATION_NO_LONGITUDE","UPDATE_LOCATION_NO_RADIUS","UPDATE_LOCATION_NO_RADIUS_FLOAT","DELETE_LOCATION_NO_ID","REGISTER_ENDPOINT_APP_NO_CONFIG","REGISTER_ENDPOINT_APP_NO_LAMBDA","UPDATE_ENDPOINT_APP_FAIL","CREATE_SUBSCRIPTION_NO_NAME","CREATE_SUBSCRIPTION_NO_LOCATION","CREATE_SUBSCRIPTION_NO_DEVICE","CREATE_SUBSCRIPTION_NO_SOURCE","CREATE_DEVICE_PROFILE_NO_INPUT","UPDATE_DEVICE_PROFILE_NO_INPUT","SET_CONFIG_NO_KEY","CAPABILITY_OR_DEVICE_PROFILE_PATH_REQUIRED","ONLY_ONE_OF_CAPABILITY_AND_DEVICE_PROFILE_PATH_REQUIRED","NOT_IN_PROJECT_DIRECTORY","NO_WEB_CONSOLE_PROJECT_CONFIG","WEB_CONSOLE_PROJECT_NOT_FOUND","WEB_CONSOLE_URI_NOT_MATCHED","WEB_CONSOLE_PROJECT_CONFIG_NOT_FOUND","WEB_CONSOLE_PROJECT_MNNM_MISMATCH","UI_CLOSED","CANNOT_REFRESH_ACCESS_TOKEN","CANNOT_GET_AUTH_CODE","CANNOT_GET_ACCESS_TOKEN","REFRESH_TOKEN_EXPIRED","INVALID_SSO_TOKEN","LOGIN_ERROR","NO_LOGIN","UNSUPPORTED_REGION","NO_LAMBDA_NAME","NO_LAMBDA_RUNTIME","NO_LAMBDA_ROLE","NO_LAMBDA_HANDLER","NO_APP_NAME","NO_APP_TYPE","NO_APP_IMPLEMENTATION","NO_APP_DISPLAY_NAME","NO_APP_DESCRIPTION","INVALID_APP_TYPE","NO_APP_NAME_OR_NO_APP_ID","INVALID_SCOPE","INVALID_SETTINGS","APP_NOT_FOUND","NO_DEVICE_PROFILE_ID","NO_DEVICE_PROFILE_NAME","NO_COMPONENTS","NO_META_DATA","TOO_MANY_COMPONENTS","TOO_MANY_CAPABILITIES","AT_LEAST_ONE_MAIN_COMPONENT_REQUIRED","CANNOT_FIND_INPUT_PATH","NO_APP_ID","NO_LOCATION_ID","NO_CONFIGURATION_STATUS","NO_INSTALLED_APP_ID","NO_APP_CONFIGURATION_ID","NO_SCHEDULE_NAME","NO_SCHEDULE","NO_SOURCE_TYPE","NO_SUBSCRIPTION_ID","CANNOT_FIND_MAP_TO_RESOURCES","CANNOT_FIND_COMPONENTS","CANNOT_FIND_CAPABILITY","UNSUPPORTED_PROTOCOL","COAP_API_FAILED","NOT_CONNECTED","NO_COMMAND","NO_COMMAND_OPTION","NO_COMMAND_DESCRIPTION","NO_COMMAND_RUNNER","COMMAND_ALREADY_ADDED","CANNOT_LOAD_CONFIGURATION_FILE","NO_DEVICE_ID","NO_DEVICE_COMMAND","NO_RESOURCE_HREF","DEVICE_NOT_FOUND","CANNOT_FIND_CUSTOM_DEVICE_PROFILE","UNSUPPORTED_CAPABILITY","INVALID_DEVICE_PROFILE","EXCEEDED_DEVICE_NAME","EXCEEDED_VID","INVALID_VID","EXCEEDED_META_VID","INVALID_VID_REGEX","INVALID_META_VID","INVALID_META_VID_REGEX","UNSUPPORTED_DEVICE_PROFILE_MODEL","UNSUPPORTED_METADATA_DEVICE_TYPE","CANNOT_FIND_DEVICE_PROFILE","NOT_CAPABILITY_MODEL","CANNOT_MAP_CAPABILITY","NO_RESOURCES_TO_MAP","UNSUPPORTED_DEVICE_PROFILE_TYPE","NO_MNMN_OR_NO_MNID","CAPABILITY_MAPPING_NOT_FOUND","CAPABILITY_MAPPING_ALREADY_EXISTS","DEVICE_TYPE_MAPPING_NOT_FOUND","CANNOT_FIND_MNID","NO_DEV_PORTAL","NO_PROGRAM_ID","CANNOT_PARSE_JSON","IOT_CLOUD_DEVICE_NOT_FOUND","IOT_CLOUD_CLIENT_DEVICE_NOT_FOUND","INVALID_EVENT_TYPES","CANNOT_FIND_TEMPLATE","NO_LOCATION_NAME","NO_COUNTRY_CODE","INVALID_LATITUDE","INVALID_LATITUDE_NUMBER","INVALID_LONGITUDE","INVALID_LONGITUDE_NUMBER","INVALID_REGION_RADIUS","INVALID_TEMPERATURE_SCALE","INVALID_LOCATION_ID","EMPTY_PARAMETER","CANNOT_DELETE_DEFAULT_LOCATION","INVALID_RESPONSE","INVALID_STATUS","FAILED_TO_RETRIEVE_MANIFEST","FAILED_TO_RETRIEVE_MANIFEST_LIST","CANNOT_FIND_MANIFEST","NO_READABLE_PROPERTY","NO_WRITABLE_PROPERTY","INVALID_COMPONENT_ID","CANNOT_FIND_RESOURCE_IN_DEVICE_PROFILE","INVALID_CAPABILITY","INVALID_MAIN_STATE_CAPABILITY","INVALID_MAIN_ACTION_CAPABILITY","CANNOT_FIND_MAPPER_FILE","CANNOT_FIND_CAPABILITY_MAPPER_FILE","CANNOT_FIND_RESOURCE","TOO_MANY_RESOURCES","NO_GROUP_NAME","INVALID_MEMBERS_TYPE","NO_GROUP_ID","INVALID_OPERATION","CANNOT_DELETE_DEVICE_FROM_GROUP","CANNOT_DELETE_DEFAULT_GROUP","CANNOT_FIND_UI_MANIFEST_FILE","CANNOT_FIND_UI_MANIFEST_FILE_BY_PATH","MSG_KEY_","CANNOT_FIND_UI_MANIFEST_FILE_BY_NAME","CANNOT_FIND_SIMULATOR","CANNOT_FIND_PLUGINFOLDER","NO_USER_ID","NO_SSO_TOKEN","NO_AUTH_PROVIDER_URI","NO_MNID","NO_ADB_PATH","UNMATCHED_MNID","UNMATCHED_VID","NO_VID_IN_MANIFEST","CANNOT_FIND_MANIFEST_XML","INVALID_MANIFEST_XML","CANNOT_FIND_PPK_FILE","CANNOT_FIND_CATALOG_FILE","CANNOT_FIND_ADB_FILE","NO_DEVICE_PROFILE_OR_IN","CANNOT_PARSE_SCHEMA","CANNOT_PARSE_EXAMPLE","AVOID_TIME_OUT","CANNOT_PARSE_RAML","INVALID_CONFIGURATION_STATUS","INVALID_INSTALLED_APP_TYPE","INVALID_SOURCE_TYPE","NO_SUBSCRIPTION_DETAIL","NO_COMPANY_INFORMATION","NO_INDIVIDUAL_INFORMATION","UNSUPPORTED_MNID_TYPE","CANNOT_CHANGE_COMPANY_MNID","UNSUPPORTED_OPTION_NUMBER","TOO_LARGE_TCP_BODY","INVALID_OPTION_DELTA","INVALID_OPTION_LENGTH","INVALID_PAYLOAD","INVALID_OBSERVE_OPTION","INVALID_URI_PATH","INVALID_URI_QUERY","INVALID_CATALOG_SETUPID","CANNOT_FIND_RESOURCE_IN_DEVICE","CANNOT_FIND_TYPE_OF_RESOURCE","CANNOT_FIND_PROPERTY_DEFINITION","INVALID_PROPERTY","INVALID_DEVICE_PLUGIN_ID_LONG","INVALID_DEVICE_PLUGIN_ID_URI","UNDEFINED_PO_CODE","NOT_AUTHENTICATED","NOT_AUTHORIZED","UNPROCESSABLE_ENTITY","TOO_MANY_REQUESTS","INVALID_OCF_DEVICE_TYPE","NO_RESOURCE_OPTION","CERT_INVALID_CERTIFICATE","CERT_INVALID_DISTRIBUTOR","CERT_EXPIRED_CERTIFICATE","DESCRIBE_DEVICE_PROFILE_NO_BOTH_OPTION","REQUESTING_AUTH_CODE_FAILED","REQUESTING_ACCESS_TOKEN_FAILED","REQUESTING_AUTHENTICATION_FAILED","GETTING_MNID_FAILED","REQUESTING_DEVICE_CERT_FAILED","SIGNING_UP_TO_IOT_CLOUD_FAILED","INVALID_LOGGER_TYPE","MUTUALLY_EXCLUSIVE_OPTIONS","NO_OPTIONS","NO_AUTHCODE","AUTHCODE_OR_SHOWUI_REQUIRED","UNSUPPORTED_MODE","CANNOT_CREATE_SECURITY","PATH_IS_EMPTY","PATH_WITHOUT_VOLUME","PATH_LENGTH_EXCEEDED","PATH_INCLUDES_ILLEGAL_CHAR","PATH_IS_NOT_AN_ABSOLUTE_PATH","EXCEEDED_CAPABILITIES","MNID","ENROLLMENT_DATA","saguid","C2cDeviceProfile","MAXCAPABILITYCOUNT","validateC2cDeviceProfile","getRequestBodyFromDeviceProfile","inputPath","getDeviceProfileListIterator","getDeviceProfileList","c2cDeviceProfileId","updateDeviceProfile","deleteDeviceProfile","DeviceProfileEntry","deviceProfileEntry","supportedComponents","Device","devicePromise","getDevice","deviceComponentListPromise","compositeDeviceResult","getDeviceComponentStatus","deviceTypeId","deviceTypeName","deviceNetworkType","deviceManufacturerCode","Location","Group","LOCATION_ID_REGEXP","validIdRegExp","countryCode","regionRadius","temperatureScale","isInteger","param","createLocation","isValidId","retrieveLocation","isNaN","updateLocation","getLocation","gm","deleteLocation","timeZoneId","ManifestPresentationResource","ManifestVoiceResource","exceptStatus","manifestList","userData","vidA","vidB","DEVICE_TYPE","UNKNOWN","SDK","LOGGER","clientKeyPath","clientCertPath","retrieveStatus","retrieveClientDeviceList","clients","getLogDeviceList","prerequisites","publishDeviceId","publishDevice","generateOcfDeviceTypeFromDeviceProfile","stop","time","adbkit","AdbController","APP_DEST_PATH","MANIFEST_DEST_PATH","PLUGIN_DEST_PATH","PPK_DEST_PATH","SIMULATOR_FILE_NAME","VIRTUAL_DEVICE_FILE_NAME","SCAPP_TESTMODE_DIR","ADB_INTENT_NAME","getSimulatorDirPath","simulatorPath","getVirtualDeviceDirPath","virtualDevicePath","getExecFile","execFileName","getUIManifestFilename","findDir","isPass","manifestNames","execFile","execPath","configName","execFullPath","projManager","installManifestFiles","uiManifestFilename","splitedUiManifestName","uiManifestName","uiManifestContent","windowsVerbatimArguments","installDevicePluginFile","pkgPath","prjConfig","initForOneAppController","isbuiltProject","built","resultManifest","ext","serial","isDevicePlugin","isManifest","isCatalog","adbController","pushManifestFile","selectedDevice","uimanifestName","voiceManifestName","extUI","transfer","extVoice","pushDevicePlugin","pluginName","verifyPackage","getAdbCmd","getClient","isProductionMode","shell","command","readAll","stdOut","adbFileName","adb","adbCmd","createClient","bin","deviceSerial","listDevices","lambdaPath","buildDir","manifestVersionCode","icon","manufacturerID","verCd","ppkPlfVer","dvcSubType","pluginAttrs","deviceAttrs","privilegeLevelAttrs","pubKey","preInstallDashboardCardsEnabled","preInstDasbdCardYn","appInfoId","appSettings","jsonData","mtdtId","InstalledSmartApp","installedAppType","referenceId","toCreateRequestBody","createInstalledApp","installedApp","configurationDetail","promiseLocs","locations","loc","locId","getInstalledApp","configs","deleteInstalledApp","getInstalledAppConfig","SmartAppSchedule","cronExpr","cronTimezone","onceTime","onceOverwrite","schedule","cron","expression","timezone","once","overwrite","createSchedule","getScheduleListIterator","getScheduleList","scheduleName","getSchedule","deleteSchedule","scheduledExecutions","subscription","createSubscription","subscriptionId","deleteSubscription","count","getSubscriptionListIterator","getSubscriptionList","getSubscription","prefixType","prefixStatus","pkgName","removePlugin","getPluginList","getPlugin","EventSource","LOCATION_EVENTS","DEVICE_EVENTS","INSTALLEDSMARTAPP_EVENTS","SMARTAPP_EVENTS","event","formatted","eventSource","addEventListener","readyState","CLOSED","emitLog","eventName","createClientSubscription","registrationUrl","getRealtimeLogs","registerEventHandlers","Emiter","WebConsoleProjectConfigurator","smartAppMgr","servicePlugin","stCloudAgent","cloudConnected","automation","checkAuthenticationStatus","readProject","prj","createWebConsoleProject","webConfig","existsWebConsoleProject","readWebConsoleProject","exists2","readWebConsoleProjectList","updateWebConsoleProject","deleteConfig","unpublishWebConsoleProject","getAuthenticationStatus","createAutomationApp","createAutomationCatalog","readAutomationProject","readAutomationProjectList","prjList","putAutomationProjectStatusToLocked","putAutomationProjectStatusToUnlocked","toUpdateRequestBody","catalogId","ctlg","updateAutomationApp","updateAutomationCatalog","deviceProfile1","getMainAction","getMainState","webConsoleDeviceProfile","createFromDeviceProfile","postCloudConnectedDeviceProfile","getCloudConnectedDeviceProfile","putCloudConnectedDeviceProfile","deleteCloudConnectedDeviceProfile","postCloudConnectedMetadata","manifestId","putCloudConnectedMetadata","deleteCloudConnectedManfest","postCloudConnectedCatalog","getCloudConnectedCatalog","deleteCloudConnectedCatalog","createCloudConnectedCatalog","ppkFileName","postCloudConnectedDevicePlugin","getCloudConnectedDevicePlugin","postCloudConnectedDevicePluginForUpdate","deleteCloudConnectedDevicePlugin","smartAppOauth","postAutomationApp","putAutomationApp","toUpdateRequestBodyIotConsole","postAutomationCatalog","getAutomationCatalog","putAutomationCatalog","deleteAutomationCatalog"],"mappings":"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,UACA,QAGAwmB,kBACA16C,KAAA,QACA3M,OACA8iB,MAAA,mCACAnW,KAAA,SACA6yB,YACAvhC,KACAiV,YAAA,+BACAvG,KAAA,UAEAvK,OACA8Q,YAAA,4BACAvG,KAAA,WAGAk0B,UACA,MACA,WAIAymB,iBACAp0C,YAAA,oBACAvG,KAAA,SACAyyB,MACA,SACA,UACA,UACA,QACA,OACA,WACA,SAGAmoB,mBACAr0C,YAAA,4DACAvG,KAAA,SACAyyB,MACA,qBACA,iBACA,eACA,OACA,YACA,WACA,aACA,SACA,QACA,WAGAooB,gBACA76C,KAAA,SACA6yB,YACA7kC,GACAuY,YAAA,gBACAvG,KAAA,UAEArM,MACA4S,YAAA,6BACAvG,KAAA,UAEA3R,UACAkY,YAAA,uCACAvG,KAAA,UAEAotB,WACA4F,KAAA,iCAEA1F,cACA/mB,YAAA,8BACAysB,KAAA,mCAGAkB,UACA,IACA,OACA,aAGA4mB,aACA96C,KAAA,SACA6yB,YACA7kC,GACAuY,YAAA,aACAvG,KAAA,UAEAitB,OACA1mB,YAAA,iEACAvG,KAAA,UAEA+6C,WACA/nB,KAAA,iCAGAkB,UACA,UAGA8mB,YACAh7C,KAAA,SACA6yB,YACAl/B,MACA4S,YAAA,wBACAvG,KAAA,UAEAkW,IACA3P,YAAA,YACAvG,KAAA,UAEAwU,IACAjO,YAAA,gBACAvG,KAAA,WAGAk0B,UACA,OACA,KACA,OAGA+mB,iBACAj7C,KAAA,SACA6yB,YACArlC,MACA+Y,YAAA,2BACAvG,KAAA,UAEA+sB,OACAxmB,YAAA,wCACAvG,KAAA,UAEAgtB,SACAgG,KAAA,+BAEAhzB,MACAuG,YAAA,mDACAvG,KAAA,SACAyyB,MACA,SACA,MACA,YAGAxE,OACA1nB,YAAA,0CACAvG,KAAA,WAEAitB,OACA1mB,YAAA,2BACAysB,KAAA,6BAEA3F,SACA2F,KAAA,iCAEAkoB,UACA30C,YAAA,uBACAvG,KAAA,YAGAk0B,UACA,OACA,QACA,UAGAinB,kBACAn7C,KAAA,SACA6yB,YACArlC,MACA+Y,YAAA,4BACAvG,KAAA,UAEA+sB,OA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","file":"stlib.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 73);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 12a01ab82d6687293ad6","const logger = require('./StLogger');\r\nconst decycle = require('cycle').decycle;\r\nconst os = require('os');\r\n\r\nfunction getLogString(...varArgs) {\r\n  return varArgs.reduce((acc, arg) => {\r\n    let newAcc = acc;\r\n    if (arg instanceof Error || (arg !== Object(arg))) newAcc += (acc ? `, ${arg}` : arg);\r\n    else newAcc += (acc ? `, ${os.EOL + JSON.stringify(decycle(arg), null, 2)}` : os.EOL + JSON.stringify(decycle(arg), null, 2));\r\n    return newAcc;\r\n  }, '');\r\n}\r\n\r\nfunction createOverridedMethod(className, targetMethod) {\r\n  const methodLogger = {\r\n    apply(target, thisArg, args) {\r\n      logger.trace(`call ${className}:${target.name}(${getLogString(...args)})`);\r\n      let result;\r\n      try {\r\n        result = Reflect.apply(target, thisArg, args);\r\n      } catch (e) {\r\n        logger.error(`${className}:${target.name}() throws ${getLogString(e)}`);\r\n        throw e;\r\n      }\r\n      if (result && result.then) {\r\n        logger.trace(`${className}:${target.name}() -> Promise`);\r\n        result.then(\r\n          (res) => {\r\n            logger.trace(`${className}:${target.name}() is resolved with ${getLogString(res)}`);\r\n            return res;\r\n          },\r\n          (err) => {\r\n            logger.error(`${className}:${target.name}() is rejected with ${getLogString(err)}`);\r\n            return err;\r\n          });\r\n      } else {\r\n        logger.trace(`${className}:${target.name}() -> ${getLogString(result)}`);\r\n      }\r\n      return result;\r\n    },\r\n  };\r\n  return new Proxy(targetMethod, methodLogger);\r\n}\r\n\r\nfunction getInstanceLogger(targetMethods) {\r\n  return {\r\n    get(target, propName, receiver) {\r\n      const property = Reflect.get(target, propName, receiver);\r\n      if (typeof property === 'function') {\r\n        if (!targetMethods || (targetMethods && targetMethods.includes(propName))) {\r\n          return createOverridedMethod(target.constructor.name, property);\r\n        }\r\n      }\r\n      return property;\r\n    },\r\n  };\r\n}\r\n\r\n// get proxy handler for class\r\n// @param {[string]} [targetMethods] target method names for log\r\nfunction getClassLogger(targetMethods) {\r\n  return {\r\n    construct(target, args) {\r\n      const instance = Reflect.construct(target, args);\r\n      const overridedInstance = new Proxy(instance, getInstanceLogger(targetMethods));\r\n      return overridedInstance;\r\n    },\r\n    get(target, propName, receiver) { // for static method\r\n      const property = Reflect.get(target, propName, receiver);\r\n      if (typeof property === 'function') {\r\n        if (!targetMethods || (targetMethods && targetMethods.includes(propName))) {\r\n          return createOverridedMethod(target.name, property);\r\n        }\r\n      }\r\n      return property;\r\n    },\r\n  };\r\n}\r\n\r\nmodule.exports = getClassLogger;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/getClassLogger.js\n// module id = 0\n// module chunks = 0","const os = require('os');\r\nconst { getText } = require('../common/TextHandler');\r\nconst errorCode = require('./Errors');\r\n\r\nfunction parseArguments(args) {\r\n  let key;\r\n  let cause;\r\n  let argv;\r\n\r\n  if (args.length === 0) {\r\n    cause = null;\r\n    key = '';\r\n    argv = [];\r\n  } else if (args[args.length - 1] instanceof Error) {\r\n    cause = args[args.length - 1];\r\n    key = args[0];\r\n    argv = args.slice(1, args.length - 1);\r\n  } else {\r\n    cause = null;\r\n    key = args[0];\r\n    argv = args.slice(1);\r\n  }\r\n\r\n  return { key, cause, argv };\r\n}\r\n\r\nclass StError extends Error {\r\n  constructor(...args) {\r\n    const { key, cause, argv } = parseArguments(args);\r\n    const error = errorCode.getError(key);\r\n    if (error) {\r\n      const shortMessage = getText(error.MSG_KEY, ...argv);\r\n      if (cause) {\r\n        super(`${shortMessage}${os.EOL}Caused by: ${cause.message}`);\r\n      } else {\r\n        super(shortMessage);\r\n      }\r\n      this.code = key;\r\n      this.shortMessage = shortMessage;\r\n    } else {\r\n      throw new Error(`undefined error: ${key}`);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = StError;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/errors/StError.js\n// module id = 1\n// module chunks = 0","const path = require('path');\r\nconst fs = require('fs');\r\nconst fsExt = require('fs-extra');\r\n\r\nfunction isInt(n) {\r\n  return Number(n) === n && n % 1 === 0;\r\n}\r\n\r\nfunction isFloat(n) {\r\n  return Number(n) === n && n % 1 !== 0;\r\n}\r\n\r\nfunction getRoot() {\r\n  let root = __dirname;\r\n  if (!fs.existsSync(path.resolve(root, 'package.json'))) root = path.resolve(root, '..', '..');\r\n  return root;\r\n}\r\n\r\nfunction getListIterator(list, url, isNext, agent, agentMethodName, ...args) {\r\n  const getList = isNext ? agent.get(url) : agent[agentMethodName](...args);\r\n\r\n  return getList\r\n    .then(({ items, _links }) => {\r\n      if (items) items.forEach(item => list.push(item));\r\n      if (_links && _links.next && _links.next.href) {\r\n        return getListIterator(list, _links.next.href, true, agent, agentMethodName, ...args);\r\n      }\r\n      return list;\r\n    });\r\n}\r\n\r\nfunction removeProxyEnv() {\r\n  const proxyEnvVars = [\r\n    'http_proxy',\r\n    'HTTP_PROXY',\r\n    'https_proxy',\r\n    'HTTPS_PROXY',\r\n    'no_proxy',\r\n    'NO_PROXY',\r\n  ];\r\n\r\n  proxyEnvVars.forEach(v => delete process.env[v]);\r\n}\r\n\r\nfunction getSmallUuid(length = 10) {\r\n  const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz';\r\n  let randomstring = '';\r\n  for (let i = 0; i < length; i += 1) {\r\n    const rnum = Math.floor(Math.random() * chars.length);\r\n    randomstring += chars.substring(rnum, rnum + 1);\r\n  }\r\n  return randomstring;\r\n}\r\n\r\nfunction getProxy(config, server) {\r\n  const globalProxy = config.proxy;\r\n  const serverConfig = config[server];\r\n  const serverProxy = serverConfig ? serverConfig.proxy : undefined;\r\n  const proxy = (serverProxy === false) ? false : (serverProxy || globalProxy);\r\n  if (proxy) {\r\n    const proxyWithProtocol = (proxy.split('://').length > 1 ? proxy : `http://${proxy}`);\r\n    return proxyWithProtocol;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction getServerConfig(config, server) {\r\n  const serverConfig = config[server] || {};\r\n  serverConfig.proxy = getProxy(config, server);\r\n  return Object.assign({}, serverConfig);\r\n}\r\n\r\nfunction getFlatKeys(object, parentKey) {\r\n  const keys = Object.keys(object);\r\n  let flatKeys = [];\r\n  keys.forEach((key) => {\r\n    const value = object[key];\r\n    const flatKey = parentKey ? `${parentKey}.${key}` : `${key}`;\r\n    if (typeof value === 'object' && value) {\r\n      const subKeys = getFlatKeys(value, flatKey);\r\n      flatKeys = flatKeys.concat(subKeys);\r\n    } else {\r\n      flatKeys.push(flatKey);\r\n    }\r\n  });\r\n  return flatKeys.sort();\r\n}\r\n\r\nfunction isValidVid(vid) {\r\n  // Vid can be empty\r\n  if (!vid) return true;\r\n  const vidRegex = /^[a-zA-Z0-9_-]{3,64}$/;\r\n  if (!vidRegex.test(vid)) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction filterFloat(value) {\r\n  if (/^(-|\\+)?([0-9]+(\\.[0-9]+)?)$/.test(value)) return Number(value);\r\n  return NaN;\r\n}\r\n\r\nfunction getLibVersion() {\r\n  const packageFile = path.resolve(getRoot(), 'package.json');\r\n  return fsExt.readJsonSync(packageFile).version;\r\n}\r\n\r\nfunction encodeBase64(str) {\r\n  return Buffer.from(str).toString('base64');\r\n}\r\n\r\nfunction decodeBase64(str) {\r\n  return Buffer.from(str, 'base64').toString();\r\n}\r\n\r\nfunction validLamdaARN(arns) { // eslint-disable-line\r\n  const LAMBDA_ARN_REG_EXP = /^arn:aws:/;\r\n  let result = true;\r\n  arns.forEach((arn) => {\r\n    if (!LAMBDA_ARN_REG_EXP.test(arn)) {\r\n      result = false;\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\nfunction validWebhookUrl(url) {// eslint-disable-line\r\n  const WEBHOOK_URL_REG_EXP = /^https?(?=:\\/\\/)/;\r\n  return WEBHOOK_URL_REG_EXP.test(url);\r\n}\r\n\r\nmodule.exports = {\r\n  isInt,\r\n  isFloat,\r\n  getRoot,\r\n  getListIterator,\r\n  removeProxyEnv,\r\n  getSmallUuid,\r\n  getProxy,\r\n  getServerConfig,\r\n  getFlatKeys,\r\n  isValidVid,\r\n  filterFloat,\r\n  getLibVersion,\r\n  encodeBase64,\r\n  decodeBase64,\r\n  validLamdaARN,\r\n  validWebhookUrl,\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/util.js\n// module id = 2\n// module chunks = 0","module.exports = require(\"bluebird\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bluebird\"\n// module id = 3\n// module chunks = 0","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 4\n// module chunks = 0","const fs = require('fs');\r\nconst fsExtra = require('fs-extra');\r\nconst promisify = require('bluebird').promisify;\r\n\r\nmodule.exports = {\r\n  makeDir: promisify(fs.mkdir),\r\n  readDir: promisify(fs.readdir),\r\n  readDirSync: fs.readdirSync,\r\n  writeFile: promisify(fs.writeFile),\r\n  readFile: promisify(fs.readFile),\r\n  readFileSync: fs.readFileSync,\r\n  existsSync: fs.existsSync,\r\n  deleteFile: promisify(fs.unlink),\r\n  stat: promisify(fs.stat),\r\n  statSync: fs.statSync,\r\n  createReadStream: fs.createReadStream,\r\n  // use fs-extra\r\n  exists: promisify(fsExtra.pathExists),\r\n  readJsonSync: fsExtra.readJsonSync,\r\n  readJson: fsExtra.readJson,\r\n  ensureDir: promisify(fsExtra.ensureDir),\r\n  writePath: promisify(fsExtra.outputFile),\r\n  copy: promisify(fsExtra.copy),\r\n  remove: promisify(fsExtra.remove),\r\n  removeSync: fsExtra.removeSync,\r\n  renameSync: fsExtra.renameSync,\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/FileSystemHandler.js\n// module id = 5\n// module chunks = 0","module.exports = require(\"events\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"events\"\n// module id = 6\n// module chunks = 0","const pathUtil = require('path');\r\nconst fs = require('./FileSystemHandler');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\n\r\nconst CONFIG_FILE = '.project.json';\r\n\r\n/**\r\n * Controller that has a responsibility for configure projects\r\n */\r\nclass ProjectConfigurator {\r\n\r\n  static retrieveConfig(projPath) {\r\n    const configPath = pathUtil.join(projPath, CONFIG_FILE);\r\n    return fs.exists(configPath)\r\n      .then((exists) => {\r\n        if (!exists) throw new Error(`Project config file not found... ${configPath}`);\r\n\r\n        return fs.readJson(configPath);\r\n      });\r\n  }\r\n\r\n\r\n  static generateConfig(projPath, projConfig) {\r\n    return ProjectConfigurator.updateConfig(projPath, projConfig);\r\n  }\r\n\r\n  static updateConfig(projPath, projConfig) {\r\n    const config = JSON.stringify(projConfig, null, 2);\r\n    const configPath = pathUtil.join(projPath, CONFIG_FILE);\r\n\r\n    return fs.writeFile(configPath, config);\r\n  }\r\n}\r\n\r\nProjectConfigurator.CONFIG_FILE = CONFIG_FILE;\r\nProjectConfigurator.OUT_IOS_DIR = 'out_iOS';\r\nProjectConfigurator.SIDELOADING_DIR = 'sideloading';\r\nProjectConfigurator.SMART_APP_FILE = 'smart-app.json';\r\nProjectConfigurator.CATALOG_FILE = 'catalog.json';\r\nProjectConfigurator.APP_CATALOG_FILE = 'app-catalog.json';\r\nProjectConfigurator.PROD_CATALOG_FILE = 'prod-catalog.json';\r\nProjectConfigurator.DEVICE_PROFILE_FILE = 'device-profile.json';\r\nProjectConfigurator.MANIFEST_DIR = 'manifest';\r\nProjectConfigurator.UI_MANIFEST_FILE = 'ui.json';\r\nProjectConfigurator.VOICE_MANIFEST_FILE = 'voice.json';\r\nProjectConfigurator.PLUGIN_DIR = 'plugin';\r\nProjectConfigurator.PPKS_DIR = 'ppks';\r\nProjectConfigurator.PLUGIN_MANIFEST_FILE = 'manifest.xml';\r\nProjectConfigurator.PLUGIN_INDEX_FILE = 'index.html';\r\nProjectConfigurator.PLUGIN_ICON_FILE = 'icon.png';\r\nProjectConfigurator.PLUGIN_CSS_FILE = 'index.css';\r\nProjectConfigurator.PLUGIN_JS_FILE = 'index.js';\r\nProjectConfigurator.PLUGIN_CSS_DIR = 'css';\r\nProjectConfigurator.PLUGIN_JS_DIR = 'js';\r\nProjectConfigurator.PLUGIN_LIB_DIR = 'lib';\r\nProjectConfigurator.SCPLUGINAPI_JS_FILE = 'SCPluginApi.js';\r\nProjectConfigurator.ANDROID_GENERIC_DEVICE_PLUGIN_URI = 'plugin://com.samsung.android.plugin.stplugin';\r\nProjectConfigurator.IOS_GENERIC_DEVICE_PLUGIN_URI = 'plugin://com.samsung.ios.plugin.stplugin/assets/files/index.html';\r\nProjectConfigurator.DEFAULT_GENERIC_DEVICE_PLUGIN_URI = 'wwst://default.plugin';\r\n\r\nProjectConfigurator.SMART_APP_DIR = 'lambda-app';\r\nProjectConfigurator.LAMBDA_CONFIG_FILE = 'lambda.json';\r\nProjectConfigurator.LAMBDA_PACKAGE_JSON_FILE = 'package.json';\r\nProjectConfigurator.DEFAULT_LAMBDA_JS_FILE = 'index.js';\r\n\r\nmodule.exports = new Proxy(ProjectConfigurator, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/ProjectConfigurator.js\n// module id = 7\n// module chunks = 0","const Promise = require('bluebird');\r\nconst fs = require('./FileSystemHandler');\r\nconst path = require('path');\r\nconst getRoot = require('../common/util').getRoot;\r\nconst RequestManager = require('./RequestManager');\r\nconst uuid = require('uuid');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\nconst EventEmitter = require('events');\r\nconst { getLibVersion } = require('../common/util');\r\n\r\n// TODO: fix this fake URLs\r\nconst URL = {\r\n  SDK_LOGIN: '/api/sdk-login',\r\n  SDK_AUTHCODE: '/api/sdk-authcode',\r\n  SIGN_IN: '/account/session',\r\n  TEMPLATE: '/template',\r\n  WORKFLOW: '/ide/api/v2/oic/generic/workflow',\r\n  UIMANIFEST: '/ide/api/v2/oic/presentation',\r\n  DELETEUIMANIFEST: '/ide/api/v2/oic/presentation/delete',\r\n  UPDATEUIMANIFEST: '/ide/api/v2/oic/presentation/update/metadata',\r\n  VOICEMANIFEST: '/ide/api/v2/oic/voice',\r\n  DELETEVOICEMANIFEST: '/ide/api/v2/oic/voice/delete',\r\n  UPDATEVOICEMANIFEST: '/ide/api/v2/oic/voice/update/metadata',\r\n  AUTHOR_CERTIFICATE: '/ide/api/v2/csr/authors',\r\n  DISTRIBUTOR_CERTIFICATE: '/ide/api/v2/csr/distributors',\r\n  DEVICE_CERTIFICATE: '/ide/api/v2/csr/device',\r\n  CLOUD_CONNECTED_PROJECT: '/api/sdk/v1/cloud-connected/projects',\r\n  AUTOMATION_PROJECT: '/api/sdk/v1/automation/projects',\r\n  SERVICE_PLUGIN_PROJECT: '/api/sdk/v1/service-plugin/projects',\r\n  PLUGIN: '/api/sdk/v1/common/plugins',\r\n  /* AUTHENTICATION */\r\n  LOGIN_DONE: '/api/sdk/v1/auth/login-done',\r\n  AUTHENTICATION_STATUS: '/ide/api/v3/authentication/status',\r\n};\r\n\r\n// TODO: fix this fake method\r\nconst METHOD = {\r\n  GET: 1,\r\n  POST: 2,\r\n  PUT: 3,\r\n  DELETE: 4,\r\n};\r\nconst TEMPLATE_LIST_PATH = path.join(getRoot(), 'assets', 'templates', 'local_list.json');\r\n// TODO: fix this fake function\r\nfunction sendRequest(method, url) {\r\n  const response = { payload: {} };\r\n  if (url.startsWith(URL.TEMPLATE)) {\r\n    if (url.length > URL.TEMPLATE.length) {\r\n      // template\r\n      return fs.readFile(TEMPLATE_LIST_PATH)\r\n        .then((json) => {\r\n          // find in template list\r\n          const urlFrags = url.split('/');\r\n          const tid = urlFrags[urlFrags.length - 1];\r\n          const templates = JSON.parse(json).templates;\r\n          const result = templates.filter(t => t.id === tid);\r\n          if (!result || result.length === 0) return Promise.reject(new StError('CANNOT_FIND_TEMPLATE'));\r\n          result[0].templatePath = path.join(getRoot(), 'assets', result[0].path);\r\n          response.payload.values = result[0];\r\n          return response;\r\n        });\r\n    }\r\n    // template list\r\n    return fs.readFile(TEMPLATE_LIST_PATH)\r\n      .then((json) => {\r\n        response.payload.values = JSON.parse(json);\r\n        return response;\r\n      });\r\n  }\r\n  return Promise.resolve(response);\r\n}\r\n\r\nfunction extractMessage(err) {\r\n  let message;\r\n  const error = err ? err.error : err;\r\n  if (error) {\r\n    if (error.resultMsg) {\r\n      message = error.resultMsg;\r\n      if (error.resultDetail) {\r\n        message += `\\n${JSON.stringify(error.resultDetail, null, 2)}`;\r\n      }\r\n    } else if (error.status && error.error) {\r\n      message = `${error.status} ${error.error}`;\r\n    } else {\r\n      try {\r\n        message = JSON.parse(error).resultMsg;\r\n      } catch (e) {\r\n        message = error;\r\n      }\r\n    }\r\n  }\r\n\r\n  return message;\r\n}\r\n\r\n\r\nclass IoTConsoleAgent extends EventEmitter {\r\n  constructor(config, serverConfig) {\r\n    super();\r\n    const { accessToken, userId, mnid, email } = config;\r\n    const { uri: serverUri, proxy, rejectUnauthorized } = serverConfig;\r\n    this.accessToken = accessToken;\r\n    this.userId = userId;\r\n    this.email = email;\r\n    this.mnid = mnid;\r\n    this.requestManager = new RequestManager(serverUri, proxy, rejectUnauthorized);\r\n    this.requestManager.on('debug', msg => this.emit('debug', msg));\r\n    this.isInit = false;\r\n  }\r\n\r\n  init() {\r\n    this.isInit = true;\r\n  }\r\n\r\n  finish() {\r\n    this.isInit = false;\r\n  }\r\n\r\n  getTemplateList() {\r\n    if (!this.isInit) {\r\n      this.init();\r\n    }\r\n\r\n    // TODO: fix fake URL\r\n    const url = `${URL.TEMPLATE}`;\r\n    return sendRequest(METHOD.GET, url);\r\n  }\r\n\r\n  getTemplate(tid) {\r\n    if (!this.isInit) {\r\n      this.init();\r\n    }\r\n\r\n    // TODO: fix fake URL\r\n    const url = `${URL.TEMPLATE}/${tid}`;\r\n    return sendRequest(METHOD.GET, url);\r\n  }\r\n\r\n  getHeader() {\r\n    return {\r\n      Authorization: this.accessToken,\r\n      'X-IOT-UID': this.userId,\r\n      'X-IOT-MNID': this.mnid,\r\n    };\r\n  }\r\n\r\n\r\n  getManifestList(workflowid, workflowtype, status, ownerId) {\r\n    // if there's workflowid parameter, status parameter will be ignored(unnecessary)\r\n    // This is spec of metadata server. (From Ranjan, confluence)\r\n    const method = RequestManager.METHODS.GET;\r\n    const query = { workflowid, workflowtype, status, ownerId };\r\n    const headers = this.getHeader();\r\n    return this.requestManager.request(method, URL.WORKFLOW, query, headers);\r\n  }\r\n\r\n  getManifest(mnmn, vid, version, type) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const query = { mnmn, vid, version };\r\n    const headers = this.getHeader();\r\n    const url = (type === 'ui' || type === 'presentation') ? URL.UIMANIFEST : URL.VOICEMANIFEST;\r\n    return this.requestManager.request(method, url, query, headers);\r\n  }\r\n\r\n  deleteManifest(workflowId, type) {\r\n    const method = RequestManager.METHODS.DELETE;\r\n    const query = { workflowId };\r\n    const headers = this.getHeader();\r\n    const url = (type === 'ui' || type === 'presentation') ? URL.DELETEUIMANIFEST : URL.DELETEVOICEMANIFEST;\r\n    return this.requestManager.request(method, url, query, headers);\r\n  }\r\n\r\n  createManifest(manifest, type) {\r\n    const method = RequestManager.METHODS.POST;\r\n    const headers = this.getHeader();\r\n    const url = (type === 'ui' || type === 'presentation') ? URL.UIMANIFEST : URL.VOICEMANIFEST;\r\n    return this.requestManager.request(method, url, null, headers, manifest);\r\n  }\r\n\r\n  updateManifest(workflowId, manifest, type) {\r\n    const method = RequestManager.METHODS.PUT;\r\n    const query = { workflowId, type };\r\n    const headers = this.getHeader();\r\n    const url = (type === 'ui' || type === 'presentation') ? URL.UPDATEUIMANIFEST : URL.UPDATEVOICEMANIFEST;\r\n    return this.requestManager.request(method, url, query, headers, manifest);\r\n  }\r\n\r\n\r\n  getDeviceCertificate(csr, deviceName = 'OCF Dev Device', email, mnid) {\r\n    const method = RequestManager.METHODS.POST;\r\n    const headers = { Authorization: this.getHeader().Authorization };\r\n    const url = URL.DEVICE_CERTIFICATE;\r\n    const splitCsr = csr.split(/\\r\\n|\\r|\\n/);\r\n    const strippedCsr = splitCsr.slice(1, splitCsr.length - 3).join('');\r\n    const body = {\r\n      csr: strippedCsr,\r\n      deviceName,\r\n      email: email || this.email,\r\n      mnid: mnid || this.mnid,\r\n      purpose: 'Test', // NOTE: this will be removed\r\n      uuid: uuid(),\r\n    };\r\n    return this.requestManager.request(method, url, null, headers, body)\r\n      .catch((err) => {\r\n        throw new StError('IOT_CONSOLE_DEVICE_CRT_API_FAILED', extractMessage(err) || err);\r\n      });\r\n  }\r\n\r\n  getAuthorCertificate(csr) {\r\n    const method = RequestManager.METHODS.POST;\r\n    const headers = { Authorization: this.getHeader().Authorization };\r\n    const url = URL.AUTHOR_CERTIFICATE;\r\n    const query = { userId: this.userId, platform: 'PPK' };\r\n    const splitCsr = csr.split(/\\r\\n|\\r|\\n/);\r\n    const strippedCsr = splitCsr.slice(1, splitCsr.length - 3).join('');\r\n\r\n    return this.requestManager.request(method, url, query, headers, strippedCsr,\r\n      false, { json: false })\r\n      .then(response => JSON.parse(response))\r\n      .catch((err) => {\r\n        throw new StError('IOT_CONSOLE_PPK_AUTH_CRT_API_FAILED', extractMessage(err) || err);\r\n      });\r\n  }\r\n\r\n  getDistributorCertificate(csr, distributorType = 'public') {\r\n    const method = RequestManager.METHODS.POST;\r\n    const headers = { Authorization: this.getHeader().Authorization };\r\n    const url = URL.DISTRIBUTOR_CERTIFICATE;\r\n    const privilegeLevel = distributorType === 'public' ? 'Public' : 'Partner';\r\n    const query = { userId: this.userId, platform: 'PPK', privilegeLevel };\r\n    const splitCsr = csr.split(/\\r\\n|\\r|\\n/);\r\n    const strippedCsr = splitCsr.slice(1, splitCsr.length - 3).join('');\r\n\r\n    return this.requestManager.request(method, url, query, headers, strippedCsr,\r\n      false, { json: false })\r\n      .then(response => JSON.parse(response))\r\n      .catch((err) => {\r\n        throw new StError('IOT_CONSOLE_PPK_DIST_CRT_API_FAILED', extractMessage(err) || err);\r\n      });\r\n  }\r\n\r\n  requestProject(method, url, query, body, extraOptions) {\r\n    return this.requestManager.request(method, url, query,\r\n      { Authorization: this.getHeader().Authorization },\r\n        body, false, extraOptions)\r\n      .catch((err) => {\r\n        throw new StError('IOT_CONSOLE_PRJ_API_FAILED', extractMessage(err) || err);\r\n      });\r\n  }\r\n\r\n\r\n  postServicePluginProject(body) {\r\n    return this.requestProject(RequestManager.METHODS.POST,\r\n      URL.SERVICE_PLUGIN_PROJECT, null, body, { json: true });\r\n  }\r\n\r\n\r\n  postServicePluginSelfPublish(projectId) {\r\n    return this.requestProject(RequestManager.METHODS.POST,\r\n      `${URL.SERVICE_PLUGIN_PROJECT}/${projectId}/selfpublish`,\r\n      null, null, { json: true });\r\n  }\r\n\r\n\r\n  postServicePluginUnpublish(projectId) {\r\n    return this.requestProject(RequestManager.METHODS.POST,\r\n      `${URL.SERVICE_PLUGIN_PROJECT}/${projectId}/unpublish`,\r\n      null, null, { json: true });\r\n  }\r\n\r\n\r\n  getServicePluginProjectList(pageSize, pageNum) {\r\n    return this.requestProject(RequestManager.METHODS.GET,\r\n      URL.SERVICE_PLUGIN_PROJECT, { pageSize, pageNum });\r\n  }\r\n\r\n\r\n  getServicePluginProject(projectId) {\r\n    return this.requestProject(RequestManager.METHODS.GET,\r\n      `${URL.SERVICE_PLUGIN_PROJECT}/${projectId}`, null);\r\n  }\r\n\r\n\r\n  putServicePluginProject(projectId, body) {\r\n    return this.requestProject(RequestManager.METHODS.PUT,\r\n      `${URL.SERVICE_PLUGIN_PROJECT}/${projectId}`, null, body, { json: true });\r\n  }\r\n\r\n\r\n  deleteServicePluginProject(projectId) {\r\n    return this.requestProject(RequestManager.METHODS.DELETE,\r\n      `${URL.SERVICE_PLUGIN_PROJECT}/${projectId}`, null);\r\n  }\r\n\r\n\r\n  postCloudConnectedProject(body) {\r\n    return this.requestProject(RequestManager.METHODS.POST,\r\n      URL.CLOUD_CONNECTED_PROJECT, null, body, { json: true });\r\n  }\r\n\r\n\r\n  postCloudConnectedPpkFile(projectId, ppkFile) {\r\n    const formData = {\r\n      ppkFile: {\r\n        value: fs.createReadStream(ppkFile),\r\n        options: {\r\n          filename: path.basename(ppkFile),\r\n          contentType: 'application/x-binary',\r\n        },\r\n      },\r\n    };\r\n\r\n    return this.requestProject(RequestManager.METHODS.POST,\r\n      `${URL.CLOUD_CONNECTED_PROJECT}/${projectId}/ppkfile`,\r\n      null, null, { json: true, formData });\r\n  }\r\n\r\n\r\n  postCloudConnectedSelfPublish(projectId) {\r\n    return this.requestProject(RequestManager.METHODS.POST,\r\n      `${URL.CLOUD_CONNECTED_PROJECT}/${projectId}/selfpublish`,\r\n      null, null, { json: true });\r\n  }\r\n\r\n\r\n  postCloudConnectedUnpublish(projectId) {\r\n    return this.requestProject(RequestManager.METHODS.POST,\r\n      `${URL.CLOUD_CONNECTED_PROJECT}/${projectId}/unpublish`,\r\n      null, null, { json: true });\r\n  }\r\n\r\n\r\n  getCloudConnectedProjectList(pageSize, pageNum) {\r\n    return this.requestProject(RequestManager.METHODS.GET,\r\n      URL.CLOUD_CONNECTED_PROJECT, { pageSize, pageNum });\r\n  }\r\n\r\n\r\n  getCloudConnectedProject(projectId) {\r\n    return this.requestProject(RequestManager.METHODS.GET,\r\n      `${URL.CLOUD_CONNECTED_PROJECT}/${projectId}`, null);\r\n  }\r\n\r\n\r\n  putCloudConnectedProject(projectId, body) {\r\n    return this.requestProject(RequestManager.METHODS.PUT,\r\n      `${URL.CLOUD_CONNECTED_PROJECT}/${projectId}`, null, body, { json: true });\r\n  }\r\n\r\n\r\n  deleteCloudConnectedProject(projectId) {\r\n    return this.requestProject(RequestManager.METHODS.DELETE,\r\n      `${URL.CLOUD_CONNECTED_PROJECT}/${projectId}`, null);\r\n  }\r\n\r\n  postAutomationProject(body) {\r\n    return this.requestProject(RequestManager.METHODS.POST,\r\n      URL.AUTOMATION_PROJECT, null, body, { json: true });\r\n  }\r\n\r\n\r\n  postAutomationSelfPublish(projectId) {\r\n    return this.requestProject(RequestManager.METHODS.POST,\r\n      `${URL.AUTOMATION_PROJECT}/${projectId}/selfpublish`,\r\n      null, null, { json: true });\r\n  }\r\n\r\n\r\n  postAutomationUnpublish(projectId) {\r\n    return this.requestProject(RequestManager.METHODS.POST,\r\n      `${URL.AUTOMATION_PROJECT}/${projectId}/unpublish`,\r\n      null, null, { json: true });\r\n  }\r\n\r\n\r\n  getAutomationProjectList(pageSize, pageNum) {\r\n    return this.requestProject(RequestManager.METHODS.GET,\r\n      URL.AUTOMATION_PROJECT, { pageSize, pageNum });\r\n  }\r\n\r\n\r\n  getAutomationProject(projectId) {\r\n    return this.requestProject(RequestManager.METHODS.GET,\r\n      `${URL.AUTOMATION_PROJECT}/${projectId}`, null);\r\n  }\r\n\r\n\r\n  putAutomationProject(projectId, body) {\r\n    return this.requestProject(RequestManager.METHODS.PUT,\r\n      `${URL.AUTOMATION_PROJECT}/${projectId}`, null, body, { json: true });\r\n  }\r\n\r\n\r\n  deleteAutomationProject(projectId) {\r\n    return this.requestProject(RequestManager.METHODS.DELETE,\r\n      `${URL.AUTOMATION_PROJECT}/${projectId}`, null);\r\n  }\r\n\r\n  /* AUTHENTICATION */\r\n  requestAuthentication(method, url, query, body, extraOptions) {\r\n    return this.requestManager.request(method, url, query,\r\n      { Authorization: this.getHeader().Authorization,\r\n        'X-SDK-VER': getLibVersion(),\r\n      }, body, false, extraOptions)\r\n      .catch((err) => {\r\n        throw new StError('IOT_CONSOLE_AUTH_API_FAILED', extractMessage(err) || err);\r\n      });\r\n  }\r\n\r\n\r\n  getLoginDone(state) {\r\n    return this.requestAuthentication(RequestManager.METHODS.GET,\r\n      URL.LOGIN_DONE, { state });\r\n  }\r\n\r\n\r\n  getAuthenticationStatus() {\r\n    return this.requestAuthentication(RequestManager.METHODS.GET,\r\n      URL.AUTHENTICATION_STATUS, null);\r\n  }\r\n\r\n  getAuthentication(ssoToken, authCode, deviceId) {\r\n    const method = RequestManager.METHODS.POST;\r\n    const query = null;\r\n    const headers = {\r\n      'X-SDK-VER': getLibVersion(),\r\n    };\r\n    const body = { deviceId };\r\n    if (ssoToken) body.ssoToken = ssoToken;\r\n    if (authCode) body.authCode = authCode;\r\n    return this.requestManager.request(method, URL.SDK_LOGIN, query, headers, body)\r\n      .catch((err) => {\r\n        throw new StError('IOT_CONSOLE_SDK_LOGIN_API_FAILED', extractMessage(err) || err);\r\n      });\r\n  }\r\n\r\n  getAuthCodeBySsoToken(ssoToken, deviceId) {\r\n    const method = RequestManager.METHODS.POST;\r\n    const query = null;\r\n    const headers = {\r\n      'X-SDK-VER': getLibVersion(),\r\n    };\r\n    const body = { ssoToken, deviceId };\r\n    return this.requestManager.request(method, URL.SDK_AUTHCODE, query, headers, body)\r\n      .catch((err) => {\r\n        throw new StError('IOT_CONSOLE_SDK_AUTHCODE_API_FAILED', extractMessage(err) || err);\r\n      });\r\n  }\r\n\r\n  createPlugin(ppkFile, pluginType, reqStatus) {\r\n    const formData = {\r\n      ppkFile: {\r\n        value: fs.createReadStream(ppkFile),\r\n        options: {\r\n          filename: path.basename(ppkFile),\r\n          contentType: 'application/x-binary',\r\n        },\r\n      },\r\n      plgnType: pluginType,\r\n      devStatCd: reqStatus,\r\n    };\r\n\r\n    const method = RequestManager.METHODS.POST;\r\n    const headers = { Authorization: this.getHeader().Authorization };\r\n    return this.requestManager.request(method, URL.PLUGIN, null, headers,\r\n      null, false, { json: true, formData })\r\n      .catch((err) => {\r\n        throw new StError('IOT_CONSOLE_PLUGIN_API_FAILED', extractMessage(err) || err);\r\n      });\r\n  }\r\n\r\n  removePlugin(pkgNm) {\r\n    const method = RequestManager.METHODS.DELETE;\r\n    const headers = { Authorization: this.getHeader().Authorization };\r\n    return this.requestManager.request(method, `${URL.PLUGIN}/${pkgNm}`, null, headers)\r\n      .catch((err) => {\r\n        throw new StError('IOT_CONSOLE_PLUGIN_API_FAILED', extractMessage(err) || err);\r\n      });\r\n  }\r\n\r\n  getPluginList(pkgNm, plgnType, devStatCd) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const query = { pkgNm, plgnType, devStatCd };\r\n    const headers = { Authorization: this.getHeader().Authorization };\r\n    return this.requestManager.request(method, URL.PLUGIN, query, headers)\r\n    .catch((err) => {\r\n      throw new StError('IOT_CONSOLE_PLUGIN_API_FAILED', extractMessage(err) || err);\r\n    });\r\n  }\r\n\r\n  getPlugin(pkgNm) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const headers = { Authorization: this.getHeader().Authorization };\r\n    return this.requestManager.request(method, `${URL.PLUGIN}/${pkgNm}`, null, headers)\r\n    .catch((err) => {\r\n      throw new StError('IOT_CONSOLE_PLUGIN_API_FAILED', extractMessage(err) || err);\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(IoTConsoleAgent, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/IotConsoleAgent.js\n// module id = 8\n// module chunks = 0","/**\r\n * OCF project type object\r\n *\r\n * @static\r\n * @property {string} OCF 'ocf'\r\n * @property {string} AUTOMATION 'automation'\r\n * @property {string} C2C 'c2c'\r\n * @memberof Project\r\n */\r\nconst PROJ_TYPE = Object.freeze({\r\n  OCF: 'ocf',\r\n  AUTOMATION: 'automation',\r\n  C2C: 'c2c',\r\n  SERVICE: 'service',\r\n});\r\n\r\n/**\r\n * Check project type validity\r\n *\r\n * @static\r\n * @memberof Project\r\n * @param {string} type Project type name\r\n * @returns {boolean} Type validity\r\n */\r\nfunction isValidProjectType(type) {\r\n  return type === PROJ_TYPE.OCF ||\r\n    type === PROJ_TYPE.AUTOMATION ||\r\n    type === PROJ_TYPE.C2C ||\r\n    type === PROJ_TYPE.SERVICE;\r\n}\r\n\r\n/**\r\n * Data model that contains project information\r\n *\r\n * @property {string} name Project name\r\n * @property {string} type Project type\r\n * @property {string} outputPath Output path for build result. Default path is 'out'.\r\n * @property {string=} deviceProfile device profile ID. (optional)\r\n * @property {SmartApp=} endpointApp Endpoint app\r\n * @property {Object=} lambda Lambda config(Deprecated)\r\n */\r\nclass Project {\r\n  /**\r\n   * @param {string} name Project name\r\n   * @param {string} type Project type\r\n   * @param {SmartApp=} endpointApp Endpoint app\r\n   * @param {Object=} lambda Lambda config\r\n   */\r\n  constructor(name, type, endpointApp, lambda) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.outputPath = 'out';\r\n    if (endpointApp) this.endpointApp = endpointApp;\r\n    if (lambda) this.lambda = lambda;\r\n  }\r\n}\r\n\r\nProject.PROJ_TYPE = PROJ_TYPE;\r\nProject.isValidProjectType = isValidProjectType;\r\n\r\nmodule.exports = Project;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/Project.js\n// module id = 9\n// module chunks = 0","module.exports = require(\"lodash/cloneDeep\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash/cloneDeep\"\n// module id = 10\n// module chunks = 0","const RequestManager = require('./RequestManager');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\nconst URL = {\r\n  APPS: '/apps',\r\n  OAUTH: '/oauth',\r\n  INSTALLED_APPS: '/installedapps',\r\n  DEVICES: '/devices',\r\n  CONFIGS: '/configs',\r\n  SETTINGS: '/settings',\r\n  LOCATIONS: '/locations',\r\n  SUBSCRIPTIONS: '/subscriptions',\r\n  SCHEDULES: '/schedules',\r\n  DEVICE_PROFILES: '/deviceprofiles',\r\n  CLIENT_SUBSCRIPTION: '/subscriptions',\r\n  CAPABILITY: '/capabilities',\r\n};\r\n\r\n\r\nconst statusCodeToMessageKey = {\r\n  400: 'BAD_REQUEST',\r\n  401: 'NOT_AUTHENTICATED',\r\n  403: 'NOT_AUTHORIZED',\r\n  404: 'NOT_FOUND',\r\n  422: 'UNPROCESSABLE_ENTITY',\r\n  429: 'TOO_MANY_REQUESTS',\r\n};\r\n\r\n\r\nfunction handleStCloudError(error) {\r\n  const err = error;\r\n  if (err && err.statusCode && statusCodeToMessageKey[err.statusCode]) {\r\n    if (err.error && err.error.error && err.error.error.details) {\r\n      let message = '';\r\n      err.error.error.details.forEach((element) => {\r\n        if (element.message) message += `${element.message} `;\r\n      });\r\n      throw new StError(statusCodeToMessageKey[err.statusCode], message);\r\n    }\r\n    throw new StError(statusCodeToMessageKey[err.statusCode]);\r\n  }\r\n  throw err;\r\n}\r\n\r\nclass StCloudAgent {\r\n  constructor(accessToken, config) {\r\n    this.accessToken = accessToken;\r\n    const { uri: baseUri, proxy, rejectUnauthorized } = config;\r\n    this.requestManager = new RequestManager(baseUri, proxy, rejectUnauthorized);\r\n  }\r\n\r\n  getHeaders() {\r\n    return { authorization: `Bearer ${this.accessToken}` };\r\n  }\r\n\r\n  get(url) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers, null, true)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  /* APPS */\r\n  createApp(requestBody) {\r\n    const method = RequestManager.METHODS.POST;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, URL.APPS, null, headers, requestBody)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  getAppList(appType) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const query = { appType };\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, URL.APPS, query, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  getApp(nameOrId) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const url = `${URL.APPS}/${nameOrId}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  updateApp(nameOrId, requestBody) {\r\n    const method = RequestManager.METHODS.PUT;\r\n    const url = `${URL.APPS}/${nameOrId}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers, requestBody)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  deleteApp(nameOrId) {\r\n    const method = RequestManager.METHODS.DELETE;\r\n    const url = `${URL.APPS}/${nameOrId}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  getAppSettings(nameOrId) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const url = `${URL.APPS}/${nameOrId}${URL.SETTINGS}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  updateAppSettings(nameOrId, body) {\r\n    const method = RequestManager.METHODS.PUT;\r\n    const url = `${URL.APPS}/${nameOrId}${URL.SETTINGS}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers, body)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  getAppOauth(nameOrId) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const url = `${URL.APPS}/${nameOrId}${URL.OAUTH}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  updateAppOauth(nameOrId, body) {\r\n    const method = RequestManager.METHODS.PUT;\r\n    const url = `${URL.APPS}/${nameOrId}${URL.OAUTH}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers, body)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  createAppOauth(nameOrId, clientName, scope) {\r\n    const method = RequestManager.METHODS.POST;\r\n    const url = `${URL.APPS}/${nameOrId}${URL.OAUTH}/generate`;\r\n    const requestBody = { clientName, scope };\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers, requestBody)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  /* INSTALLEDAPPS */\r\n  createInstalledApp(requestBody) {\r\n    const method = RequestManager.METHODS.POST;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, URL.INSTALLED_APPS, null, headers, requestBody)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  getInstalledAppList(locationId, appStatus) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const query = { locationId };\r\n    const headers = this.getHeaders();\r\n    if (appStatus) query.installedAppStatus = appStatus;\r\n    return this.requestManager.request(method, URL.INSTALLED_APPS, query, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  getInstalledApp(installedAppId) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const url = `${URL.INSTALLED_APPS}/${installedAppId}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  updateInstalledApp(installedAppId, locationId, requestBody) {\r\n    const method = RequestManager.METHODS.PUT;\r\n    const url = `${URL.INSTALLED_APPS}/${installedAppId}`;\r\n    const query = locationId ? { locationId } : '';\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, query, headers, requestBody)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  deleteInstalledApp(installedAppId) {\r\n    const method = RequestManager.METHODS.DELETE;\r\n    const url = `${URL.INSTALLED_APPS}/${installedAppId}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  getInstalledAppConfigList(installedAppId, locationId, configStatus) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const url = `${URL.INSTALLED_APPS}/${installedAppId}${URL.CONFIGS}`;\r\n    const headers = this.getHeaders();\r\n    let query = locationId ? { locationId } : '';\r\n    if (configStatus) {\r\n      if (!query) query = {};\r\n      query.configurationStatus = configStatus;\r\n    }\r\n    return this.requestManager.request(method, url, query, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  updateInstalledAppConfig(installedAppId, locationId, body) {\r\n    const method = RequestManager.METHODS.PUT;\r\n    const url = `${URL.INSTALLED_APPS}/${installedAppId}${URL.CONFIGS}`;\r\n    const query = { locationId };\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, query, headers, body)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  getInstalledAppConfig(iid, configId) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const url = `${URL.INSTALLED_APPS}/${iid}${URL.CONFIGS}/${configId}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  patchInstalledAppConfig(iid, locationId, cid, body) {\r\n    const method = RequestManager.METHODS.PATCH;\r\n    const url = `${URL.INSTALLED_APPS}/${iid}${URL.CONFIGS}/${cid}`;\r\n    const query = { locationId };\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, query, headers, body)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  updateInstalledAppConfigDone(iid, cid, locationId) {\r\n    const method = RequestManager.METHODS.POST;\r\n    const url = `${URL.INSTALLED_APPS}/${iid}${URL.CONFIGS}/${cid}/done`;\r\n    const query = locationId ? { locationId } : '';\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, query, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  /* LOCATIONS */\r\n  getLocationList(url = URL.LOCATIONS) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  getLocation(id) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const url = `${URL.LOCATIONS}/${id}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  createLocation(requestBody) {\r\n    const method = RequestManager.METHODS.POST;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, URL.LOCATIONS, null, headers, requestBody)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  updateLocation(id, requestBody) {\r\n    const method = RequestManager.METHODS.PUT;\r\n    const url = `${URL.LOCATIONS}/${id}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers, requestBody)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  deleteLocation(id) {\r\n    const method = RequestManager.METHODS.DELETE;\r\n    const url = `${URL.LOCATIONS}/${id}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  /* SUBSCRIPTIONS */\r\n  getSubscriptionList(iid) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const url = `${URL.INSTALLED_APPS}/${iid}${URL.SUBSCRIPTIONS}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  createSubscription(iid, requestBody) {\r\n    const method = RequestManager.METHODS.POST;\r\n    const url = `${URL.INSTALLED_APPS}/${iid}${URL.SUBSCRIPTIONS}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers, requestBody)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  deleteAllSubscription(iid) {\r\n    const method = RequestManager.METHODS.DELETE;\r\n    const url = `${URL.INSTALLED_APPS}/${iid}${URL.SUBSCRIPTIONS}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  getSubscription(iid, sid) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const url = `${URL.INSTALLED_APPS}/${iid}${URL.SUBSCRIPTIONS}/${sid}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  deleteSubscription(iid, sid) {\r\n    const method = RequestManager.METHODS.DELETE;\r\n    const url = `${URL.INSTALLED_APPS}/${iid}${URL.SUBSCRIPTIONS}/${sid}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  /* SCHEDULES */\r\n  getScheduleList(iid) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const url = `${URL.INSTALLED_APPS}/${iid}${URL.SCHEDULES}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  createSchedule(iid, body) {\r\n    const method = RequestManager.METHODS.POST;\r\n    const url = `${URL.INSTALLED_APPS}/${iid}${URL.SCHEDULES}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers, body)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  deleteAllSchedule(iid) {\r\n    const method = RequestManager.METHODS.DELETE;\r\n    const url = `${URL.INSTALLED_APPS}/${iid}${URL.SCHEDULES}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  getSchedule(iid, name) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const url = `${URL.INSTALLED_APPS}/${iid}${URL.SCHEDULES}/${name}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  deleteSchedule(iid, name) {\r\n    const method = RequestManager.METHODS.DELETE;\r\n    const url = `${URL.INSTALLED_APPS}/${iid}${URL.SCHEDULES}/${name}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  /* DEVICES */\r\n  getDeviceList() {\r\n    const method = RequestManager.METHODS.GET;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, URL.DEVICES, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  getDevice(di) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const url = `${URL.DEVICES}/${di}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  getDeviceComponentList(di) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const url = `${URL.DEVICES}/${di}/components`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  getDeviceComponentStatus(di, ci) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const url = `${URL.DEVICES}/${di}/components/${ci}/states`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  deleteDevice(di) {\r\n    const method = RequestManager.METHODS.DELETE;\r\n    const url = `${URL.DEVICES}/${di}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  commandDevice(di, deviceCommand) {\r\n    const method = RequestManager.METHODS.POST;\r\n    const url = `${URL.DEVICES}/${di}/commands`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers, deviceCommand)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  /* DEVICE-PROFILE */\r\n  createDeviceProfile(body) {\r\n    const method = RequestManager.METHODS.POST;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, URL.DEVICE_PROFILES, null, headers, body)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  getDeviceProfileList() {\r\n    const method = RequestManager.METHODS.GET;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, URL.DEVICE_PROFILES, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  getDeviceProfile(id) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const url = `${URL.DEVICE_PROFILES}/${id}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  updateDeviceProfile(id, body) {\r\n    const method = RequestManager.METHODS.PUT;\r\n    const url = `${URL.DEVICE_PROFILES}/${id}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers, body)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  // NOTE. Currently, this API is not working\r\n  deleteDeviceProfile(id) {\r\n    const method = RequestManager.METHODS.DELETE;\r\n    const url = `${URL.DEVICE_PROFILES}/${id}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  createClientSubscription(type, value) {\r\n    const method = RequestManager.METHODS.POST;\r\n    const url = URL.CLIENT_SUBSCRIPTION;\r\n    const headers = this.getHeaders();\r\n    headers.Accept = 'application/vnd.smartthings+json;v=20180705';\r\n    headers['Content-Type'] = 'application/json';\r\n    const body = {\r\n      version: 20180705,\r\n      subscriptionFilters: [{ type, value }],\r\n    };\r\n    return this.requestManager.request(method, url, null, headers, body)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  getCapability(id, version) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const url = `${URL.CAPABILITY}/${id}/${version}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  getCapabilityVersionList(id) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const url = `${URL.CAPABILITY}/${id}`;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n\r\n  getCapabilityList() {\r\n    const method = RequestManager.METHODS.GET;\r\n    const url = URL.CAPABILITY;\r\n    const headers = this.getHeaders();\r\n    return this.requestManager.request(method, url, null, headers)\r\n    .catch(e => handleStCloudError(e));\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(StCloudAgent, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/StCloudAgent.js\n// module id = 11\n// module chunks = 0","module.exports = require(\"os\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"os\"\n// module id = 12\n// module chunks = 0","const StError = require('../errors/StError');\r\n\r\n/**\r\n * Smart-App type object\r\n *\r\n * @static\r\n * @property {string} LAMBDA 'LAMBDA_SMART_APP'\r\n * @property {string} WEBHOOK 'WEBHOOK_SMART_APP'\r\n * @property {string} BEHAVIOR 'BEHAVIOR'\r\n * @memberof SmartApp\r\n */\r\nconst APP_TYPE = Object.freeze({\r\n  LAMBDA: 'LAMBDA_SMART_APP',\r\n  WEBHOOK: 'WEBHOOK_SMART_APP',\r\n  BEHAVIOR: 'BEHAVIOR',\r\n});\r\n\r\n/**\r\n * Check app type validity\r\n *\r\n * @static\r\n * @memberof SmartApp\r\n * @param {string} type App type name\r\n * @returns {boolean} Type validity\r\n */\r\nfunction isValidAppType(type) {\r\n  return type === APP_TYPE.LAMBDA ||\r\n    type === APP_TYPE.WEBHOOK ||\r\n    type === APP_TYPE.BEHAVIOR;\r\n}\r\n\r\n/**\r\n * Data model for Smart-App\r\n *\r\n * @property {string} appName Unique app name\r\n * @property {string} appId Unique app Id\r\n * @property {string} appType App type, one of 'LAMBDA_SMART_APP', 'WEBHOOK_SMART_APP', 'BEHAVIOR'\r\n * @property {string} displayName Display name\r\n * @property {string} description App description\r\n * @property {boolean} singleInstance Can be installed once\r\n * @property {Object} owner Owner object, has 'ownerType' and 'ownerId'\r\n * @property {string} createdDate Created date\r\n * @property {string} lastUpdatedDate Updatd Date\r\n * @property {Object} lambdaSmartApp Implementation details of Lambda app implementation\r\n * @property {Object} webhookSmartApp Implementation details of Webhook app implementation\r\n * @property {Object} behavior Implementation details of Behavior implementation\r\n * @property {boolean} noImpl No implementation\r\n * @property {Object} oauth OAUTH information\r\n * @property {string} oauthClientId Oauth client ID\r\n * @property {string} oauthClientSecret Oauth client secret\r\n */\r\nclass SmartApp {\r\n  /**\r\n   * @param {Object} response Response object\r\n   */\r\n  constructor({ appName, appId, appType, displayName, description, singleInstance = false,\r\n    owner, createdDate, lastUpdatedDate, lambdaSmartApp, webhookSmartApp, behavior, impl,\r\n    ui, oauth }) {\r\n    this.appName = appName;\r\n    this.appId = appId;\r\n    this.appType = appType;\r\n    switch (this.appType) {\r\n      case APP_TYPE.LAMBDA:\r\n        this.lambdaSmartApp = lambdaSmartApp || impl;\r\n        break;\r\n      case APP_TYPE.WEBHOOK:\r\n        this.webhookSmartApp = webhookSmartApp || impl;\r\n        break;\r\n      case APP_TYPE.BEHAVIOR:\r\n        this.behavior = behavior || impl;\r\n        break;\r\n      default:\r\n        throw new StError('INVALID_APP_TYPE', this.appType);\r\n    }\r\n    this.displayName = displayName;\r\n    this.description = description;\r\n    this.singleInstance = singleInstance;\r\n    this.owner = owner;\r\n    this.createdDate = createdDate;\r\n    this.lastUpdatedDate = lastUpdatedDate;\r\n    if (ui) {\r\n      this.ui = ui;\r\n    }\r\n    if (oauth) {\r\n      this.oauth = oauth;\r\n    } else {\r\n      this.oauth = {\r\n        clientName: 'none',\r\n        scope: [],\r\n      };\r\n    }\r\n  }\r\n\r\n\r\n  static createFromIotConsoleResp(resp) {\r\n    const smartApp = new SmartApp({\r\n      appName: resp.appNm,\r\n      appId: resp.appRefUuId,\r\n      appType: resp.appTypeCd === 'SAT-LAMBDA' ? APP_TYPE.LAMBDA : APP_TYPE.WEBHOOK,\r\n      displayName: '',\r\n      description: resp.appDsc,\r\n      singleInstance: resp.multInstanceTypeCd !== 'SAM-MULTI',\r\n      owner: {\r\n        ownerId: resp.ownrId,\r\n      },\r\n    });\r\n    if (resp.appScopeList) {\r\n      smartApp.oauth = {\r\n        scope: resp.appScopeList.map(scope => scope.scopeNm),\r\n      };\r\n    }\r\n\r\n    if (smartApp.appType === APP_TYPE.LAMBDA) {\r\n      smartApp.lambdaSmartApp = {\r\n        functions: resp.tgtArnList.map(arn => arn.tgtArn),\r\n      };\r\n    } else if (smartApp.appType === APP_TYPE.WEBHOOK) {\r\n      smartApp.webhookSmartApp = {\r\n        targetUrl: resp.rgtUrl,\r\n      };\r\n    }\r\n\r\n    return smartApp;\r\n  }\r\n\r\n\r\n  /**\r\n   * Make request body for 'create app' and 'update app'\r\n   *\r\n   * @returns {Object} Request body for create and update\r\n   */\r\n  toRequestBody() {\r\n    const body = {\r\n      appName: this.appName,\r\n      appType: this.appType,\r\n    };\r\n    switch (this.appType) {\r\n      case APP_TYPE.LAMBDA:\r\n        body.lambdaSmartApp = this.lambdaSmartApp;\r\n        break;\r\n      case APP_TYPE.WEBHOOK:\r\n        body.webhookSmartApp = this.webhookSmartApp;\r\n        break;\r\n      case APP_TYPE.BEHAVIOR:\r\n        body.behavior = this.behavior;\r\n        break;\r\n      default:\r\n    }\r\n    if (this.displayName !== undefined) body.displayName = this.displayName;\r\n    if (this.description !== undefined) body.description = this.description;\r\n    if (this.singleInstance !== undefined) body.singleInstance = this.singleInstance;\r\n\r\n    return body;\r\n  }\r\n\r\n\r\n  updateImpl(impl) {\r\n    switch (this.appType) {\r\n      case APP_TYPE.LAMBDA:\r\n        this.lambdaSmartApp = impl;\r\n        break;\r\n      case APP_TYPE.WEBHOOK:\r\n        this.webhookSmartApp = impl;\r\n        break;\r\n      case APP_TYPE.BEHAVIOR:\r\n        this.behavior = impl;\r\n        break;\r\n      default:\r\n        throw new StError('INVALID_APP_TYPE', this.appType);\r\n    }\r\n  }\r\n\r\n  toCreateRequestBodyIotConsole() {\r\n    const multInstanceTypeCd = this.singleInstance ? 'SAM-SINGLE' : 'SAM-MULTI';\r\n    let appTypeCd = null;\r\n    let tgtArnList = null;\r\n    let tgtUrl = null;\r\n    if (this.appType === SmartApp.APP_TYPE.LAMBDA) {\r\n      appTypeCd = 'SAT-LAMBDA';\r\n      tgtArnList = (this.lambdaSmartApp ? this.lambdaSmartApp.functions : [])\r\n        .map(arn => ({ tgtArn: arn }));\r\n    } else if (this.appType === SmartApp.APP_TYPE.WEBHOOK) {\r\n      appTypeCd = 'SAT-WEBHOOK';\r\n      tgtUrl = this.webhookSmartApp ? this.tgtUrl.targetUrl : '';\r\n    }\r\n\r\n    const body = {\r\n      refAppId: this.appId,\r\n      appNm: this.appName,\r\n      appDsc: this.description,\r\n      appTypeCd,\r\n      multInstanceTypeCd,\r\n      tgtArnList,\r\n      tgtUrl,\r\n      appScopeList: this.oauth.scope.map(s => ({ scopeNm: s })),\r\n      ownerId: this.owner.ownerId,\r\n      publicKey: '',\r\n    };\r\n\r\n    return body;\r\n  }\r\n\r\n\r\n  toUpdateRequestBodyIotConsole() {\r\n    return this.toCreateRequestBodyIotConsole();\r\n  }\r\n}\r\n\r\nSmartApp.APP_TYPE = APP_TYPE;\r\nSmartApp.isValidAppType = isValidAppType;\r\n\r\nmodule.exports = SmartApp;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/SmartApp.js\n// module id = 13\n// module chunks = 0","const os = require('os');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst log4js = require('log4js');\r\nconst SourceMapConsumer = require('source-map').SourceMapConsumer;\r\n\r\nconst sourceMapFilesRepo = {};\r\nconst DEFAULT_LOG_LEVEL = 'INFO';\r\nconst VALID_LOG_LEVELS = [\r\n  'ALL',\r\n  'TRACE',\r\n  'DEBUG',\r\n  'INFO',\r\n  'WARN',\r\n  'ERROR',\r\n  'FATAL',\r\n  'OFF',\r\n];\r\n\r\nfunction isValidLogLevel(logLevel) {\r\n  return VALID_LOG_LEVELS.includes(logLevel);\r\n}\r\n\r\n// The given stackIndex means\r\n// a line number of call stack in which there is caller information.\r\nfunction getItemInStack(stack, stackIndex = 2) {\r\n  const trimedSecondLineOfStack = stack.split(/[\\r\\n]+/)[stackIndex].trim().replace(/.*\\(/, '').replace(/\\).*/, '');\r\n  const splitItems = trimedSecondLineOfStack.split(':');\r\n  return {\r\n    file: splitItems[splitItems.length - 3],\r\n    line: splitItems[splitItems.length - 2],\r\n    column: splitItems[splitItems.length - 1],\r\n  };\r\n}\r\n\r\nfunction getOriginCodeInfo(item) {\r\n  const smc = sourceMapFilesRepo[`${item.file}.map`] || new SourceMapConsumer(fs.readFileSync(`${item.file}.map`, 'utf8'));\r\n  const originalPosition = smc.originalPositionFor({\r\n    line: parseInt(item.line, 10),\r\n    column: parseInt(item.column, 10),\r\n  });\r\n  return originalPosition;\r\n}\r\n\r\nfunction coordinateSourcePath(source) {\r\n  const searchValue = `src${path.sep}`;\r\n  const startIdx = source.indexOf(searchValue);\r\n  if (startIdx !== -1) {\r\n    return source.substring(startIdx + searchValue.length);\r\n  }\r\n  return source;\r\n}\r\n\r\nfunction getLogLineInfo(stack) {\r\n  try {\r\n    const item = getItemInStack(stack);\r\n    if (!fs.existsSync(`${item.file}.map`)) {\r\n      return `${coordinateSourcePath(item.file)}:${item.line}`;\r\n    }\r\n    const originPosition = getOriginCodeInfo(item);\r\n    return `${coordinateSourcePath(originPosition.source)}:${originPosition.line}`;\r\n  } catch (error) {\r\n    return error.message;\r\n  }\r\n}\r\n\r\nconst config = {\r\n  appenders: {\r\n    logfile: {\r\n      type: 'file',\r\n      maxLogSize: 1048576,\r\n      filename: path.resolve(os.homedir(), '.iotcloud/cli/log/cli.log'),\r\n      layout: {\r\n        type: 'pattern',\r\n        pattern: '%d %p %m',\r\n      },\r\n    },\r\n  },\r\n  categories: {\r\n    default: {\r\n      appenders: ['logfile'],\r\n      level: 'info',\r\n    },\r\n  },\r\n};\r\nlog4js.configure(config);\r\n\r\nclass StLogger {\r\n  constructor(logLevel = DEFAULT_LOG_LEVEL) {\r\n    this.logLevel = isValidLogLevel(logLevel) ? logLevel : DEFAULT_LOG_LEVEL;\r\n    this.logger = log4js.getLogger();\r\n    this.logger.level = this.logLevel;\r\n  }\r\n\r\n  reconfigure(log4jConfig) {\r\n    log4js.configure(log4jConfig);\r\n    this.logger = log4js.getLogger();\r\n    this.logger.level = this.logLevel;\r\n  }\r\n\r\n  setLogLevel(logLevel) {\r\n    this.logLevel = isValidLogLevel(logLevel) ? logLevel : DEFAULT_LOG_LEVEL;\r\n    this.logger.level = this.logLevel;\r\n    return this;\r\n  }\r\n}\r\n\r\nfunction addLogMethods(logLevel) {\r\n  const level = logLevel.toLowerCase();\r\n\r\n  StLogger.prototype[level] = function log(...args) {\r\n    if (this.logger.isLevelEnabled(logLevel)) {\r\n      const lineInfo = getLogLineInfo(new Error().stack);\r\n      const newArgs = args;\r\n      newArgs[0] = `${lineInfo} - ${args[0]}`;\r\n      this.logger[level](...newArgs);\r\n    }\r\n  };\r\n}\r\n\r\n\r\nVALID_LOG_LEVELS.forEach(addLogMethods);\r\n\r\nmodule.exports = new StLogger();\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/StLogger.js\n// module id = 14\n// module chunks = 0","const cp = require('child-process-es6-promise');\r\nconst { getRoot } = require('../common/util');\r\nconst path = require('path');\r\nconst fs = require('./FileSystemHandler');\r\nconst Promise = require('bluebird');\r\nconst IotConsoleAgent = require('./IotConsoleAgent');\r\nconst { getServerConfig, decodeBase64 } = require('../common/util');\r\nconst uuid = require('uuid');\r\nconst StError = require('../errors/StError');\r\nconst x509 = require('x509.js');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\nconst csrGeneratorPath = path.resolve(getRoot(), 'assets/external_jars/CSRGenerator.jar');\r\nconst decryptPriPath = path.resolve(getRoot(), 'assets/external_jars/DecryptPri.jar');\r\n\r\n/**\r\n * Certifcate Manager. Call init() before use.\r\n */\r\nclass CertManager {\r\n\r\n  /**\r\n   * Create a CertManager.\r\n   * @param {Configuration} config A Configuration to read.\r\n   */\r\n  constructor(config) {\r\n    this.config = config;\r\n    this.securityProfilesPath = path.resolve(decodeBase64(config.securityPath), 'security_profiles');\r\n  }\r\n\r\n  /**\r\n   * Set private field from configuration. And create agent for cloud\r\n   * @param {IotConsoleAgent} [iotConsoleAgent] IotConsoleAgent to use.\r\n   * If not specified, automatically generate an agent from config.\r\n   * @returns {undefined}\r\n   */\r\n  init(agent) {\r\n    this.agent = agent ||\r\n    new IotConsoleAgent(this.config, getServerConfig(this.config, 'iotConsole'));\r\n  }\r\n\r\n  getSecurityProfilesPath() {\r\n    return this.securityProfilesPath;\r\n  }\r\n\r\n  /**\r\n   * Clear the current security profiles\r\n   * @param {string} userId A user id to remove.\r\n   * @param {string} mnid A mnid to remove.\r\n   * @returns {Promise<undefined|Error>} A promise is resolved or is rejected with an error.\r\n   */\r\n  clearSecurityProfile() {\r\n    const { userId, mnid } = this.config;\r\n    const targetDir = path.resolve(this.securityProfilesPath, `${userId}${mnid}`);\r\n    return fs.remove(targetDir);\r\n  }\r\n\r\n  /**\r\n   * Create certificate requests for ppk.\r\n   * @param {string} password A password to encrypt private key.\r\n   * @param {string} [distributorType='public'] A distributor type. It can be 'public' or 'partner'.\r\n   * @param {string} [commonName] A common name for certificate.\r\n   * @param {string} [organizationalUnit] A organizational unit for certificate.\r\n   * @param {string} [organization] A organization for certificate.\r\n   * @param {string} [locality] A locality for certificate.\r\n   * @param {string} [state] A state for certificate.\r\n   * @param {string} [country] A country for certificate.\r\n   * @returns {Promise<undefined|Error>} A promise is resolved or is rejected with an error.\r\n   */\r\n  createPpkCsrPair(password, distributorType = 'public', commonName, organizationalUnit, organization,\r\n    locality, state, country) {\r\n    if (!password) return Promise.reject(new StError('CERT_NO_PASSWORD'));\r\n    if (!CertManager.PASSWORD_REGEX.test(password)) {\r\n      return Promise.reject(new StError('CERT_INVALID_PASSWORD'));\r\n    }\r\n    const { userId, mnid, email } = this.config;\r\n    const outDir = path.resolve(this.securityProfilesPath, `${userId}${mnid}`);\r\n    return Promise.resolve()\r\n    .then(() => fs.ensureDir(outDir))\r\n    .then(() => {\r\n      const args = [\r\n        '-jar',\r\n        '-Dfile.encoding=UTF-8',\r\n        csrGeneratorPath,\r\n        '-t', 'ppk',\r\n        '-p', password,\r\n        '-o', outDir,\r\n        '-e', email,\r\n        '-m', mnid,\r\n        '-r', distributorType,\r\n      ];\r\n\r\n      if (commonName) args.push('-n', commonName);\r\n      if (organizationalUnit) args.push('-u', organizationalUnit);\r\n      if (organization) args.push('-g', organization);\r\n      if (locality) args.push('-l', locality);\r\n      if (state) args.push('-s', state);\r\n      if (country) args.push('-c', country);\r\n\r\n      return cp.spawn('java', args)\r\n        .catch((e) => { throw new Error(e.stderr); });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create certificates for ppk.\r\n   * @param {string} password A password to encrypt private key.\r\n   * @param {string} [distributorType='public'] A distributor type. It can be 'public' or 'partner'.\r\n   * @param {string} [commonName] A common name for certificate.\r\n   * @param {string} [organizationalUnit] A organizational unit for certificate.\r\n   * @param {string} [organization] A organization for certificate.\r\n   * @param {string} [locality] A locality for certificate.\r\n   * @param {string} [state] A state for certificate.\r\n   * @param {string} [country] A country for certificate.\r\n   * @returns {Promise<undefined|Error>} A promise is resolved or is rejected with an error.\r\n   */\r\n  createPpkCertPair(password, distributorType = 'public', commonName, organizationalUnit, organization,\r\n    locality, state, country) {\r\n    if (!password) return Promise.reject(new StError('CERT_NO_PASSWORD'));\r\n    if (!CertManager.PASSWORD_REGEX.test(password)) {\r\n      return Promise.reject(new StError('CERT_INVALID_PASSWORD'));\r\n    }\r\n\r\n    if (distributorType !== 'public' && distributorType !== 'partner') {\r\n      return Promise.reject(new StError('CERT_INVALID_DISTRIBUTOR'));\r\n    }\r\n    const { userId, mnid } = this.config;\r\n    return this.createPpkCsrPair(password, distributorType, commonName, organizationalUnit,\r\n      organization, locality, state, country)\r\n      .then(() => {\r\n        const outDir = path.resolve(this.securityProfilesPath, `${userId}${mnid}`);\r\n        const authorCsrPath = path.resolve(outDir, 'author.csr');\r\n        const distributorCsrPath = path.resolve(outDir, 'distributor.csr');\r\n        const authorCertPath = path.resolve(outDir, 'author.crt');\r\n        const distributorCertPath = path.resolve(outDir, 'distributor.crt');\r\n\r\n        return Promise.resolve()\r\n          .then(() => fs.readFile(authorCsrPath))\r\n          .then(authorCsrBuffer => this.agent.getAuthorCertificate(authorCsrBuffer.toString()))\r\n          .then(({ certificate }) => fs.writeFile(authorCertPath, certificate))\r\n          .then(() => fs.readFile(distributorCsrPath))\r\n          .then(distributorCsrBuffer =>\r\n            this.agent.getDistributorCertificate(distributorCsrBuffer.toString(), distributorType))\r\n          .then(({ certificate }) => fs.writeFile(distributorCertPath, certificate))\r\n          .then(() => fs.deleteFile(authorCsrPath))\r\n          .then(() => fs.deleteFile(distributorCsrPath));\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Create certificate requests for device.\r\n   * @param {string} [commonName] A common name for certificate.\r\n   * @param {string} [organizationalUnit] A organizational unit for certificate.\r\n   * @param {string} [organization] A organization for certificate.\r\n   * @param {string} [locality] A locality for certificate.\r\n   * @param {string} [state] A state for certificate.\r\n   * @param {string} [country] A country for certificate.\r\n   * @returns {Promise<undefined|Error>} A promise is resolved or is rejected with an error.\r\n   */\r\n  createDeviceCsr(commonName, organizationalUnit, organization, locality, state, country) {\r\n    const { userId, mnid, email } = this.config;\r\n    const outDir = path.resolve(this.securityProfilesPath, `${userId}${mnid}`);\r\n    return Promise.resolve()\r\n    .then(() => fs.ensureDir(outDir))\r\n    .then(() => {\r\n      const args = [\r\n        '-jar',\r\n        '-Dfile.encoding=UTF-8',\r\n        csrGeneratorPath,\r\n        '-t', 'device',\r\n        '-o', outDir,\r\n        '-e', email,\r\n        '-m', mnid,\r\n        '-d', uuid(),\r\n      ];\r\n\r\n      if (commonName) args.push('-n', commonName);\r\n      if (organizationalUnit) args.push('-u', organizationalUnit);\r\n      if (organization) args.push('-g', organization);\r\n      if (locality) args.push('-l', locality);\r\n      if (state) args.push('-s', state);\r\n      if (country) args.push('-c', country);\r\n\r\n      return cp.spawn('java', args)\r\n        .catch((e) => { throw new Error(e.stderr); });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create certificate requests for device which is not for test.\r\n   * @param {string} mnid A mnid for certificate.\r\n   * @param {string} email A email for certificate.\r\n   * @param {string} outDir An output directory to place certificate.\r\n   * @param {string} [commonName] A common name for certificate.\r\n   * @param {string} [organizationalUnit] A organizational unit for certificate.\r\n   * @param {string} [organization] A organization for certificate.\r\n   * @param {string} [locality] A locality for certificate.\r\n   * @param {string} [state] A state for certificate.\r\n   * @param {string} [country] A country for certificate.\r\n   * @returns {Promise<undefined|Error>} A promise is resolved or is rejected with an error.\r\n   */\r\n  static createDeviceCsrForProduct(mnid, email, outDir, commonName, organizationalUnit,\r\n    organization, locality, state, country) {\r\n    return Promise.resolve()\r\n    .then(() => fs.ensureDir(outDir))\r\n    .then(() => {\r\n      const args = [\r\n        '-jar',\r\n        '-Dfile.encoding=UTF-8',\r\n        csrGeneratorPath,\r\n        '-t', 'device',\r\n        '-o', outDir,\r\n        '-e', email,\r\n        '-m', mnid,\r\n        '-d', uuid(),\r\n      ];\r\n\r\n      if (commonName) args.push('-n', commonName);\r\n      if (organizationalUnit) args.push('-u', organizationalUnit);\r\n      if (organization) args.push('-g', organization);\r\n      if (locality) args.push('-l', locality);\r\n      if (state) args.push('-s', state);\r\n      if (country) args.push('-c', country);\r\n\r\n      return cp.spawn('java', args)\r\n        .catch((e) => { throw new Error(e.stderr); });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create certificates for device which is not for test.\r\n   * @param {string} mnid A mnid for certificate.\r\n   * @param {string} email A email for certificate.\r\n   * @param {string} outDir An output directory to place certificate.\r\n   * @param {string} deviceName A model name of the device to use certificate.\r\n   * @param {string} [commonName] A common name for certificate.\r\n   * @param {string} [organizationalUnit] A organizational unit for certificate.\r\n   * @param {string} [organization] A organization for certificate.\r\n   * @param {string} [locality] A locality for certificate.\r\n   * @param {string} [state] A state for certificate.\r\n   * @param {string} [country] A country for certificate.\r\n   * @returns {Promise<undefined|Error>} A promise is resolved or is rejected with an error.\r\n   */\r\n  createDeviceCertForProduct(mnid, email, outDir, deviceName,\r\n    commonName, organizationalUnit, organization, locality, state, country) {\r\n    return CertManager.createDeviceCsrForProduct(mnid, email, outDir, commonName,\r\n      organizationalUnit, organization, locality, state,\r\n      country)\r\n      .then(() => {\r\n        const csrPath = path.resolve(outDir, 'device.csr');\r\n        const certPath = path.resolve(outDir, 'device.crt');\r\n        return Promise.resolve()\r\n          .then(() => fs.readFile(csrPath))\r\n          .then(csrBuffer => this.agent.getDeviceCertificate(csrBuffer.toString(), deviceName,\r\n            email, mnid))\r\n          .then(({ certificate }) => fs.writeFile(certPath, certificate))\r\n          .then(() => fs.deleteFile(csrPath));\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Create certificates for test.\r\n   * @param {string} [commonName] A common name for certificate.\r\n   * @param {string} [organizationalUnit] A organizational unit for certificate.\r\n   * @param {string} [organization] A organization for certificate.\r\n   * @param {string} [locality] A locality for certificate.\r\n   * @param {string} [state] A state for certificate.\r\n   * @param {string} [country] A country for certificate.\r\n   * @returns {Promise<undefined|Error>} A promise is resolved or is rejected with an error.\r\n   */\r\n  createDeviceCert(commonName, organizationalUnit, organization, locality, state, country) {\r\n    const { userId, mnid } = this.config;\r\n    return this.createDeviceCsr(commonName, organizationalUnit, organization, locality, state,\r\n      country)\r\n      .then(() => {\r\n        const outDir = path.resolve(this.securityProfilesPath, `${userId}${mnid}`);\r\n        const csrPath = path.resolve(outDir, 'device.csr');\r\n        const certPath = path.resolve(outDir, 'device.crt');\r\n        return Promise.resolve()\r\n          .then(() => fs.readFile(csrPath))\r\n          .then(csrBuffer => this.agent.getDeviceCertificate(csrBuffer.toString()))\r\n          .then(({ certificate }) => fs.writeFile(certPath, certificate))\r\n          .then(() => fs.deleteFile(csrPath));\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Check key and cert existence. If not exist, reject with an error.\r\n   * @param {string} keyPath path for key.\r\n   * @param {string} certPath path for certificate.\r\n   * @returns {Promise<undefined|Error>} A promise is resolved or is rejected with an error.\r\n   */\r\n  static checkKeyCert(keyPath, certPath) {\r\n    return fs.exists(certPath)\r\n      .then((exist) => {\r\n        if (!exist) throw new StError('CERT_NO_KEY', keyPath);\r\n        return fs.exists(keyPath);\r\n      })\r\n      .then((exist) => {\r\n        if (!exist) throw new StError('CERT_NO_CERT', certPath);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Check existence of key and cert for ppk. Check expiriation of certs for ppk.\r\n   * If it does not exist or is expired, reject with an error.\r\n   * @returns {Promise<undefined|Error>} A promise is resolved or is rejected with an error.\r\n   */\r\n  checkPpkKeyCert() {\r\n    const { userId, mnid } = this.config;\r\n    const authorKeyPath = path.resolve(this.securityProfilesPath, `${userId}${mnid}`, 'author.pri');\r\n    const authorCertPath = path.resolve(this.securityProfilesPath, `${userId}${mnid}`, 'author.crt');\r\n    const distributorKeyPath = path.resolve(this.securityProfilesPath, `${userId}${mnid}`, 'distributor.pri');\r\n    const distributorCertPath = path.resolve(this.securityProfilesPath, `${userId}${mnid}`, 'distributor.crt');\r\n    return fs.exists(authorKeyPath)\r\n      .then((exist) => {\r\n        if (!exist) throw new StError('CERT_NO_AUTHOR_KEY');\r\n        return fs.exists(authorCertPath);\r\n      })\r\n      .then((exist) => {\r\n        if (!exist) throw new StError('CERT_NO_AUTHOR_CERT');\r\n        return fs.exists(distributorKeyPath);\r\n      })\r\n      .then((exist) => {\r\n        if (!exist) throw new StError('CERT_NO_DISTRIBUTOR_KEY');\r\n        return fs.exists(distributorCertPath);\r\n      })\r\n      .then((exist) => {\r\n        if (!exist) throw new StError('CERT_NO_DISTRIBUTOR_CERT');\r\n        return this.validatePpkCert();\r\n      });\r\n  }\r\n\r\n  validatePpkCert() {\r\n    const { userId, mnid } = this.config;\r\n    const authorCertPath = path.resolve(this.securityProfilesPath, `${userId}${mnid}`, 'author.crt');\r\n    const distributorCertPath = path.resolve(this.securityProfilesPath, `${userId}${mnid}`, 'distributor.crt');\r\n    let authorPem;\r\n    let distPem;\r\n    let authorCert;\r\n    let distCert;\r\n\r\n    try {\r\n      authorPem = fs.readFileSync(authorCertPath);\r\n    } catch (e) {\r\n      throw new StError('CERT_NO_AUTHOR_CERT');\r\n    }\r\n\r\n    try {\r\n      distPem = fs.readFileSync(distributorCertPath);\r\n    } catch (e) {\r\n      throw new StError('CERT_NO_DISTRIBUTOR_CERT');\r\n    }\r\n\r\n    try {\r\n      authorCert = x509.parseCert(authorPem);\r\n      distCert = x509.parseCert(distPem);\r\n    } catch (e) {\r\n      throw new StError('CERT_INVALID_CERTIFICATE');\r\n    }\r\n\r\n    if (new Date(authorCert.notAfter) < new Date()) throw new StError('CERT_EXPIRED_CERTIFICATE');\r\n    if (new Date(distCert.notAfter) < new Date()) throw new StError('CERT_EXPIRED_CERTIFICATE');\r\n  }\r\n\r\n  validateDeviceCert() {\r\n    const { userId, mnid } = this.config;\r\n    const deviceCertPath = path.resolve(this.securityProfilesPath, `${userId}${mnid}`, 'device.crt');\r\n    let devicePem;\r\n    let deviceCert;\r\n\r\n    try {\r\n      devicePem = fs.readFileSync(deviceCertPath);\r\n    } catch (e) {\r\n      throw new StError('CERT_NO_DEVICE_CERT');\r\n    }\r\n\r\n    try {\r\n      deviceCert = x509.parseCert(devicePem);\r\n    } catch (e) {\r\n      throw new StError('CERT_INVALID_CERTIFICATE');\r\n    }\r\n\r\n    if (new Date(deviceCert.notAfter) < new Date()) throw new StError('CERT_EXPIRED_CERTIFICATE');\r\n  }\r\n\r\n  /**\r\n   * Check existence of key and cert for device. If not exist, reject with an error.\r\n   * @param {string} userId userId to find security profile.\r\n   * @param {string} mnid mnid to find security profile.\r\n   * @returns {Promise<undefined|Error>} A promise is resolved or is rejected with an error.\r\n   */\r\n  checkDeviceKeyCert() {\r\n    const { userId, mnid, iotCloud } = this.config;\r\n    if (iotCloud && iotCloud.clientKey && iotCloud.clientCert) return Promise.resolve();\r\n    const keyPath = path.resolve(this.securityProfilesPath, `${userId}${mnid}`, 'device.pri');\r\n    const certPath = path.resolve(this.securityProfilesPath, `${userId}${mnid}`, 'device.crt');\r\n    return fs.exists(certPath)\r\n      .then((exist) => {\r\n        if (!exist) throw new StError('CERT_NO_DEVICE_KEY');\r\n        return fs.exists(keyPath);\r\n      })\r\n      .then((exist) => {\r\n        if (!exist) throw new StError('CERT_NO_DEVICE_CERT');\r\n        return this.validateDeviceCert();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Check validation of password for given key file path.\r\n   * @param {string} password A password for decryption.\r\n   * @param {string} keyPath A path of the key file.\r\n   * @returns {Promise<boolean|Error>}\r\n   * A promise is resolved with a boolean or is rejected with an error.\r\n   */\r\n  static isValidPassword(password, keyPath) {\r\n    return cp.spawn('java', ['-jar', '-Dfile.encoding=UTF-8', decryptPriPath, '-p', password, '-i', keyPath])\r\n      .then(result => result.code === 0)\r\n      .catch((e) => {\r\n        if (e.code === 3) return false;\r\n        throw new Error(e.stderr);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Check validation of password for ppk private keys(author.pri, distributor.pri).\r\n   * If the password is wrong, It resolve with false. Otherwise, It resolve true.\r\n   * If key files does not exist, it rejects an error.\r\n   * @param {string} password A password for decryption.\r\n   * @returns {Promise<boolean|Error>}\r\n   * A promise is resolved with a boolean or is rejected with an error.\r\n   */\r\n  isValidPpkKeyPassword(password) {\r\n    const { userId, mnid } = this.config;\r\n    const authorKeyPath = path.resolve(this.securityProfilesPath, `${userId}${mnid}`, 'author.pri');\r\n    const distributorKeyPath = path.resolve(this.securityProfilesPath, `${userId}${mnid}`, 'distributor.pri');\r\n    return CertManager.isValidPassword(password, authorKeyPath)\r\n      .then((correct) => {\r\n        if (!correct) return false;\r\n        return CertManager.isValidPassword(password, distributorKeyPath);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Get key path and cert path for device.\r\n   * @returns {object} The object that contains keyPath, certPath properties.\r\n   */\r\n  getDeviceKeyCertPath() {\r\n    const { userId, mnid } = this.config;\r\n    return userId && mnid ? {\r\n      keyPath: path.resolve(this.securityProfilesPath, `${userId}${mnid}`, 'device.pri'),\r\n      certPath: path.resolve(this.securityProfilesPath, `${userId}${mnid}`, 'device.crt'),\r\n    } : { keyPath: null, certPath: null };\r\n  }\r\n\r\n  /**\r\n   * Get key and cert for device.\r\n   * @returns {object} The object that contains key, cert properties.\r\n   */\r\n  getDeviceKeyCert() {\r\n    let key = this.config.iotCloud.clientKey;\r\n    let cert = this.config.iotCloud.clientCert;\r\n    if (!key || !cert) {\r\n      const { keyPath, certPath } = this.getDeviceKeyCertPath();\r\n      if (keyPath && certPath) {\r\n        if (fs.existsSync(keyPath) && fs.existsSync(certPath)) {\r\n          key = fs.readFileSync(keyPath).toString();\r\n          cert = fs.readFileSync(certPath).toString();\r\n        }\r\n      }\r\n    }\r\n    return { key, cert };\r\n  }\r\n}\r\n\r\nCertManager.PASSWORD_REGEX = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,128}$/;\r\n\r\nmodule.exports = new Proxy(CertManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/CertManager.js\n// module id = 15\n// module chunks = 0","const path = require('path');\r\nconst uuid = require('uuid/v4');\r\nconst cloneDeep = require('lodash/cloneDeep');\r\nconst isEmpty = require('lodash/isEmpty');\r\nconst fsExtra = require('fs-extra');\r\nconst os = require('os');\r\nconst fs = require('./FileSystemHandler');\r\nconst Promise = require('bluebird');\r\n\r\nconst ProjectConfigurator = require('./ProjectConfigurator');\r\nconst devProfileMapper = require('./DeviceProfileMapper');\r\nconst { getRoot, isValidVid } = require('../common/util');\r\nconst DeviceProfile = require('../models/DeviceProfile');\r\nconst CapabilityManager = require('./CapabilityManager');\r\nconst DeviceResourceManager = require('./DeviceResourceManager');\r\nconst StError = require('../errors/StError');\r\nconst OcfDeviceType = require('../models/OcfDeviceType');\r\nconst OcfDeviceInfo = require('../models/OcfDeviceInfo');\r\nconst OcfDevicePlatform = require('../models/OcfDevicePlatform');\r\nconst OcfDeviceResource = require('../models/OcfDeviceResource');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\nconst MAX_VID_LENGTH = 64;\r\nconst MAX_DEVICE_NAME_LENGTH = 100;\r\nconst MAX_CAPABILITY_NUM = 20;\r\n\r\nfunction retrieveDeviceProfileListFromFile(listFilePath) {\r\n  return fs.exists(listFilePath)\r\n    .then((exists) => {\r\n      if (exists) {\r\n        return fs.readFile(listFilePath, 'utf8')\r\n          .then((data) => {\r\n            const dataObject = JSON.parse(data);\r\n            // NOTE: for backward-compatability\r\n            const list = dataObject.deviceProfiles || dataObject.deviceTypes;\r\n            return list;\r\n          })\r\n          .map(entry => devProfileMapper.mapToDeviceProfileEntry(entry));\r\n      }\r\n      return Promise.resolve([]);\r\n    });\r\n}\r\n\r\nfunction writeDeviceProfileListToFile(listFilePath, list) {\r\n  const contents = {\r\n    deviceProfiles: list,\r\n  };\r\n\r\n  return fs.ensureDir(path.dirname(listFilePath))\r\n    .then(() => fs.writeFile(listFilePath, JSON.stringify(contents, null, 2), { encoding: 'utf8' }));\r\n}\r\n\r\nfunction writeCustomDeviceProfileToFile(deviceProfileFilePath, deviceProfile) {\r\n  return fs.ensureDir(path.dirname(deviceProfileFilePath))\r\n    .then(() => fs.writeFile(deviceProfileFilePath,\r\n      JSON.stringify(deviceProfile, null, 2), { encoding: 'utf8' }));\r\n}\r\n\r\nfunction verifyCapabilitiesInComponents(components, config) {\r\n  const cm = new CapabilityManager(config);\r\n  cm.init();\r\n  return cm.retrieveCapabilityList()\r\n    .then((supportedCaps) => {\r\n      const specifiedCaps = [];\r\n      components.forEach(comp => comp.capabilities.forEach(cap => specifiedCaps.push(cap)));\r\n      specifiedCaps.forEach((specifiedCap) => {\r\n        const found = supportedCaps.find(supportedCap => supportedCap.id === specifiedCap.id);\r\n        if (!found) throw new StError('UNSUPPORTED_CAPABILITY', specifiedCap.id);\r\n      });\r\n    });\r\n}\r\n\r\n\r\nclass DeviceProfileManager {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @constructor\r\n   * @param {Object} config The Configuration of the IoTCloudAgent, User Account and Device info.\r\n   */\r\n  constructor(config) {\r\n    this.config = config || {};\r\n    this.customDeviceProfileDirPath = path.resolve(os.homedir(), '.iotcloud/device_profiles');\r\n    this.baseDeviceProfileDirPath = path.resolve(getRoot(), 'assets/device_profiles');\r\n    this.builtInListFilePath = path.resolve(this.baseDeviceProfileDirPath, 'built_in_list.json');\r\n    this.customListFilePath = path.resolve(this.customDeviceProfileDirPath, 'custom_list.json');\r\n    this.mapFilePath = path.resolve(getRoot(), 'assets/capabilities/mapToResources.json');\r\n\r\n    // move old custom device profiles\r\n    const oldCustomDirPath = path.resolve(os.homedir(), '.iotcloud/cli/device_profiles');\r\n    if (fsExtra.existsSync(oldCustomDirPath) &&\r\n      !fsExtra.existsSync(this.customDeviceProfileDirPath)) {\r\n      fsExtra.copySync(oldCustomDirPath, this.customDeviceProfileDirPath);\r\n      fsExtra.removeSync(oldCustomDirPath);\r\n    }\r\n\r\n    // runtime cache\r\n    this.dtypes = null;\r\n  }\r\n\r\n  /**\r\n   * Create custom device profile.\r\n   *\r\n   * @param {string} type device profile model. 'resource' or 'capability'\r\n   * @param {DeviceProfile} deviceProfile device profile information\r\n   * @param {boolean} forceUpdateMnid update mnid forcely\r\n   * @returns {(Promise.<DeviceProfile|string>)}\r\n   * A promise is resolved with array of device profile or rejected with an error string.\r\n   */\r\n  createDeviceProfile(type, deviceProfile) {\r\n    const profileId = uuid();\r\n    const deviceProfileFilePath = path.resolve(this.customDeviceProfileDirPath, 'custom', profileId);\r\n    return DeviceProfileManager.validateDeviceProfile(type, deviceProfile, this.config)\r\n      .then(() => this.deleteMnid(deviceProfile))\r\n      .then(deviceProfile0 => writeCustomDeviceProfileToFile(deviceProfileFilePath, deviceProfile0))\r\n      .then(() => retrieveDeviceProfileListFromFile(this.customListFilePath))\r\n      .then((deviceProfileList) => {\r\n        let newDeviceProfileList = [];\r\n        newDeviceProfileList = newDeviceProfileList.concat(deviceProfileList);\r\n        newDeviceProfileList.push(devProfileMapper.createDeviceProfileEntry(\r\n          profileId,\r\n          deviceProfile.deviceName || deviceProfile.name,\r\n          type,\r\n          `custom/${profileId}`,\r\n          'custom'));\r\n        return writeDeviceProfileListToFile(this.customListFilePath, newDeviceProfileList)\r\n          .then(() => this.retrieveDeviceProfile(profileId));\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Retrieves device profile list.\r\n   *\r\n   * @param {Object} searchCriteria condition for searching device profiles\r\n   * @returns {(Promise.<DeviceProfileEntry[]|string>)}\r\n   * A promise is resolved with array of device profile or rejected with an error string.\r\n   */\r\n  retrieveDeviceProfileList(searchCriteria = {}) {\r\n    let deviceProfileList = [];\r\n\r\n    return retrieveDeviceProfileListFromFile(this.builtInListFilePath)\r\n      .then((list) => {\r\n        let filterList = searchCriteria.id ?\r\n          list.filter(p => p.id === searchCriteria.id) : list;\r\n\r\n        filterList = searchCriteria.type ?\r\n          filterList.filter(p => p.type === searchCriteria.type) : filterList;\r\n\r\n        filterList = searchCriteria.category ?\r\n          filterList.filter(p => p.category === searchCriteria.category) : filterList;\r\n\r\n        deviceProfileList = deviceProfileList.concat(filterList);\r\n        if (searchCriteria.builtIn) { return []; }\r\n\r\n        return retrieveDeviceProfileListFromFile(this.customListFilePath);\r\n      })\r\n      .then((list) => {\r\n        let filterList = searchCriteria.id ?\r\n          list.filter(p => p.id === searchCriteria.id) : list;\r\n\r\n        filterList = searchCriteria.type ?\r\n          filterList.filter(p => p.type === searchCriteria.type) : filterList;\r\n\r\n        filterList = searchCriteria.category ?\r\n          filterList.filter(p => p.category === searchCriteria.category) : filterList;\r\n\r\n        deviceProfileList = deviceProfileList.concat(filterList);\r\n        return deviceProfileList;\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Check device profile exists.\r\n   *\r\n   * @param {string} id device profile id\r\n   * @returns {(boolean|string)}\r\n   * A promise is resolved with array of device profile or rejected with an error string.\r\n   */\r\n  existsDeviceProfile(id) {\r\n    return this.retrieveDeviceProfileList({ id })\r\n      .then(list => list.length >= 0);\r\n  }\r\n\r\n  /**\r\n   * Retrieves device profile detail.\r\n   *\r\n   * @param {string} id device profile id\r\n   * @returns {(Promise.<DeviceProfile|string>)}\r\n   * A promise is resolved with device profile or rejected with an error string.\r\n   */\r\n  retrieveDeviceProfile(id) {\r\n    return this.retrieveDeviceProfileList()\r\n      .then((deviceProfileList) => {\r\n        const result = deviceProfileList.filter(deviceProfile => deviceProfile.id === id);\r\n        if (result.length === 0) {\r\n          throw new StError('CANNOT_FIND_DEVICE_PROFILE');\r\n        }\r\n        const entry = result[0];\r\n        const deviceProfileFilePath = entry.category === 'custom' ?\r\n          path.resolve(this.customDeviceProfileDirPath, entry.path) :\r\n          path.resolve(this.baseDeviceProfileDirPath, entry.path);\r\n        return this.retrieveDeviceProfileFromFile(deviceProfileFilePath, entry);\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Retrieves device profile detail from file directly.\r\n   *\r\n   * @param {string} filePath device profile file path\r\n   * @param {object} entry optional device entry information\r\n   * @returns {(Promise.<DeviceProfile|string>)}\r\n   * A promise is resolved with device profile or rejected with an error string.\r\n   */\r\n  retrieveDeviceProfileFromFile(filePath, entry) { // eslint-disable-line\r\n    return fs.exists(filePath)\r\n      .then((exists) => {\r\n        if (!exists) {\r\n          throw new StError('CANNOT_FIND_CUSTOM_DEVICE_PROFILE', filePath);\r\n        }\r\n        return fs.readFile(filePath, 'utf8')\r\n          .then(data => JSON.parse(data))\r\n          .then(deviceProfile => devProfileMapper.mapToDeviceProfile(entry, deviceProfile));\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Retrieves device profile detail from project path\r\n   *\r\n   * @param {string} projPath project directory path\r\n   * @returns {(Promise.<DeviceProfile|string>)}\r\n   * A promise is resolved with device profile or rejected with an error string.\r\n   */\r\n  retrieveDeviceProfileInProject(projPath) {\r\n    return ProjectConfigurator.retrieveConfig(projPath)\r\n      .then(() => {\r\n        const profilePath = path.join(projPath, ProjectConfigurator.DEVICE_PROFILE_FILE);\r\n        return this.retrieveDeviceProfileFromFile(profilePath);\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Update custom device profile.\r\n   *\r\n   * @param {string} id device profile id\r\n   * @param {DeviceProfile} deviceProfile device profile information\r\n   * @returns {(Promise.<DeviceProfile|string>)}\r\n   * A promise is resolved with array of device profile or rejected with an error string.\r\n   */\r\n  updateDeviceProfile(id, deviceProfile) {\r\n    const deviceProfilePath = path.resolve(this.customDeviceProfileDirPath, 'custom', id);\r\n    let newDeviceProfileList;\r\n    let targetDeviceProfile;\r\n\r\n    return retrieveDeviceProfileListFromFile(this.customListFilePath)\r\n      .then((deviceProfileList) => {\r\n        targetDeviceProfile = deviceProfileList.find(p => p.id === id);\r\n        if (!targetDeviceProfile) throw new StError('CANNOT_FIND_DEVICE_PROFILE');\r\n        newDeviceProfileList = deviceProfileList.filter(p => p.id !== id);\r\n\r\n        return DeviceProfileManager.validateDeviceProfile(targetDeviceProfile.type, deviceProfile,\r\n          this.config);\r\n      })\r\n      .then(() => {\r\n        const newEntry = devProfileMapper.createDeviceProfileEntry(\r\n          id,\r\n          deviceProfile.deviceName || deviceProfile.name,\r\n          targetDeviceProfile.type,\r\n          `custom/${id}`,\r\n          'custom');\r\n        newDeviceProfileList.push(newEntry);\r\n      })\r\n      .then(() => writeCustomDeviceProfileToFile(deviceProfilePath, deviceProfile))\r\n      .then(() => writeDeviceProfileListToFile(this.customListFilePath, newDeviceProfileList))\r\n      .then(() => this.retrieveDeviceProfile(id));\r\n  }\r\n\r\n  /**\r\n   * Delete custom device profile.\r\n   *\r\n   * @param {string} id device profile id\r\n   * @returns {(Promise.<undefined|string>)}\r\n   * A promise is resolved with array of device profile or rejected with an error string.\r\n   */\r\n  deleteDeviceProfile(id) {\r\n    const deviceProfileFilePath = path.resolve(this.customDeviceProfileDirPath, 'custom', id);\r\n    let newDeviceProfileList = null;\r\n\r\n    return retrieveDeviceProfileListFromFile(this.customListFilePath)\r\n      .then((deviceProfileList) => {\r\n        newDeviceProfileList = deviceProfileList.filter(deviceProfile => deviceProfile.id !== id);\r\n        if (deviceProfileList.length === newDeviceProfileList.length) {\r\n          throw new StError('CANNOT_FIND_DEVICE_PROFILE');\r\n        }\r\n        return fs.deleteFile(deviceProfileFilePath);\r\n      })\r\n      .then(() => writeDeviceProfileListToFile(this.customListFilePath, newDeviceProfileList));\r\n  }\r\n\r\n  /**\r\n   * Verify that the device profile is capability model type.\r\n   * @param {string} deviceProfileId The id of the device profile.\r\n   * @returns {Promise<boolean|error>}\r\n   * A promise is resolved with boolean or is rejected with an error.\r\n   */\r\n  isCapabilityModelType(deviceProfileId) {\r\n    return this.retrieveDeviceProfileList()\r\n      .then((profiles) => {\r\n        const deviceProfile = profiles.find(profile => profile.id === deviceProfileId);\r\n        if (!deviceProfile) throw new StError('CANNOT_FIND_DEVICE_PROFILE');\r\n        return deviceProfile.type === 'capability';\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Convert capability model type device profile to resource model type device profile\r\n   * by device profile id\r\n   * @param {string} deviceProfileId The id of the device profile.\r\n   * @param {boolean} [includeDefault=true]\r\n   * A flag indicating whether the resource model should contain oic/p, oic/d resources.\r\n   * @returns {Promise<DeviceProfile|error>}\r\n   * A promise is resolved with DeviceProfile or is rejected with an error.\r\n   */\r\n  convertToResourceModelByDeviceProfileId(deviceProfileId, includeDefault = true) {\r\n    return this.isCapabilityModelType(deviceProfileId)\r\n      .then((isCap) => {\r\n        if (!isCap) throw new StError('NOT_CAPABILITY_MODEL');\r\n        return this.retrieveDeviceProfile(deviceProfileId)\r\n          .then(deviceProfile => this.convertToResourceModelByDeviceProfile(deviceProfile,\r\n            includeDefault));\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Convert capability model type device profile to resource model type device profile\r\n   * by device profile\r\n   * @param {DeviceProfile} deviceProfile The instance of the DeviceProfile.\r\n   * @param {boolean} [includeDefault=true]\r\n   * A flag indicating whether the resource model should contain oic/p, oic/d resources.\r\n   * @returns {Promise<DeviceProfile|error>}\r\n   * A promise is resolved with DeviceProfile or is rejected with an error.\r\n   */\r\n  convertToResourceModelByDeviceProfile(deviceProfile, includeDefault = true) {\r\n    // NOTE: component and capability is flatten after converting to resource model\r\n    let allResources = [];\r\n\r\n    deviceProfile.components.forEach(\r\n      (component) => {\r\n        component.capabilities.forEach(\r\n          (capability) => {\r\n            const resources = this.mapCapabilityToResources(capability.id, component.id, true);\r\n            allResources = allResources.concat(resources);\r\n          });\r\n      });\r\n\r\n    const deviceResource = cloneDeep(OcfDeviceResource.DEFAULT_OIC_D_RESOURCE);\r\n    if (includeDefault) {\r\n      // update device resource\r\n      if (deviceProfile.metadata.ocfDeviceType) {\r\n        // TODO Should verify this checking is required\r\n        deviceResource.rt.push(deviceProfile.metadata.ocfDeviceType);\r\n      } else {\r\n        const metaDeviceType = deviceProfile.metadata.deviceType;\r\n        const dtype = DeviceResourceManager.retrieveDeviceType(metaDeviceType);\r\n        deviceResource.rt.push(dtype ? dtype.ocfDeviceType : deviceProfile.name);\r\n      }\r\n      allResources.push(deviceResource);\r\n      allResources.push(cloneDeep(OcfDeviceResource.DEFAULT_OIC_P_RESOURCE));\r\n    }\r\n\r\n    const deviceInfo = new OcfDeviceInfo(deviceProfile.name);\r\n    deviceInfo.rt = deviceResource.rt;\r\n    deviceInfo.icv = 'core.1.1.0';\r\n    deviceInfo.dmv = 'res.1.1.0';\r\n\r\n    const platformInfo = new OcfDevicePlatform(deviceProfile.metadata.mnmn,\r\n      deviceProfile.metadata.vid);\r\n    platformInfo.mnml = deviceProfile.metadata.mnml || null;\r\n    platformInfo.mnmo = deviceProfile.metadata.mnmo || null;\r\n    platformInfo.mndt = deviceProfile.metadata.mndt || null;\r\n    platformInfo.mnpv = deviceProfile.metadata.mnpv || null;\r\n    platformInfo.mnos = deviceProfile.metadata.mnos || null;\r\n    platformInfo.mnhw = deviceProfile.metadata.mnhw || null;\r\n    platformInfo.mnfv = deviceProfile.metadata.mnfv || null;\r\n\r\n    const ocfDeviceType = new OcfDeviceType();\r\n    ocfDeviceType.device = deviceInfo;\r\n    ocfDeviceType.platform = platformInfo;\r\n    ocfDeviceType.resources = allResources;\r\n\r\n    return ocfDeviceType;\r\n  }\r\n\r\n\r\n  /**\r\n   * map capability to resources\r\n   * @param {string} capabilityId The id of capability(camelCase)\r\n   * @param {string} [componentId] The id of component\r\n   * @param {boolean} [useDefaultComponent]\r\n   *  indicates map to resource using default('main') component\r\n   * @returns {Array<{href: string, rt: string[], if: string[], type: string[], title: string}>}\r\n   * Array of object that indicates resources.\r\n   */\r\n  mapCapabilityToResources(capabilityId, componentId = 'main', useDefaultComponent = false) {\r\n    const capabilities = fs.readJsonSync(this.mapFilePath);\r\n    const mappedResources = capabilities[capabilityId];\r\n    if (!mappedResources || isEmpty(mappedResources)) throw new StError('CANNOT_MAP_CAPABILITY');\r\n\r\n    let mappedResource;\r\n    mappedResource = mappedResources.find(r => r.component === componentId);\r\n    let resourceHref;\r\n    if (mappedResource) {\r\n      resourceHref = mappedResource.href;\r\n    } else if (useDefaultComponent) {\r\n      mappedResource = mappedResources.find(r => r.component === 'main');\r\n      resourceHref = mappedResource.href.replace('/main/', `/${componentId}/`);\r\n    } else {\r\n      throw new StError('NO_RESOURCES_TO_MAP', `${capabilityId}:${componentId}`);\r\n    }\r\n\r\n    const ocfResource = new OcfDeviceResource(resourceHref);\r\n    ocfResource.rt = [mappedResource.rt];\r\n    ocfResource.if = mappedResource.if;\r\n    ocfResource.type = ['application/json'];\r\n    ocfResource.title = mappedResource.title;\r\n    ocfResource.p = { bm: 3 };\r\n\r\n    return [ocfResource];\r\n  }\r\n\r\n\r\n  mapResourceToCapability(resource) {\r\n    const capabilities = fs.readJsonSync(this.mapFilePath);\r\n\r\n    let result = null;\r\n    Object.keys(capabilities).forEach((key) => {\r\n      const capabilityMap = capabilities[key];\r\n      const matched = capabilityMap.find(c =>\r\n        c.href === resource.href && resource.rt.indexOf(c.rt) >= 0);\r\n\r\n      if (matched) {\r\n        result = {\r\n          id: key,\r\n          component: matched.component,\r\n        };\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n\r\n  static validateDeviceProfile(type, deviceProfile, config) {\r\n    if (type !== 'capability') {\r\n      return Promise.reject(new StError('UNSUPPORTED_DEVICE_PROFILE_MODEL', type));\r\n    }\r\n    if (!deviceProfile.name) {\r\n      return Promise.reject(new StError('INVALID_DEVICE_PROFILE', 'name'));\r\n    }\r\n    if (deviceProfile.name.length > MAX_DEVICE_NAME_LENGTH) {\r\n      return Promise.reject(new StError('EXCEEDED_DEVICE_NAME'));\r\n    }\r\n    if (!deviceProfile.components) {\r\n      return Promise.reject(new StError('INVALID_DEVICE_PROFILE', 'components'));\r\n    }\r\n    if (!deviceProfile.metadata) {\r\n      return Promise.reject(new StError('INVALID_DEVICE_PROFILE', 'metadata'));\r\n    }\r\n    if (!deviceProfile.metadata.vid) {\r\n      return Promise.reject(new StError('INVALID_DEVICE_PROFILE', 'metadata.vid'));\r\n    }\r\n    if (typeof deviceProfile.metadata.vid !== 'string') {\r\n      return Promise.reject(new StError('INVALID_META_VID'));\r\n    }\r\n    if (deviceProfile.metadata.vid.length > MAX_VID_LENGTH) {\r\n      return Promise.reject(new StError('EXCEEDED_META_VID'));\r\n    }\r\n    if (!isValidVid(deviceProfile.metadata.vid)) {\r\n      return Promise.reject(new StError('INVALID_META_VID_REGEX'));\r\n    }\r\n\r\n    const promises = deviceProfile.components.map((component) => {\r\n      if (component.capabilities.length > MAX_CAPABILITY_NUM) {\r\n        return Promise.reject(new StError('EXCEEDED_CAPABILITIES', component.id));\r\n      }\r\n      return Promise.resolve();\r\n    });\r\n\r\n    return Promise.all(promises)\r\n      .then(() => verifyCapabilitiesInComponents(deviceProfile.components, config))\r\n      .then(() => DeviceProfileManager.validateMetaDeviceType(deviceProfile));\r\n  }\r\n\r\n\r\n  static validateMetaDeviceType(deviceProfile) {\r\n    const dtypes = DeviceResourceManager.retrieveDeviceTypeList();\r\n    if (deviceProfile && deviceProfile.metadata && deviceProfile.metadata.deviceType &&\r\n      !dtypes.find(dtype => dtype.id === deviceProfile.metadata.deviceType)) {\r\n      return Promise.reject(new StError('UNSUPPORTED_METADATA_DEVICE_TYPE', deviceProfile.metadata.deviceType));\r\n    }\r\n    return Promise.resolve();\r\n  }\r\n\r\n\r\n  static generateResources(deviceId, deviceProfile, userDeviceName) {\r\n    return new Promise((resolve, reject) => {\r\n      if (deviceProfile instanceof DeviceProfile) {\r\n        let ocfDeviceType;\r\n        try {\r\n          const dpManager = new DeviceProfileManager();\r\n          ocfDeviceType = dpManager.convertToResourceModelByDeviceProfile(deviceProfile, true);\r\n        } catch (e) {\r\n          reject(e);\r\n        }\r\n\r\n        const deviceName = userDeviceName || deviceProfile.name;\r\n        resolve({ di: deviceId, n: deviceName, links: ocfDeviceType.resources });\r\n      } else {\r\n        reject(new StError('UNSUPPORTED_DEVICE_PROFILE_TYPE'));\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  static generateOcfDeviceTypeFromDeviceProfile(deviceProfile, deviceMnmn) {\r\n    return Promise.resolve()\r\n      .then(() => {\r\n        if (!(deviceProfile instanceof DeviceProfile)) {\r\n          throw new StError('UNSUPPORTED_DEVICE_PROFILE_TYPE');\r\n        }\r\n\r\n        const dpManager = new DeviceProfileManager();\r\n        const ocfDeviceType = dpManager.convertToResourceModelByDeviceProfile(deviceProfile, true);\r\n        if (deviceMnmn) ocfDeviceType.platform.mnmn = deviceMnmn;\r\n\r\n        return ocfDeviceType;\r\n      });\r\n  }\r\n\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  deleteMnid(origDeviceProfile) {\r\n    const deviceProfile = cloneDeep(origDeviceProfile);\r\n    delete deviceProfile.metadata.mnmn;\r\n\r\n    return deviceProfile;\r\n  }\r\n\r\n  updateMnidIfNeeded(origDeviceProfile) {\r\n    if (!origDeviceProfile.metadata.mnmn && !this.config.mnid) {\r\n      throw new StError('NO_MNMN_OR_NO_MNID');\r\n    }\r\n\r\n    const deviceProfile = cloneDeep(origDeviceProfile);\r\n    deviceProfile.metadata.mnmn = this.config.mnid;\r\n\r\n    return deviceProfile;\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(DeviceProfileManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/DeviceProfileManager.js\n// module id = 16\n// module chunks = 0","const EventEmitter = require('events').EventEmitter;\r\nconst querystring = require('qs');\r\nconst Promise = require('bluebird');\r\nconst CoapTcpConnector = require('./CoapTcpConnector');\r\nconst AuthProviderAgent = require('./AuthProviderAgent');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\nconst AsyncLock = require('async-lock');\r\n\r\nconst URL = {\r\n  CREATE_TOKEN: '/oic/account/createtoken',\r\n  SIGN_UP: '/oic/account',\r\n  SIGN_IN: '/oic/account/session',\r\n  REFRESH_TOKEN: '/oic/account/tokenrefresh',\r\n  DEVICE_PROFILE: '/oic/account/profile/device',\r\n  DEVICE_RESOURCE: '/oic/res',\r\n  DEVICE_STATES: '/oic/prs',\r\n  DEVICE_LIST: 'oic/account',\r\n  GROUP: '/oic/acl/group',\r\n  DELETE_DEVICE: '/oic/account',\r\n  PING: '/oic/ping',\r\n  PUBLISH_DEVICE: '/oic/rd',\r\n  OBSERVE_SERVICE: '/service/observe',\r\n};\r\n\r\nconst METHOD = {\r\n  GET: 1,\r\n  POST: 2,\r\n  PUT: 3,\r\n  DELETE: 4,\r\n  OBSERVE: 1,\r\n  UNOBSERVE: 1,\r\n};\r\n\r\nconst lock = new AsyncLock();\r\n\r\nclass IotCloudAgent extends EventEmitter {\r\n  constructor(config, clientKey, clientCert) {\r\n    super();\r\n    const { uri, proxy, rejectUnauthorized, useRedirection, redirecturi, serverCert } = config;\r\n    const uri0 = useRedirection ? (redirecturi || uri) : uri;\r\n    const serverCert0 = useRedirection ? serverCert : null;\r\n    this.config = config;\r\n    this.connected = false;\r\n    this.connector =\r\n      new CoapTcpConnector(uri0, proxy, rejectUnauthorized, serverCert0, clientKey, clientCert);\r\n    this.connector.on('close', () => this.emit('close'));\r\n    this.connector.on('debug', msg => this.emit('debug', msg));\r\n  }\r\n\r\n  isConnected() {\r\n    return !!this.connector.socket;\r\n  }\r\n\r\n  connect() {\r\n    if (!this.connected) return this.connector.connect();\r\n    return Promise.resolve();\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.connector) this.connector.disconnect();\r\n  }\r\n\r\n  sendResponse(message) {\r\n    return this.connector.sendResponse(message);\r\n  }\r\n\r\n  signUp(accesstoken, authprovider, di, uid, asDevice) {\r\n    const payload = {\r\n      di,\r\n      authprovider,\r\n      accesstoken,\r\n      clientid: AuthProviderAgent.CLIENT_ID,\r\n      uid,\r\n      devicetype: asDevice ? 'device' : 'samsungconnect',\r\n    };\r\n\r\n    return this.connector.sendRequest(METHOD.POST, URL.SIGN_UP, null, payload);\r\n  }\r\n\r\n  getAccessTokenByAuthCode(authcode, authprovider, di) {\r\n    const payload = {\r\n      di,\r\n      authprovider,\r\n      authcode,\r\n      clientid: AuthProviderAgent.CLIENT_ID,\r\n    };\r\n    return this.connector.sendRequest(METHOD.POST, URL.CREATE_TOKEN, null, payload);\r\n  }\r\n\r\n  signUpWithAuthCode(authcode, authprovider, di, asDevice) {\r\n    let getAccessTokenResponse;\r\n    return this.getAccessTokenByAuthCode(authcode, authprovider, di)\r\n      .then((response) => {\r\n        const payload = {\r\n          di,\r\n          authprovider,\r\n          accesstoken: response.accesstoken,\r\n          clientid: AuthProviderAgent.CLIENT_ID,\r\n          devicetype: asDevice ? 'device' : 'samsungconnect',\r\n          uid: response.uid,\r\n        };\r\n        getAccessTokenResponse = response;\r\n        return this.connector.sendRequest(METHOD.POST, URL.SIGN_UP, null, payload);\r\n      })\r\n      .then(signUpResponse => Object.assign({}, signUpResponse, getAccessTokenResponse));\r\n  }\r\n\r\n  signIn(di, uid, accesstoken) {\r\n    const payload = {\r\n      uid,\r\n      di,\r\n      accesstoken,\r\n      login: true,\r\n    };\r\n    return this.connector.sendRequest(METHOD.POST, URL.SIGN_IN, null, payload)\r\n      .catch((err) => {\r\n        if (err.shortMessage.indexOf('DEVICE_NOT_FOUND') > 0) {\r\n          return Promise.reject(new StError('IOT_CLOUD_DEVICE_NOT_FOUND', di));\r\n        }\r\n        return Promise.reject(err);\r\n      });\r\n  }\r\n\r\n\r\n  signOut(di, uid, accesstoken) {\r\n    const payload = {\r\n      uid,\r\n      di,\r\n      accesstoken,\r\n      login: false,\r\n    };\r\n    return this.connector.sendRequest(METHOD.POST, URL.SIGN_IN, null, payload)\r\n      .catch((err) => {\r\n        if (err.shortMessage.indexOf('DEVICE_NOT_FOUND') > 0) {\r\n          return Promise.reject(new StError('IOT_CLOUD_DEVICE_NOT_FOUND', di));\r\n        }\r\n        return Promise.reject(err);\r\n      });\r\n  }\r\n\r\n  refreshToken(di, uid, refreshtoken) {\r\n    const payload = {\r\n      uid,\r\n      di,\r\n      refreshtoken,\r\n      granttype: 'refresh_token',\r\n    };\r\n    return this.connector.sendRequest(METHOD.POST, URL.REFRESH_TOKEN, null, payload);\r\n  }\r\n\r\n  getPing() {\r\n    return this.connector.sendRequest(METHOD.GET, URL.PING, null, null);\r\n  }\r\n\r\n  setPing(interval) {\r\n    const payload = {\r\n      in: interval,\r\n    };\r\n\r\n    return this.connector.sendRequest(METHOD.POST, URL.PING, null, payload);\r\n  }\r\n\r\n  getGroupList(uid) {\r\n    const query = querystring.stringify({ members: uid }, { delimiter: ';' });\r\n    return this.connector.sendRequest(METHOD.GET, URL.GROUP, query);\r\n  }\r\n\r\n  getGroup(gid, uid) {\r\n    const url = `${URL.GROUP}/${gid}`;\r\n    const query = querystring.stringify({ members: uid }, { delimiter: ';' });\r\n    return this.connector.sendRequest(METHOD.GET, url, query);\r\n  }\r\n\r\n  createGroup(gname, owner, parent, members) {\r\n    const payload = { gname };\r\n    if (owner) payload.owner = owner;\r\n    if (parent) payload.parent = parent;\r\n    if (members) payload.members = members;\r\n\r\n    return this.connector.sendRequest(METHOD.POST, URL.GROUP, null, payload);\r\n  }\r\n\r\n  updateGroup(gid, op, members, masters, devices, resources) {\r\n    const url = `${URL.GROUP}/${gid}`;\r\n    const query = op ? querystring.stringify({ op }, { delimiter: ';' }) : null;\r\n    const payload = {\r\n      members: members || [],\r\n      masters: masters || [],\r\n      devices: devices || [],\r\n      resources: resources || [],\r\n    };\r\n    return this.connector.sendRequest(METHOD.POST, url, query, payload);\r\n  }\r\n\r\n  deleteGroup(gid, owner) {\r\n    const url = `${URL.GROUP}/${gid}`;\r\n    const query = querystring.stringify({ owner }, { delimiter: ';' });\r\n    return this.connector.sendRequest(METHOD.DELETE, url, query);\r\n  }\r\n\r\n  commandDevice(uri, args, rt, interf) {\r\n    const query = querystring.stringify({ rt, interf }, { delimiter: ';' });\r\n    return this.connector.sendRequest(METHOD.POST, uri, query, args);\r\n  }\r\n\r\n  deleteDevice(di, accessToken) {\r\n    const query = querystring.stringify({ di, accesstoken: accessToken }, { delimiter: ';' });\r\n    return this.connector.sendRequest(METHOD.DELETE, URL.DELETE_DEVICE, query, null);\r\n  }\r\n\r\n  publishResources(di, resources) {\r\n    const query = querystring.stringify({ rt: 'oic.wk.rdpub' }, { delimiter: ';' });\r\n    return this.connector.sendRequest(METHOD.POST, URL.PUBLISH_DEVICE, query, resources);\r\n  }\r\n\r\n  createDeviceProfile(profile) {\r\n    return this.connector.sendRequest(METHOD.POST, URL.DEVICE_PROFILE, null, profile);\r\n  }\r\n\r\n  getDeviceProfile(di) {\r\n    const query = di ? querystring.stringify({ di }, { delimiter: ';' }) : null;\r\n    return this.connector.sendRequest(METHOD.GET, URL.DEVICE_PROFILE, query, null);\r\n  }\r\n\r\n  getDeviceResources(di) {\r\n    const query = querystring.stringify({ di }, { delimiter: ';' });\r\n    return this.connector.sendRequest(METHOD.GET, URL.DEVICE_RESOURCE, query, null);\r\n  }\r\n\r\n  getDeviceResource(href) {\r\n    return this.connector.sendRequest(METHOD.GET, href, null, null);\r\n  }\r\n\r\n  getDeviceState(di) {\r\n    // Make criticial section. Observation of same device will be pended\r\n    return lock.acquire(di, () => {\r\n      const query = querystring.stringify({ di }, { delimiter: ';' });\r\n      return this.connector.observe(URL.DEVICE_STATES, query)\r\n        .then(state => this.connector.cancelObserve(URL.DEVICE_STATES, query).then(() => state));\r\n    });\r\n  }\r\n\r\n  getDeviceList() {\r\n    return this.connector.sendRequest(METHOD.GET, URL.DEVICE_LIST);\r\n  }\r\n\r\n  observeDeviceState(di, callback) {\r\n    const query = querystring.stringify({ di }, { delimiter: ';' });\r\n    return this.connector.observe(URL.DEVICE_STATES, query, callback);\r\n  }\r\n\r\n  cancelObserveDeviceState(di) {\r\n    const query = querystring.stringify({ di }, { delimiter: ';' });\r\n    return this.connector.cancelObserve(URL.DEVICE_STATES, query);\r\n  }\r\n\r\n  observeServiceEvent(callback) {\r\n    return this.connector.observe(URL.OBSERVE_SERVICE, null, callback);\r\n  }\r\n\r\n  observeResource(href, callback) {\r\n    return this.connector.observe(href, null, callback);\r\n  }\r\n\r\n  cancelObserveResource(href) {\r\n    return this.connector.cancelObserve(href);\r\n  }\r\n\r\n  setRequestHandler(handler) {\r\n    this.connector.setRequestHandler(handler);\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(IotCloudAgent, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/IotCloudAgent.js\n// module id = 17\n// module chunks = 0","module.exports = require(\"fs-extra\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fs-extra\"\n// module id = 18\n// module chunks = 0","/**\r\n * Data model that contains DeviceProfile infomation\r\n *\r\n * @property {string} id device profile's id\r\n * @property {string} name device profile's name\r\n * @property {Object[]} components device profile's resources\r\n * @property {Object} metadata payload of device's plafrom info\r\n */\r\nclass DeviceProfile {\r\n  constructor() {\r\n    this.id = null;\r\n    this.name = null;\r\n    this.components = [];\r\n    this.metadata = {};\r\n  }\r\n}\r\n\r\nmodule.exports = DeviceProfile;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/DeviceProfile.js\n// module id = 19\n// module chunks = 0","const path = require('path');\r\nconst fs = require('./FileSystemHandler');\r\nconst { getRoot } = require('../common/util');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\nconst DTYPES_JSON_PATH = path.resolve(getRoot(), 'assets', 'device_profiles', 'dtypes.json');\r\nconst DEVICE_RT_JSON_PATH = path.resolve(getRoot(), 'assets', 'device_profiles', 'device_resource_types.json');\r\nlet supportedDeviceTypes;\r\nlet resourceTypeMap;\r\n\r\n\r\nclass DeviceResourceManager {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @constructor\r\n   * @param {Object} config The Configuration of SDK\r\n   */\r\n  constructor(config) {\r\n    this.config = config || {};\r\n  }\r\n\r\n\r\n  /**\r\n   * get OCF Device Resource Type list\r\n   * @returns {object[]} indicates OCF Device Resource Type list.\r\n   */\r\n  static retrieveDeviceResourceTypeList() {\r\n    // lazy load resource file\r\n    resourceTypeMap = resourceTypeMap || fs.readJsonSync(DEVICE_RT_JSON_PATH);\r\n\r\n    return Object.keys(resourceTypeMap).map(id => (\r\n      {\r\n        id,\r\n        name: resourceTypeMap[id].name,\r\n        dtype: resourceTypeMap[id].dtype,\r\n      }));\r\n  }\r\n\r\n\r\n  /**\r\n   * get OCF Device Resource Type\r\n   * @param {string} resourceType OCF Device Resource Type\r\n   * @returns {object|undefined} return specified OCF device type model.\r\n   */\r\n  static retrieveDeviceResourceType(resourceType) {\r\n    const resourceTypes = DeviceResourceManager.retrieveDeviceResourceTypeList();\r\n\r\n    return resourceTypes.find(rt => rt.id === resourceType);\r\n  }\r\n\r\n\r\n  /**\r\n   * check if the specified OCF Device Resource Type exists\r\n   * @param {string} resourceType OCF Device Resource Type\r\n   * @returns {boolean} OCF Device Resource Type existence\r\n   */\r\n  static isValidDeviceResourceType(resourceType) {\r\n    return !!DeviceResourceManager.retrieveDeviceResourceType(resourceType);\r\n  }\r\n\r\n\r\n  /**\r\n   * Retrieves all supported device type(DTYPE) list.\r\n   *\r\n   * @returns {object[]}\r\n   * A promise is resolved with array of device type or rejected with an error string.\r\n   */\r\n  static retrieveDeviceTypeList() {\r\n    supportedDeviceTypes = supportedDeviceTypes || fs.readJsonSync(DTYPES_JSON_PATH).dtypes;\r\n    return supportedDeviceTypes;\r\n  }\r\n\r\n\r\n  /**\r\n   * Retrieves specified device type(DTYPE)\r\n   * @param {string} deviceType Device Type(DTYPE)\r\n   * @returns {object|undefined} return specified device type(DTYPE) model.\r\n   */\r\n  static retrieveDeviceType(deviceType) {\r\n    const dtypes = DeviceResourceManager.retrieveDeviceTypeList();\r\n\r\n    return dtypes.find(dtype => dtype.id === deviceType);\r\n  }\r\n\r\n\r\n  /**\r\n   * Retrieves specified device type(DTYPE) from OCF Resource Type\r\n   * @param {string} deviceType Device Type(DTYPE)\r\n   * @returns {object|undefined} return specified device type(DTYPE) model.\r\n   */\r\n  static retrieveDeviceTypeFromResourceType(resourceType) {\r\n    const dtypes = DeviceResourceManager.retrieveDeviceTypeList();\r\n\r\n    return dtypes.find(dtype => dtype.ocfDeviceType === resourceType);\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(DeviceResourceManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/DeviceResourceManager.js\n// module id = 20\n// module chunks = 0","const pathUtil = require('path');\r\nconst tv4 = require('tv4');\r\nconst Promise = require('bluebird');\r\nconst clone = require('lodash/clone');\r\nconst cloneDeep = require('lodash/cloneDeep');\r\nconst Emitter = require('events');\r\n\r\nconst SmartAppManager = require('./SmartAppManager');\r\nconst ManifestManager = require('./ManifestManager');\r\nconst ProjectConfigurator = require('./ProjectConfigurator');\r\nconst Project = require('../models/Project');\r\nconst fs = require('./FileSystemHandler');\r\nconst Schema = require('../common/Schema');\r\nconst PackageBuilder = require('./PackageBuilder');\r\nconst { getRoot } = require('../common/util');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\nconst xml = require('xml2js');\r\n\r\n/**\r\n * Controller that has a responsibility for building projects\r\n */\r\nclass ProjectBuilder extends Emitter {\r\n\r\n  constructor(parent, projPath, projConfig) {\r\n    super();\r\n    this.config = parent.config;\r\n    this.projPath = projPath;\r\n    this.projConfig = projConfig;\r\n    this.outputPath = pathUtil.join(projPath, projConfig.outputPath);\r\n  }\r\n\r\n\r\n  isUpdatedDeviceProfile() {\r\n    const dpFilePath = pathUtil.join(this.projPath, ProjectConfigurator.DEVICE_PROFILE_FILE);\r\n    const manifestFilePath = pathUtil.join(this.projPath, ProjectConfigurator.MANIFEST_DIR,\r\n      ProjectConfigurator.UI_MANIFEST_FILE);\r\n\r\n    if (fs.statSync(manifestFilePath).mtime < fs.statSync(dpFilePath).mtime) return false;\r\n    return true;\r\n  }\r\n\r\n\r\n  build() {\r\n    const emit = this.emit.bind(this);\r\n    const projType = this.projConfig.type;\r\n\r\n    if (!this.config.mnid) throw new Error('Login or Requesting MNID required!');\r\n\r\n    emit('start', this.projConfig.name);\r\n    return fs.remove(this.outputPath)\r\n    .then(() => fs.makeDir(this.outputPath))\r\n    .then(() => {\r\n      if (projType === Project.PROJ_TYPE.OCF) {\r\n        if (!this.isUpdatedDeviceProfile()) emit('progress', 'Warning: device-profile was updated, please generate manifest if you need');\r\n        return this.buildOcfProject();\r\n      } else if (projType === Project.PROJ_TYPE.C2C) {\r\n        if (!this.isUpdatedDeviceProfile()) emit('progress', 'Warning: device-profile was updated, please generate manifest if you need');\r\n        return this.buildC2cProject();\r\n      } else if (projType === Project.PROJ_TYPE.AUTOMATION) {\r\n        return this.buildAutomationProject();\r\n      }\r\n\r\n      throw new Error(`Invalid project type... ${projType}`);\r\n    });\r\n  }\r\n\r\n\r\n  buildOcfProject() {\r\n    return this.buildDeviceProfileFile()\r\n      .then(deviceProfile => this.buildManifestFiles(deviceProfile.metadata.vid))\r\n      .then(() => fs.exists(pathUtil.join(this.projPath, ProjectConfigurator.PLUGIN_DIR)))\r\n      .then((exists) => {\r\n        if (exists) return this.buildPluginFiles();\r\n        return Promise.resolve();\r\n      })\r\n      .then(() => this.buildCatalogFile(this.projPath, Project.PROJ_TYPE.OCF));\r\n  }\r\n\r\n\r\n  buildC2cProject() {\r\n    return this.buildDeviceProfileFile(this.projPath)\r\n      .then(deviceProfile => this.buildManifestFiles(deviceProfile.metadata.vid))\r\n      .then(() => fs.exists(pathUtil.join(this.projPath, ProjectConfigurator.PLUGIN_DIR)))\r\n      .then((exists) => {\r\n        if (exists) return this.buildPluginFiles();\r\n        return Promise.resolve();\r\n      })\r\n      .then(() => this.buildCatalogFile());\r\n  }\r\n\r\n\r\n  buildAutomationProject() {\r\n    return this.buildCatalogFile();\r\n  }\r\n\r\n\r\n  buildDeviceProfileFile() {\r\n    const filePath = pathUtil.resolve(this.projPath, ProjectConfigurator.DEVICE_PROFILE_FILE);\r\n    const outFilePath = pathUtil.resolve(this.outputPath, ProjectConfigurator.DEVICE_PROFILE_FILE);\r\n\r\n    return fs.readJson(filePath)\r\n      .then((profile) => {\r\n        const deviceProfile = profile;\r\n\r\n        // update mnmn\r\n        deviceProfile.metadata.mnmn = this.config.mnid;\r\n\r\n        const deviceProfileData = JSON.stringify(deviceProfile, null, 2);\r\n        return fs.writeFile(outFilePath, deviceProfileData)\r\n          .then(() => deviceProfile);\r\n      });\r\n  }\r\n\r\n\r\n  buildManifestFiles(vid) {\r\n    const emit = this.emit.bind(this);\r\n    const metaDirPath = pathUtil.resolve(this.projPath, ProjectConfigurator.MANIFEST_DIR);\r\n    const uiManifestPath = pathUtil.join(metaDirPath, ProjectConfigurator.UI_MANIFEST_FILE);\r\n    const voiceManifestPath = pathUtil.join(metaDirPath, ProjectConfigurator.VOICE_MANIFEST_FILE);\r\n\r\n    emit('progress', 'Processing Manifest files...');\r\n    return fs.exists(uiManifestPath)\r\n      .then((exists) => {\r\n        if (exists) return this.buildUiManifestFile(uiManifestPath, vid);\r\n        throw new Error('No UI manifest file!');\r\n      })\r\n      .then(() => fs.exists(voiceManifestPath))\r\n      .then((exists) => {\r\n        if (exists) return this.buildVoiceManifestFile(voiceManifestPath, vid);\r\n        return Promise.resolve();\r\n      });\r\n  }\r\n\r\n  buildUiManifestFile(uiManifestPath, vid) {\r\n    const emit = this.emit.bind(this);\r\n    const mnid = this.config.mnid;\r\n    const outputFilePath = pathUtil.join(this.outputPath, `${mnid}_${vid}_${ProjectConfigurator.UI_MANIFEST_FILE}`);\r\n\r\n    emit('progress', `> UI Manifest file: ${uiManifestPath}`);\r\n    return fs.readJson(uiManifestPath)\r\n      .then((uiManifestData) => {\r\n        const uiManifest = uiManifestData;\r\n\r\n        // validate metadata\r\n        tv4.validate(uiManifest, Schema.uiSchema);\r\n        if (tv4.error) {\r\n          const dataPath = tv4.error.dataPath ? ` ${tv4.error.dataPath}` : '';\r\n          throw Error(`Invalid UI manifest file, ${tv4.error.message}${dataPath}`);\r\n        }\r\n        ManifestManager.validatePoCodes(uiManifest);\r\n\r\n        // update vid/mnmn\r\n        uiManifest.mnmn = mnid;\r\n        uiManifest.vid = vid;\r\n\r\n        // update mnmn and vid in language resources\r\n        if (uiManifest.language && uiManifest.language.length > 0) {\r\n          uiManifest.language = uiManifest.language.map((lang) => {\r\n            const newLang = clone(lang);\r\n            newLang.mnmn = mnid;\r\n            newLang.vid = vid;\r\n            return newLang;\r\n          });\r\n        }\r\n\r\n        // write\r\n        const outputManifest = JSON.stringify(uiManifest, null, 2);\r\n        return fs.writeFile(outputFilePath, outputManifest);\r\n      });\r\n  }\r\n\r\n\r\n  buildVoiceManifestFile(voiceManifestPath, vid) {\r\n    const emit = this.emit.bind(this);\r\n    const mnid = this.config.mnid;\r\n    const outputFilePath = pathUtil.join(this.outputPath, `${mnid}_${vid}_${ProjectConfigurator.VOICE_MANIFEST_FILE}`);\r\n\r\n    emit('progress', `> Voice Manifest file: ${voiceManifestPath}`);\r\n    return fs.readJson(voiceManifestPath)\r\n      .then((voiceManifestData) => {\r\n        const voiceManifest = voiceManifestData;\r\n\r\n        // validate metadata\r\n        tv4.validate(voiceManifest, Schema.voiceSchema);\r\n        if (tv4.error) {\r\n          const dataPath = tv4.error.dataPath ? ` ${tv4.error.dataPath}` : '';\r\n          throw Error(`Invalid VOICE manifest file, ${tv4.error.message}${dataPath}`);\r\n        }\r\n\r\n        // update vid/mnmn\r\n        voiceManifest.mnmn = mnid;\r\n        voiceManifest.vid = vid;\r\n\r\n        // write\r\n        const outputManifest = JSON.stringify(voiceManifest, null, 2);\r\n\r\n        return fs.writeFile(outputFilePath, outputManifest);\r\n      });\r\n  }\r\n\r\n\r\n  buildPluginFiles() {\r\n    // make ppk file and .plugin file in out/ folder\r\n    const emit = this.emit.bind(this);\r\n    const mnid = this.config.mnid;\r\n    const pluginPath = pathUtil.join(this.projPath, ProjectConfigurator.PLUGIN_DIR);\r\n    const manifestXmlPath = pathUtil.join(pluginPath, ProjectConfigurator.PLUGIN_MANIFEST_FILE);\r\n    const tempPluginPath = pathUtil.join(this.outputPath, ProjectConfigurator.PLUGIN_DIR);\r\n    const tempLibPath = pathUtil.join(tempPluginPath, ProjectConfigurator.PLUGIN_LIB_DIR);\r\n    const outManifestXmlPath = pathUtil.join(tempPluginPath,\r\n      ProjectConfigurator.PLUGIN_MANIFEST_FILE);\r\n    const srcSCPluginApiJsPath = pathUtil.join(getRoot(), `assets/${ProjectConfigurator.SCPLUGINAPI_JS_FILE}`);\r\n    const outSCPluginApiJsPath = pathUtil.join(tempLibPath,\r\n      ProjectConfigurator.SCPLUGINAPI_JS_FILE);\r\n\r\n    emit('progress', 'Building Device Plugin...');\r\n    return Promise.resolve()\r\n      .then(() => {\r\n        emit('progress', '> Checking package name...');\r\n        return this.validatePackageName()\r\n          .then(() => this.validatePackageNameInSmartApp());\r\n      })\r\n      .then(() => {\r\n        emit('progress', '> Copying files to output directory...');\r\n        return fs.copy(pluginPath, tempPluginPath);\r\n      })\r\n      .then(() => {\r\n        emit('progress', '> Rewriting manifest.xml...');\r\n        return fs.readFile(manifestXmlPath, 'utf8')\r\n          .then((data) => {\r\n            const manifestXmlData = data.replace('default.manufacturer.id', mnid);\r\n            return fs.writeFile(outManifestXmlPath, manifestXmlData);\r\n          });\r\n      })\r\n      .then(() => {\r\n        emit('progress', `> Adding library... ${ProjectConfigurator.SCPLUGINAPI_JS_FILE}`);\r\n        return fs.exists(tempLibPath)\r\n          .then(exists => (exists ? Promise.resolve() : fs.makeDir(tempLibPath)))\r\n          .then(() => fs.copy(srcSCPluginApiJsPath, outSCPluginApiJsPath));\r\n      })\r\n      .then(() => {\r\n        emit('progress', '> Building PPK file...');\r\n        const packer = new PackageBuilder();\r\n        packer.on('progress', msg => emit('progress', `>> ${msg}`));\r\n        return fs.ensureDir(this.outputPath)\r\n          .then(() => packer.pack(tempPluginPath, this.outputPath));\r\n      })\r\n      .then(() => {\r\n        emit('progress', '> Checking manifest.xml file...');\r\n        if (!fs.existsSync(outManifestXmlPath)) {\r\n          throw new StError('CANNOT_FIND_MANIFEST_XML');\r\n        }\r\n        emit('progress', '> Reading & Pasing manifest.xml file...');\r\n        const manifest = fs.readFileSync(outManifestXmlPath);\r\n        const parser = new xml.Parser();\r\n        const parseXmlStr = Promise.promisify(parser.parseString);\r\n        return parseXmlStr(manifest)\r\n          .then((manifestDoc) => {\r\n            emit('progress', '> Adding .plugin info...');\r\n            if (!manifestDoc || !manifestDoc.manifest || !manifestDoc.manifest.plugin) {\r\n              throw new StError('INVALID_MANIFEST_XML', ProjectConfigurator.PLUGIN_DIR);\r\n            }\r\n            const manifestAttrs = manifestDoc.manifest.$;\r\n            const manifestDeviceAttrs = manifestDoc.manifest.plugin[0].device[0].$;\r\n            const ppkName = `${manifestAttrs.package}_${manifestAttrs.versionName}.ppk`;\r\n            const pluginFilePath = pathUtil.resolve(this.outputPath, `${manifestAttrs.package}.plugin`);\r\n            const pluginContext = {\r\n              id: manifestAttrs.package,\r\n              name: manifestAttrs.package,\r\n              version: manifestAttrs.versionCode,\r\n              versionName: manifestAttrs.versionName,\r\n              url: `ppks/${ppkName}`,\r\n              deviceType: manifestDeviceAttrs.type,\r\n              deviceSubType: manifestDeviceAttrs.subType,\r\n              deviceManufacturer: manifestDeviceAttrs.manufacturer,\r\n              platformVersion: manifestAttrs.minPluginSdkVersion,\r\n            };\r\n\r\n            emit('progress', '> Adding .plugin file...');\r\n            return fs.writeFile(pluginFilePath, JSON.stringify(pluginContext, null, 2));\r\n          });\r\n      })\r\n      .finally(() => {\r\n        emit('progress', '> Cleaning up temporary files...');\r\n        if (fs.existsSync(tempPluginPath)) return fs.remove(tempPluginPath);\r\n        return Promise.resolve();\r\n      });\r\n  }\r\n\r\n\r\n  buildCatalogFile() {\r\n    const emit = this.emit.bind(this);\r\n    const mnid = this.config.mnid;\r\n    const type = this.projConfig.type;\r\n\r\n    const catalogFilePath = pathUtil.join(this.projPath, ProjectConfigurator.CATALOG_FILE);\r\n    const outFilePath = pathUtil.join(this.outputPath, ProjectConfigurator.CATALOG_FILE);\r\n\r\n    emit('progress', 'Processing Catalog file...');\r\n    emit('progress', `> Source file: ${catalogFilePath}`);\r\n    return fs.readJson(catalogFilePath)\r\n      .then((json) => {\r\n        const catalog = json;\r\n\r\n        if (type === Project.PROJ_TYPE.OCF) {\r\n          catalog.items[0].versions[0].appData.setupAppData.ocf.mnId = mnid;\r\n          const setupIdRegex = /^[0-9]{3}$/;\r\n          emit('progress', '> Verifying catalog\\'s setupId');\r\n          const setupId = catalog.items[0].versions[0].appData.setupAppData.ocf.setupId;\r\n          if (!setupId || !setupIdRegex.test(setupId)) {\r\n            throw new StError('INVALID_CATALOG_SETUPID', setupId);\r\n          }\r\n          return catalog;\r\n        }\r\n\r\n        emit('progress', '> Retrieving Smart-App ID...');\r\n        const smartAppManager = new SmartAppManager(this.config);\r\n        smartAppManager.init();\r\n        return smartAppManager.retrieveSmartAppInProject(this.projPath)\r\n          .then((smartAppConfig) => {\r\n            if (type === Project.PROJ_TYPE.AUTOMATION) {\r\n              catalog.items[0].versions[0].appData.automationAppData.endpointApp.endpointAppId =\r\n                smartAppConfig.appId;\r\n            } else {\r\n              catalog.items[0].versions[0].appData.setupAppData.endpointAppId =\r\n                smartAppConfig.appId;\r\n            }\r\n            return catalog;\r\n          });\r\n      })\r\n      .then((catalog) => {\r\n        emit('progress', `> Building Catalog file... ${outFilePath}`);\r\n        return fs.writeFile(outFilePath, JSON.stringify(catalog, null, 2));\r\n      });\r\n  }\r\n\r\n  buildOcfProdCatalogFile() {\r\n    const emit = this.emit.bind(this);\r\n    const mnid = this.config.mnid;\r\n\r\n    const catalogFilePath = pathUtil.join(this.projPath, ProjectConfigurator.PROD_CATALOG_FILE);\r\n    const outFilePath = pathUtil.join(this.outputPath, ProjectConfigurator.CATALOG_FILE);\r\n\r\n    emit('progress', 'Processing Catalog file...');\r\n    emit('progress', `> Source file: ${catalogFilePath}`);\r\n    return fs.readJson(catalogFilePath)\r\n      .then((prodCatalog) => {\r\n        const catalog = {\r\n          items: [{\r\n            name: prodCatalog.modelCd,\r\n            appType: 'setupApp',\r\n            versions: [{\r\n              appData: {\r\n                setupAppData: {\r\n                  type: 'ocf',\r\n                  ocf: {\r\n                    mnId: mnid,\r\n                    setupId: prodCatalog.easysetupId,\r\n                  },\r\n                },\r\n              },\r\n            }],\r\n          }],\r\n        };\r\n\r\n        const setupIdRegex = /^[0-9]{3}$/;\r\n        emit('progress', '> Verifying catalog\\'s setupId');\r\n        const setupId = catalog.items[0].versions[0].appData.setupAppData.ocf.setupId;\r\n        if (!setupId || !setupIdRegex.test(setupId)) {\r\n          throw new StError('INVALID_CATALOG_SETUPID', setupId);\r\n        }\r\n        return catalog;\r\n      })\r\n      .then((catalog) => {\r\n        emit('progress', `> Building Catalog file... ${outFilePath}`);\r\n        return fs.writeFile(outFilePath, JSON.stringify(catalog, null, 2));\r\n      });\r\n  }\r\n\r\n\r\n  buildC2cCatalogFile() {\r\n    const emit = this.emit.bind(this);\r\n    const name = this.projConfig.name;\r\n\r\n    const catalogFilePath = pathUtil.join(this.projPath, ProjectConfigurator.CATALOG_FILE);\r\n    const outFilePath = pathUtil.join(this.outputPath, ProjectConfigurator.CATALOG_FILE);\r\n    emit('progress', 'Processing Catalog file...');\r\n    emit('progress', `> Source file: ${catalogFilePath}`);\r\n\r\n    const RSRC_BASE_DIR = pathUtil.resolve(getRoot(), 'assets', 'project_gen_resources');\r\n    const DEFAULT_C2C_CATALOG = fs.readJsonSync(pathUtil.resolve(RSRC_BASE_DIR, 'default.c2c.catalog.json'));\r\n    const catalog = cloneDeep(DEFAULT_C2C_CATALOG);\r\n    catalog.items[0].name = name;\r\n\r\n    emit('progress', '> Retrieving Smart-App ID...');\r\n    const smartAppManager = new SmartAppManager(this.config);\r\n    smartAppManager.init();\r\n    return smartAppManager.retrieveSmartAppInProject(this.projPath)\r\n      .then((smartAppConfig) => {\r\n        catalog.items[0].versions[0].appData.setupAppData.endpointAppId = smartAppConfig.appName;\r\n      })\r\n      .then(() => {\r\n        emit('progress', `> Building Catalog file... ${outFilePath}`);\r\n        return fs.writeFile(outFilePath, JSON.stringify(catalog, null, 2));\r\n      });\r\n  }\r\n\r\n\r\n  buildAutomationCatalogFile() {\r\n    const emit = this.emit.bind(this);\r\n    const name = this.projConfig.name;\r\n\r\n    const catalogFilePath = pathUtil.join(this.projPath, ProjectConfigurator.CATALOG_FILE);\r\n    const outFilePath = pathUtil.join(this.outputPath, ProjectConfigurator.APP_CATALOG_FILE);\r\n    emit('progress', 'Processing Catalog file...');\r\n    emit('progress', `> Source file: ${catalogFilePath}`);\r\n\r\n    const RSRC_BASE_DIR = pathUtil.resolve(getRoot(), 'assets', 'project_gen_resources');\r\n    const DEFAULT_AUTOMATION_CATALOG = fs.readJsonSync(pathUtil.resolve(RSRC_BASE_DIR, 'default.automation.catalog.json'));\r\n    const catalog = cloneDeep(DEFAULT_AUTOMATION_CATALOG);\r\n    catalog.items[0].name = name;\r\n\r\n    emit('progress', '> Retrieving Smart-App ID...');\r\n    const smartAppManager = new SmartAppManager(this.config);\r\n    smartAppManager.init();\r\n    return smartAppManager.retrieveSmartAppInProject(this.projPath)\r\n      .then((smartAppConfig) => {\r\n        catalog.items[0].versions[0].appData.automationAppData.endpointApp.endpointAppId =\r\n        smartAppConfig.appId;\r\n      })\r\n      .then(() => {\r\n        emit('progress', `> Building Catalog file... ${outFilePath}`);\r\n        return fs.writeFile(outFilePath, JSON.stringify(catalog, null, 2));\r\n      });\r\n  }\r\n\r\n\r\n  validatePackageName() {\r\n    const manifestXmlPath = pathUtil.join(this.projPath, ProjectConfigurator.PLUGIN_DIR,\r\n      ProjectConfigurator.PLUGIN_MANIFEST_FILE);\r\n    const uiManifestPath = pathUtil.join(this.projPath, ProjectConfigurator.MANIFEST_DIR,\r\n      ProjectConfigurator.UI_MANIFEST_FILE);\r\n\r\n    return fs.exists(uiManifestPath)\r\n      .then((exists) => {\r\n        if (!exists) return Promise.resolve();\r\n\r\n        return fs.readJson(uiManifestPath)\r\n          .then(uiManifest => PackageBuilder.readManifestXml(manifestXmlPath)\r\n            .then((manifestDoc) => {\r\n              const packageName = manifestDoc.manifest.$.package;\r\n              const expectedDpUri = `wwst://${packageName}`;\r\n              if (uiManifest.dpInfo.filter(info => info.dpUri === expectedDpUri).length === 0) {\r\n                throw new StError('DEVICE_PLUGIN_PACKAGE_NAME_NOT_MATCHED', packageName);\r\n              }\r\n            }));\r\n      });\r\n  }\r\n\r\n\r\n  validatePackageNameInSmartApp() {\r\n    const manifestXmlPath = pathUtil.join(this.projPath, ProjectConfigurator.PLUGIN_DIR,\r\n      ProjectConfigurator.PLUGIN_MANIFEST_FILE);\r\n    const smartAppJsonPath = pathUtil.join(this.projPath, ProjectConfigurator.SMART_APP_FILE);\r\n\r\n    return fs.exists(smartAppJsonPath)\r\n      .then((exists) => {\r\n        if (!exists) return Promise.resolve();\r\n\r\n        return fs.readJson(smartAppJsonPath)\r\n          .then(smartApp => PackageBuilder.readManifestXml(manifestXmlPath)\r\n            .then((manifestDoc) => {\r\n              const packageName = manifestDoc.manifest.$.package;\r\n              if (smartApp.ui && smartApp.ui.pluginId && packageName !== smartApp.ui.pluginId) {\r\n                throw new StError('PLUGIN_PACKAGE_NAME_NOT_MATCHED_SMART_APP_PLUGIN_ID', packageName);\r\n              }\r\n            }));\r\n      });\r\n  }\r\n\r\n\r\n  isBuilt() {\r\n    return Promise.resolve()\r\n    .then(() => {\r\n      // When the out folder is not exist\r\n      if (!fs.existsSync(this.outputPath)) return false;\r\n\r\n      // Compare to the name of files in out folder to ensure expected name\r\n      const files = fs.readDirSync(this.outputPath);\r\n      const catalogFile = files.find(file => file === ProjectConfigurator.CATALOG_FILE);\r\n      const prodCatalogFile = files.find(file => file === ProjectConfigurator.PROD_CATALOG_FILE);\r\n      const dpFile = files.find(file => file === ProjectConfigurator.DEVICE_PROFILE_FILE);\r\n      const manifestFile = files.find(file => file.includes(ProjectConfigurator.UI_MANIFEST_FILE));\r\n\r\n      if (catalogFile || prodCatalogFile) {\r\n        let catalogFilePath = pathUtil.resolve(this.projPath, ProjectConfigurator.CATALOG_FILE);\r\n        const catalogOutFilePath = pathUtil.resolve(this.outputPath, catalogFile);\r\n\r\n        if (!fs.existsSync(catalogFilePath)) {\r\n          catalogFilePath = pathUtil.resolve(this.projPath, ProjectConfigurator.PROD_CATALOG_FILE);\r\n        }\r\n\r\n        if (fs.existsSync(catalogFilePath) &&\r\n          fs.statSync(catalogOutFilePath).mtime < fs.statSync(catalogFilePath).mtime) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      if (dpFile) {\r\n        const dpFilePath = pathUtil.resolve(this.projPath, ProjectConfigurator.DEVICE_PROFILE_FILE);\r\n        const dpOutFilePath = pathUtil.resolve(this.outputPath, dpFile);\r\n        if (fs.existsSync(dpOutFilePath) &&\r\n          (fs.statSync(dpOutFilePath).mtime < fs.statSync(dpFilePath).mtime)) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      if (manifestFile) {\r\n        const splitedManifestFile = manifestFile.split('_');\r\n        if (dpFile) {\r\n          const content = fs.readFileSync(pathUtil.resolve(this.projPath, dpFile));\r\n          const vid = JSON.parse(content).metadata.vid;\r\n          if (this.config.mnid !== splitedManifestFile[0] || vid !== splitedManifestFile[1]) {\r\n            return false;\r\n          }\r\n        }\r\n        // Compare to the last modificated date between original files and output files\r\n        const manifestFilePath = pathUtil.resolve(this.projPath, ProjectConfigurator.MANIFEST_DIR,\r\n          ProjectConfigurator.UI_MANIFEST_FILE);\r\n\r\n        const manifestOutFilePath = pathUtil.resolve(this.outputPath, manifestFile);\r\n        if (fs.existsSync(manifestOutFilePath)\r\n          && (fs.statSync(manifestOutFilePath).mtime < fs.statSync(manifestFilePath).mtime)) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      // When the PPK is not required\r\n      if (!fs.exists(pathUtil.resolve(this.projPath, ProjectConfigurator.PLUGIN_DIR))) return true;\r\n\r\n      // When the PPK is required\r\n      const ppkFile = files.find(file => file.includes('.ppk'));\r\n      if (!ppkFile) return false;\r\n      const manifestXmlPath = pathUtil.resolve(this.projPath, ProjectConfigurator.PLUGIN_DIR,\r\n        ProjectConfigurator.PLUGIN_MANIFEST_FILE);\r\n      const ppkOutFilePath = pathUtil.resolve(this.outputPath, ppkFile);\r\n      if (fs.statSync(ppkOutFilePath).mtime < fs.statSync(manifestXmlPath).mtime) {\r\n        return false;\r\n      }\r\n\r\n      return PackageBuilder.readManifestXml(manifestXmlPath)\r\n        .then((manifestDoc) => {\r\n          const packageName = manifestDoc.manifest.$.package;\r\n          const versionName = manifestDoc.manifest.$.versionName;\r\n          const packageFileName = `${packageName}_${versionName}.ppk`;\r\n          if (ppkFile !== packageFileName) return false;\r\n          return true;\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(ProjectBuilder, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/ProjectBuilder.js\n// module id = 21\n// module chunks = 0","const pathUtil = require('path');\r\nconst Emitter = require('events');\r\nconst Promise = require('bluebird');\r\nconst cloneDeep = require('lodash/cloneDeep');\r\nconst archiveBuilder = require('../common/archiveBuilder');\r\nconst ProjectConfigurator = require('./ProjectConfigurator');\r\nconst DeviceProfileManager = require('./DeviceProfileManager');\r\nconst Project = require('../models/Project');\r\nconst SmartApp = require('../models/SmartApp');\r\nconst fs = require('./FileSystemHandler');\r\nconst { getRoot, getSmallUuid, isValidVid } = require('../common/util');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\nconst MAX_VID_LENGTH = 64;\r\nconst MAX_PROJECT_NAME_LENGTH = 50;\r\nconst PROJECT_NAME_INVALID_CHAR = /(\\?+|\\*+|\\/+|\\\\+|:+|\\|+|\"+|<+|>+|!+|@+|\\(+|\\)+|`+|'+|&+)/g;\r\nconst PROJECT_NAME_INVALID_START_WITH_REG_EXP = /^\\.|^ /;\r\nconst PROJECT_NAME_INVALID_END_WITH_REG_EXP = /\\.$| $/;\r\nconst PKG_NAME_REG_EXP = /^(?:\\w+|\\w+\\.\\w+)+$/;\r\n\r\nconst scPluginJsFile = pathUtil.join(ProjectConfigurator.PLUGIN_LIB_DIR,\r\n  ProjectConfigurator.SCPLUGINAPI_JS_FILE);\r\nconst DEFAULT_INDEX = `<html>\r\n  <head>\r\n    <!-- SAMSUNG CONNECT API -->\r\n    <script type=\"text/javascript\" src=\"${scPluginJsFile}\"></script>\r\n  </head>\r\n</html>\r\n`;\r\n// TODO: use proper default index.js\r\nconst DEFAULT_JS = '';\r\n// TODO: use proper default index.css\r\nconst DEFAULT_CSS = '';\r\nconst RSRC_BASE_DIR = pathUtil.resolve(getRoot(), 'assets', 'project_gen_resources');\r\nconst DEFAULT_MANIFEST = fs.readFileSync(pathUtil.resolve(RSRC_BASE_DIR, 'default.manifest.xml'), 'utf8');\r\nconst DEFAULT_AUTOMATION_CATALOG = fs.readJsonSync(pathUtil.resolve(RSRC_BASE_DIR, 'default.automation.catalog.json'));\r\nconst DEFAULT_OCF_CATALOG = fs.readJsonSync(pathUtil.resolve(RSRC_BASE_DIR, 'default.ocf.catalog.json'));\r\nconst DEFAULT_C2C_CATALOG = fs.readJsonSync(pathUtil.resolve(RSRC_BASE_DIR, 'default.c2c.catalog.json'));\r\nconst DEFAULT_DEVICE_PROFILE = fs.readJsonSync(pathUtil.resolve(RSRC_BASE_DIR, 'default.device.profile.json'));\r\nconst LAMBDA_DEFAULT_FILE = fs.readFileSync(pathUtil.resolve(RSRC_BASE_DIR, 'default.lambda.index.js'), 'utf8');\r\nconst DEFAULT_PACKAGE_JSON = fs.readJsonSync(pathUtil.resolve(RSRC_BASE_DIR, 'default.lambda.package.json'));\r\n\r\n\r\n/**\r\n * Controller that has a responsibility for creating projects\r\n */\r\nclass ProjectGenerator extends Emitter {\r\n\r\n  constructor(parent) {\r\n    super(); // Emiiter\r\n    this.config = parent.config;\r\n    this.uiMetaGenerator = parent.uiMetaGenerator;\r\n    this.deviceProfileManager = parent.deviceProfileManager;\r\n  }\r\n\r\n\r\n  generateOcfProject(name, path, deviceProfileInfo, mainState, mainAction, vid,\r\n    devicePluginId, createDevicePlugin, setupId) {\r\n    const proj = new Project(name, Project.PROJ_TYPE.OCF);\r\n    const projPath = pathUtil.join(path, name);\r\n\r\n    try {\r\n      this.validateProjectInfo(name, projPath, vid, devicePluginId, createDevicePlugin);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return fs.makeDir(projPath)\r\n      .then(() => this.generateDeviceProfileFile(projPath, deviceProfileInfo, vid))\r\n      .then(deviceProfile => this.generateManifestFiles(projPath, deviceProfile,\r\n        mainState, mainAction, devicePluginId))\r\n      .then(() => (createDevicePlugin ?\r\n        this.generateDevicePluginFiles(projPath, devicePluginId) : null))\r\n      .then(() => this.generateCatalogFile(projPath, name, Project.PROJ_TYPE.OCF, setupId))\r\n      .then(() => ProjectConfigurator.generateConfig(projPath, proj))\r\n      .catch((err) => {\r\n        if (fs.existsSync(projPath)) fs.removeSync(projPath);\r\n        throw err;\r\n      });\r\n  }\r\n\r\n\r\n  generateAutomationProject(name, path, smartAppConfig, lambdaConfig) {\r\n    const proj = new Project(name, Project.PROJ_TYPE.AUTOMATION, smartAppConfig);\r\n    const projPath = pathUtil.join(path, name);\r\n\r\n    try {\r\n      this.validateProjectInfo(name, projPath, null);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return fs.makeDir(projPath)\r\n      .then(() => this.generateCatalogFile(projPath, name, Project.PROJ_TYPE.AUTOMATION))\r\n      .then(() => {\r\n        if (lambdaConfig) {\r\n          return this.generateLambdaSmartAppFiles(projPath, lambdaConfig, LAMBDA_DEFAULT_FILE);\r\n        }\r\n        return Promise.resolve();\r\n      })\r\n      .then(() => ProjectConfigurator.generateConfig(projPath, proj))\r\n      .catch((err) => {\r\n        if (fs.existsSync(projPath)) fs.removeSync(projPath);\r\n        throw err;\r\n      });\r\n  }\r\n\r\n\r\n  generateC2cProject(name, path, smartAppConfig, deviceProfileInfo, mainState, mainAction,\r\n    vid, devicePluginId, createDevicePlugin, lambdaConfig) {\r\n    const proj = new Project(name, Project.PROJ_TYPE.C2C, smartAppConfig);\r\n    const projPath = pathUtil.join(path, name);\r\n\r\n    try {\r\n      this.validateProjectInfo(name, projPath, vid, devicePluginId, createDevicePlugin);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return fs.makeDir(projPath)\r\n      .then(() => this.generateDeviceProfileFile(projPath, deviceProfileInfo, vid))\r\n      .then(deviceProfile => this.generateManifestFiles(projPath, deviceProfile,\r\n        mainState, mainAction, devicePluginId))\r\n      .then(() => (createDevicePlugin ?\r\n        this.generateDevicePluginFiles(projPath, devicePluginId) : null))\r\n      .then(() => this.generateCatalogFile(projPath, name, Project.PROJ_TYPE.C2C))\r\n      .then(() => {\r\n        if (lambdaConfig) {\r\n          return this.generateLambdaSmartAppFiles(projPath, lambdaConfig, LAMBDA_DEFAULT_FILE);\r\n        }\r\n\r\n        return Promise.resolve();\r\n      })\r\n      .then(() => ProjectConfigurator.generateConfig(projPath, proj))\r\n      .catch((err) => {\r\n        if (fs.existsSync(projPath)) fs.removeSync(projPath);\r\n        throw err;\r\n      });\r\n  }\r\n\r\n\r\n  generateProjectByTemplate(name, path, template) {\r\n    let proj = null;\r\n    const projPath = pathUtil.join(path, name);\r\n\r\n    try {\r\n      this.validateProjectInfo(name, projPath, null);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    // create project with template\r\n    return Promise.resolve()\r\n      .then(() => {\r\n        const projType = template.type;\r\n        if (projType === Project.PROJ_TYPE.C2C || projType === Project.PROJ_TYPE.AUTOMATION) {\r\n          proj = new Project(name, projType, template.smartApp);\r\n        } else {\r\n          proj = new Project(name, projType);\r\n        }\r\n\r\n        // generate project source files from the template\r\n        if (template.sourceType === 'zip') {\r\n          return fs.makeDir(projPath)\r\n            .then(() => archiveBuilder.unzip(template.templatePath, projPath));\r\n        }\r\n        return fs.copy(template.templatePath, projPath);\r\n      })\r\n      .then(() => ProjectConfigurator.generateConfig(projPath, proj))\r\n      .catch((err) => {\r\n        if (fs.existsSync(projPath)) fs.removeSync(projPath);\r\n        throw err;\r\n      });\r\n  }\r\n\r\n\r\n  generateDeviceProfileFile(projPath, deviceProfileInfo, vid) {\r\n    return Promise.resolve()\r\n      .then(() => {\r\n        // handle empty device profile\r\n        if (!deviceProfileInfo) return cloneDeep(DEFAULT_DEVICE_PROFILE);\r\n\r\n        // if model, return immediately\r\n        if (typeof deviceProfileInfo === 'object') return deviceProfileInfo;\r\n\r\n        // check input is path or id\r\n        const resolvedProfilePath = pathUtil.resolve(deviceProfileInfo);\r\n        return fs.exists(resolvedProfilePath)\r\n          .then((exists) => {\r\n            if (exists && fs.statSync(resolvedProfilePath).isFile()) {\r\n              return this.deviceProfileManager.retrieveDeviceProfileFromFile(deviceProfileInfo);\r\n            }\r\n\r\n            // if device profile id\r\n            return this.deviceProfileManager.retrieveDeviceProfile(deviceProfileInfo);\r\n          });\r\n      })\r\n      .then((profile) => {\r\n        // override userdefined VID if specified\r\n        const deviceProfile = profile;\r\n        if (vid) deviceProfile.metadata.vid = vid;\r\n        // delete device profile id if exists\r\n        if (deviceProfile.id) delete deviceProfile.id;\r\n\r\n        // verify and write file\r\n        return DeviceProfileManager.validateDeviceProfile('capability', profile, this.config)\r\n          .then(() => {\r\n            const filePath = pathUtil.resolve(projPath, ProjectConfigurator.DEVICE_PROFILE_FILE);\r\n            return fs.writeFile(filePath, JSON.stringify(profile, null, 2));\r\n          })\r\n          .then(() => profile);\r\n      });\r\n  }\r\n\r\n\r\n  generateManifestFiles(projPath, deviceProfile, mainState, mainAction, devicePluginId) {\r\n    const manifestDir = pathUtil.join(projPath, ProjectConfigurator.MANIFEST_DIR);\r\n\r\n    return fs.makeDir(manifestDir)\r\n    .then(() => Promise.map([\r\n      this.uiMetaGenerator.generateUiMetaFromDeviceProfile(deviceProfile,\r\n        {\r\n          msCapability: mainState,\r\n          maCapability: mainAction,\r\n          mnid: '',\r\n          vid: '',\r\n          devicePlugin: devicePluginId,\r\n        }),\r\n      // this.uiMetaGenerator.generateVoiceMetaFromDeviceProfile(deviceProfile,\r\n      //   {\r\n      //     mnid: '',\r\n      //     vid: '',\r\n      //   }),\r\n    ], manifest => manifest))\r\n    .then(([uiManifest/* , voiceManifest */]) => {\r\n      // write manifest files\r\n      const uiManifestPath = pathUtil.join(projPath, ProjectConfigurator.MANIFEST_DIR,\r\n        ProjectConfigurator.UI_MANIFEST_FILE);\r\n      const uiManifestPathContents = JSON.stringify(uiManifest, null, 2);\r\n      // const voiceManifestPath = pathUtil.join(projPath, ProjectConfigurator.MANIFEST_DIR,\r\n      //   ProjectConfigurator.VOICE_MANIFEST_FILE);\r\n      // const voiceManifestContents = JSON.stringify(voiceManifest, null, 2);\r\n      return Promise.all([\r\n        fs.writeFile(uiManifestPath, uiManifestPathContents),\r\n        // fs.writeFile(voiceManifestPath, voiceManifestContents),\r\n      ]);\r\n    });\r\n  }\r\n\r\n\r\n  generateDevicePluginFiles(projPath, devicePluginId) { // eslint-disable-line\r\n    const pluginPath = pathUtil.join(projPath, ProjectConfigurator.PLUGIN_DIR);\r\n    const libPath = pathUtil.join(pluginPath, ProjectConfigurator.PLUGIN_LIB_DIR);\r\n    const jsDirPath = pathUtil.join(pluginPath, ProjectConfigurator.PLUGIN_JS_DIR);\r\n    const cssDirPath = pathUtil.join(pluginPath, ProjectConfigurator.PLUGIN_CSS_DIR);\r\n\r\n    return fs.makeDir(pluginPath)\r\n      .then(() => Promise.all([fs.makeDir(jsDirPath), fs.makeDir(cssDirPath), fs.makeDir(libPath)]))\r\n      .then(() => {\r\n        let defaultManifest = DEFAULT_MANIFEST;\r\n        if (devicePluginId) {\r\n          defaultManifest = defaultManifest.replace('default.plugin', devicePluginId);\r\n        }\r\n\r\n        return Promise.all([\r\n          fs.writeFile(pathUtil.join(pluginPath, ProjectConfigurator.PLUGIN_INDEX_FILE),\r\n            DEFAULT_INDEX),\r\n          fs.writeFile(pathUtil.join(pluginPath, ProjectConfigurator.PLUGIN_MANIFEST_FILE),\r\n            defaultManifest),\r\n          fs.writeFile(pathUtil.join(jsDirPath, ProjectConfigurator.PLUGIN_JS_FILE), DEFAULT_JS),\r\n          fs.writeFile(pathUtil.join(cssDirPath, ProjectConfigurator.PLUGIN_CSS_FILE), DEFAULT_CSS),\r\n          fs.writeFile(pathUtil.join(pluginPath, ProjectConfigurator.PLUGIN_ICON_FILE), ''),\r\n        ]);\r\n      });\r\n  }\r\n\r\n\r\n  generateCatalogFile(projPath, name, type, setupId) { // eslint-disable-line\r\n    const catalogPath = pathUtil.join(projPath, ProjectConfigurator.CATALOG_FILE);\r\n\r\n    let catalog;\r\n    if (type === Project.PROJ_TYPE.C2C) {\r\n      catalog = cloneDeep(DEFAULT_C2C_CATALOG);\r\n    } else if (type === Project.PROJ_TYPE.AUTOMATION) {\r\n      catalog = cloneDeep(DEFAULT_AUTOMATION_CATALOG);\r\n    } else {\r\n      catalog = cloneDeep(DEFAULT_OCF_CATALOG);\r\n      catalog.items[0].versions[0].appData.setupAppData.ocf.setupId = setupId || '001';\r\n    }\r\n    catalog.items[0].name = name;\r\n    return fs.writeFile(catalogPath, JSON.stringify(catalog, null, 2));\r\n  }\r\n\r\n\r\n  generateSmartAppConfig(prjName, appType, lambdaArns = [], targetUrl = '') { // eslint-disable-line\r\n    const endpointAppName = `${prjName}_${getSmallUuid()}`.toLowerCase();\r\n    return new SmartApp({\r\n      appName: endpointAppName,\r\n      displayName: prjName,\r\n      description: prjName,\r\n      singleInstance: false,\r\n      appType,\r\n      impl: appType === SmartApp.APP_TYPE.LAMBDA ?\r\n        { functions: lambdaArns } : { targetUrl },\r\n    });\r\n  }\r\n\r\n\r\n  generateLambdaConfig(appName) { // eslint-disable-line\r\n    return {\r\n      name: appName,\r\n      runtime: 'nodejs6.10',\r\n      handler: 'index.handle',\r\n    };\r\n  }\r\n\r\n\r\n  generateLambdaSmartAppFiles(projPath, lambdaConfig, lambdaFileContents) { // eslint-disable-line\r\n    const smartAppPath = pathUtil.join(projPath, ProjectConfigurator.SMART_APP_DIR);\r\n\r\n    return fs.makeDir(smartAppPath)\r\n      .then(() => {\r\n        const configFile = pathUtil.join(smartAppPath, ProjectConfigurator.LAMBDA_CONFIG_FILE);\r\n        return fs.writeFile(configFile, JSON.stringify(lambdaConfig, null, 2));\r\n      })\r\n      .then(() => {\r\n        if (lambdaConfig.runtime && lambdaConfig.runtime.indexOf('nodejs') >= 0) {\r\n          const packageJsonFile = pathUtil.join(smartAppPath,\r\n            ProjectConfigurator.LAMBDA_PACKAGE_JSON_FILE);\r\n          return fs.writeFile(packageJsonFile,\r\n            JSON.stringify(DEFAULT_PACKAGE_JSON, null, 2));\r\n        }\r\n\r\n        return Promise.resolve();\r\n      })\r\n      .then(() => {\r\n        const lambdaFilePath = pathUtil.join(smartAppPath,\r\n          ProjectConfigurator.DEFAULT_LAMBDA_JS_FILE);\r\n        return fs.writeFile(lambdaFilePath, lambdaFileContents);\r\n      });\r\n  }\r\n\r\n\r\n  static validateProjectInput(name, projPath) {\r\n    if (!name) throw new StError('PROJECT_NAME_EMPTY');\r\n\r\n    if (name.length > MAX_PROJECT_NAME_LENGTH) {\r\n      throw new StError('PROJECT_NAME_LENGTH_EXCEEDS_MAX_LENGTH', MAX_PROJECT_NAME_LENGTH);\r\n    }\r\n\r\n    if (PROJECT_NAME_INVALID_CHAR.test(name)) {\r\n      throw new StError('PROJECT_NAME_INVALID_CHAR');\r\n    }\r\n\r\n    if (PROJECT_NAME_INVALID_START_WITH_REG_EXP.test(name)) {\r\n      throw new StError('PROJECT_NAME_START_WITH_INVALID_CHAR');\r\n    }\r\n\r\n    if (PROJECT_NAME_INVALID_END_WITH_REG_EXP.test(name)) {\r\n      throw new StError('PROJECT_NAME_END_WITH_INVALID_CHAR');\r\n    }\r\n\r\n    if (fs.existsSync(projPath)) {\r\n      throw new StError('CREATE_PROJECT_PRJ_ALREADY_EXISTS', projPath);\r\n    }\r\n  }\r\n\r\n\r\n  validateProjectInfo(name, projPath, vid, devicePluginId, createDevicePlugin) { // eslint-disable-line\r\n\r\n    ProjectGenerator.validateProjectInput(name, projPath);\r\n\r\n    // check VID length\r\n    if (vid && vid.length > MAX_VID_LENGTH) {\r\n      throw new StError('CREATE_PROJECT_VID_EXCEEDS_MAX_LENGTH', MAX_VID_LENGTH);\r\n    }\r\n\r\n    if (!isValidVid(vid)) {\r\n      throw new StError('CREATE_PROJECT_INVAID_VID');\r\n    }\r\n\r\n    // check device plugin package name\r\n    if (createDevicePlugin && !devicePluginId) {\r\n      throw new StError('CREATE_PROJECT_DEVICE_PLUGIN_OPTION_REQUIRED');\r\n    }\r\n\r\n    // check device plugin package name\r\n    if (devicePluginId) {\r\n      if (devicePluginId.length > 64) throw new StError('INVALID_DEVICE_PLUGIN_ID_LONG');\r\n\r\n      if (!PKG_NAME_REG_EXP.test(devicePluginId)) {\r\n        throw new StError('INVALID_DEVICE_PLUGIN_ID_URI');\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(ProjectGenerator, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/ProjectGenerator.js\n// module id = 22\n// module chunks = 0","/* eslint-disable no-bitwise */\r\nconst _ = require('lodash');\r\nconst StError = require('../errors/StError');\r\n\r\nconst MAX_OBSERVE = (1 << 24) - 1; // UInt 3 bytes\r\n\r\nconst OptionNameToNumber = Object.freeze({\r\n  'If-Match': 1,\r\n  'Uri-Host': 3,\r\n  ETag: 4,\r\n  'If-None-Match': 5,\r\n  Observe: 6, // draft-ietf-core-observe-14\r\n  'Uri-Port': 7,\r\n  'Location-Path': 8,\r\n  'Uri-Path': 11,\r\n  'Content-Format': 12,\r\n  'Max-Age': 14,\r\n  'Uri-Query': 15,\r\n  Accept: 17,\r\n  'Location-Query': 20,\r\n  Block2: 23, // draft-ietf-core-block-21\r\n  Block1: 27, // draft-ietf-core-block-21\r\n  'Proxy-Uri': 35,\r\n  'Proxy-Scheme': 39,\r\n  Size1: 60,\r\n});\r\nconst NumberToOptionName = Object.freeze(_.invert(OptionNameToNumber));\r\nconst MediaTypeToNumber = Object.freeze({\r\n  'text/plain': 0,\r\n  'text/csv': 2,\r\n  'text/html': 3,\r\n  'image/gif': 21,\r\n  'image/jpeg': 22,\r\n  'image/png': 23,\r\n  'image/tiff': 24,\r\n  'application/link-format': 40,\r\n  'application/xml': 41,\r\n  'application/octet-stream': 42,\r\n  'application/rdf+xml': 43,\r\n  'application/soap+xml': 44,\r\n  'application/atom+xml': 45,\r\n  'application/xmpp+xml': 46,\r\n  'application/exi': 47,\r\n  'application/fastinfoset': 48,\r\n  'application/soap+fastinfoset': 49,\r\n  'application/json': 50,\r\n  'application/x-obix-binary': 51,\r\n  'application/cbor': 60,\r\n});\r\nconst NumberToMediaType = Object.freeze(_.invert(MediaTypeToNumber));\r\n\r\nconst CONTENT_FORMAT = Object.freeze({\r\n  JSON: MediaTypeToNumber['application/json'],\r\n  CBOR: MediaTypeToNumber['application/cbor'],\r\n});\r\n\r\nfunction numberTo4Bytes(value) {\r\n  let length = 0;\r\n  if (value < 0) {\r\n    // use 4 bytes for negative number\r\n    length = 4;\r\n  } else {\r\n    // calculate byte length\r\n    for (let i = 0; i < 4; i += 1) {\r\n      if (value >= 1 << (i * 8)) {\r\n        length += 1;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  const buffer = Buffer.alloc(length || 1, 0);\r\n  for (let i = 0; i < length; i += 1) {\r\n    // lower i-th byte\r\n    const masked = 0xFF & (value >> i * 8);\r\n    buffer.writeUInt8(masked, length - i - 1);\r\n  }\r\n  return buffer;\r\n}\r\n\r\nclass CoapOptions {\r\n  /**\r\n   * @constructor\r\n   * @param {object} [content] The content of the options to be encoded/decoded.\r\n   * @param {Buffer} [content.observe] Buffer(maximum 3 bytes) to represent observation sequence.\r\n   * @param {string} [content.path] The uriPath of the message.\r\n   * @param {string} [content.query] The uriQuery of the message.\r\n   * @param {number} [content.format] The number to represent payload format.\r\n   * Can be one of CoapOptions.CONTENT_FORMAT.CBOR or CoapOptions.CONTENT_FORMAT.JSON\r\n   */\r\n  constructor(content) {\r\n    const { observe, path, query, format } = content || {};\r\n    if (observe) this.setObserve(observe);\r\n    if (path) this.setUriPath(path);\r\n    if (query) this.setUriQuery(query);\r\n    if (typeof format === 'number') this.setContentFormat(format);\r\n  }\r\n  setObserve(buffer) {\r\n    if (buffer.length < 0 || buffer.length > MAX_OBSERVE) throw new StError('INVALID_OBSERVE_OPTION');\r\n    this.observe = buffer;\r\n  }\r\n  setUriPath(path) {\r\n    if (typeof path !== 'string') throw new StError('INVALID_URI_PATH');\r\n    this.uriPath = path;\r\n  }\r\n  setContentFormat(format) {\r\n    // CBOR and JSON only\r\n    if (format !== 50 && format !== 60) throw new StError('UNSUPPORTED_CONTENT_FORMAT', format);\r\n    this.contentFormat = format;\r\n  }\r\n  setUriQuery(query) {\r\n    if (typeof query !== 'string') throw new StError('INVALID_URI_QUERY');\r\n    this.uriQuery = query;\r\n  }\r\n\r\n  toBytes() {\r\n    /**\r\n     * prepare options : sort options and convert value to buffer\r\n     */\r\n    const options = [];\r\n    // TODO: 'If-Match': 1,\r\n    // TODO: 'Uri-Host': 3,\r\n    // TODO: ETag: 4,\r\n    // TODO: 'If-None-Match': 5,\r\n    if (_.has(this, 'observe')) {\r\n      const value = typeof this.observe === 'number'\r\n        ? numberTo4Bytes(this.observe)\r\n        : this.observe;\r\n      options.push({ number: 6, value });\r\n    }\r\n    // TODO: 'Uri-Port': 7,\r\n    // TODO: 'Location-Path': 8,\r\n    if (_.has(this, 'uriPath')) {\r\n      const uriPath = this.uriPath;\r\n      const path = uriPath.startsWith('/') ? uriPath.slice(1) : uriPath;\r\n      path.split('/').forEach((seg) => {\r\n        options.push({ number: 11, value: Buffer.from(seg) });\r\n      });\r\n    }\r\n    if (_.has(this, 'contentFormat')) {\r\n      options.push({ number: 12, value: Buffer.alloc(1, this.contentFormat) });\r\n    }\r\n    // TODO: 'Max-Age': 14,\r\n    if (_.has(this, 'uriQuery')) {\r\n      this.uriQuery.split(';').forEach((seg) => {\r\n        if (seg) options.push({ number: 15, value: Buffer.from(seg) });\r\n      });\r\n    }\r\n    // TODO: Accept: 17,\r\n    // TODO: 'Location-Query': 20,\r\n    // TODO: Block2: 23\r\n    // TODO: Block1: 27\r\n    // TODO: 'Proxy-Uri': 35,\r\n    // TODO: 'Proxy-Scheme': 39,\r\n    // TODO: Size1: 60,\r\n\r\n    /**\r\n     * serialize options\r\n     */\r\n    const bufferList = [];\r\n    let totalLength = 0;\r\n    let lastNumber = 0;\r\n    options.forEach((option) => {\r\n      const delta = option.number - lastNumber;\r\n      lastNumber = option.number;\r\n      const length = option.value.length;\r\n\r\n      let deltaLengthByte = 0;\r\n      let extDeltaBytes = null;\r\n      let extLengthBytes = null;\r\n      if (delta <= 12) {\r\n        deltaLengthByte |= delta << 4;\r\n      } else if (delta <= 255 + 13) {\r\n        deltaLengthByte |= 13 << 4;\r\n        extDeltaBytes = Buffer.alloc(1);\r\n        extDeltaBytes.writeUInt8(delta - 13, 0);\r\n      } else if (delta <= 65535 + 269) {\r\n        deltaLengthByte |= 14 << 4;\r\n        extDeltaBytes = Buffer.alloc(2);\r\n        extDeltaBytes.writeUInt16BE(delta - 269, 0);\r\n      } else {\r\n        throw new StError('UNSUPPORTED_OPTION_DELTA');\r\n      }\r\n      if (length <= 12) {\r\n        deltaLengthByte |= length;\r\n      } else if (length <= 255 + 13) {\r\n        deltaLengthByte |= 13;\r\n        extLengthBytes = Buffer.alloc(1);\r\n        extLengthBytes.writeUInt8(length - 13, 0);\r\n      } else if (length <= 65535 + 269) {\r\n        deltaLengthByte |= 14;\r\n        extLengthBytes = Buffer.alloc(2);\r\n        extLengthBytes.writeUInt16BE(length - 269, 0);\r\n      } else {\r\n        throw new StError('UNSUPPORTED_OPTION_LENGTH');\r\n      }\r\n      // upper 4bits for delta\r\n      // lower 4bits for length\r\n      bufferList.push(Buffer.alloc(1, deltaLengthByte));\r\n      totalLength += 1;\r\n      // extended delta 0~2 bytes\r\n      if (extDeltaBytes) {\r\n        bufferList.push(extDeltaBytes);\r\n        totalLength += extDeltaBytes.length;\r\n      }\r\n      // extended length 0~2 bytes\r\n      if (extLengthBytes) {\r\n        bufferList.push(extLengthBytes);\r\n        totalLength += extLengthBytes.length;\r\n      }\r\n      // value\r\n      bufferList.push(option.value);\r\n      totalLength += option.value.length;\r\n    });\r\n    return Buffer.concat(bufferList, totalLength);\r\n  }\r\n\r\n  toString() {\r\n    const strings = [];\r\n    if (this.uriPath) strings.push(`  ${NumberToOptionName[11]}: ${this.uriPath}`);\r\n    if (this.uriQuery) strings.push(`  ${NumberToOptionName[15]}: ${this.uriQuery}`);\r\n    const format = NumberToMediaType[this.contentFormat];\r\n    if (format) strings.push(`  ${NumberToOptionName[12]}: ${format}`);\r\n    if (this.observe) strings.push(`  ${NumberToOptionName[6]}: ${this.observe.toString('hex')}`);\r\n    return strings.join('\\n');\r\n  }\r\n}\r\nCoapOptions.CONTENT_FORMAT = CONTENT_FORMAT;\r\nCoapOptions.fromRawOptions = (options) => {\r\n  const opts = {};\r\n  options.forEach(({ number, value }) => {\r\n    switch (number) {\r\n      case /* Uri-Path */ 11:\r\n        opts.path = `${opts.path || ''}/${value.toString()}`;\r\n        break;\r\n      case /* Uri-Query */ 15:\r\n        opts.query = `${opts.query || ''};${value.toString()}`;\r\n        break;\r\n      case /* Content-Format */ 12:\r\n        opts.format = value.readUInt8(0);\r\n        break;\r\n      case /* Observe */ 6:\r\n        opts.observe = value;\r\n        break;\r\n      default:\r\n        // TODO: more options\r\n        throw new StError('UNSUPPORTED_OPTION_NUMBER');\r\n    }\r\n  });\r\n  return new CoapOptions(opts);\r\n};\r\nCoapOptions.MAX_OBSERVE = MAX_OBSERVE;\r\nCoapOptions.numberTo4Bytes = numberTo4Bytes;\r\n\r\nmodule.exports = CoapOptions;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/CoapOptions.js\n// module id = 23\n// module chunks = 0","module.exports = require(\"lodash\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash\"\n// module id = 24\n// module chunks = 0","const util = require('./util');\r\nconst i18next = require('i18next');\r\nconst backend = require('i18next-sync-fs-backend');\r\n\r\ni18next.use(backend)\r\n.init({\r\n  lng: 'en',\r\n  fallbackLng: 'en',\r\n  debug: false,\r\n  initImmediate: false,\r\n  interpolation: { escapeValue: false },\r\n  backend: {\r\n    loadPath: `${util.getRoot()}/messages/{{lng}}/messages.json`,\r\n  },\r\n});\r\n\r\nfunction getText(key, ...args) {\r\n  return i18next.t(key, args);\r\n}\r\n\r\nmodule.exports = {\r\n  getText,\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/TextHandler.js\n// module id = 25\n// module chunks = 0","const request = require('request-promise');\r\nconst debug = require('debug');\r\nconst getClassLogger = require('../common/getClassLogger');\r\nconst EventEmitter = require('events');\r\n\r\nconst log = debug('RequestManager');\r\n\r\nclass RequestManager extends EventEmitter {\r\n  constructor(baseUri, proxy, rejectUnauthorized) {\r\n    super();\r\n    this.baseUri = baseUri;\r\n    this.proxy = proxy;\r\n    this.rejectUnauthorized = rejectUnauthorized;\r\n  }\r\n\r\n  request(method, subUri, query, headers, body, noBaseUri, extraOptions = {}) {\r\n    const uri = noBaseUri ? subUri : `${this.baseUri}${subUri}`;\r\n    const options = Object.assign({ method, uri, json: true, proxy: this.proxy }, extraOptions);\r\n\r\n    if (query) options.qs = query;\r\n    if (headers) options.headers = headers;\r\n    if (body) options.body = body;\r\n\r\n    if (this.rejectUnauthorized === false) options.rejectUnauthorized = false;\r\n\r\n    const requestLog = `REQUEST ${JSON.stringify(options, null, 2)}`;\r\n    log(requestLog);\r\n    this.emit('debug', requestLog);\r\n    return request(options)\r\n      .then((response) => {\r\n        const responseLog = `RESPONSE ${JSON.stringify(response, null, 2)}`;\r\n        log(responseLog);\r\n        this.emit('debug', responseLog);\r\n        return response;\r\n      }, (error) => {\r\n        const errorLog = `ERROR ${JSON.stringify(error, null, 2)}`;\r\n        log(errorLog);\r\n        this.emit('debug', errorLog);\r\n        return Promise.reject(error);\r\n      });\r\n  }\r\n}\r\n\r\nRequestManager.METHODS = {\r\n  GET: 'GET',\r\n  POST: 'POST',\r\n  DELETE: 'DELETE',\r\n  PUT: 'PUT',\r\n  PATCH: 'PATCH',\r\n};\r\n\r\nmodule.exports = new Proxy(RequestManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/RequestManager.js\n// module id = 26\n// module chunks = 0","module.exports = require(\"child-process-es6-promise\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"child-process-es6-promise\"\n// module id = 27\n// module chunks = 0","const pathUtil = require('path');\r\nconst Promise = require('bluebird');\r\nconst path = require('path');\r\nconst _ = require('lodash');\r\nconst fs = require('./FileSystemHandler');\r\nconst getRoot = require('../common/util').getRoot;\r\nconst ResourceTypeManager = require('./ResourceTypeManager');\r\nconst ProjectConfigurator = require('./ProjectConfigurator');\r\nconst DeviceResourceManager = require('./DeviceResourceManager');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\nconst logger = require('../common/StLogger');\r\n\r\nconst RSRC_BASE_DIR = pathUtil.resolve(getRoot(), 'assets', 'project_gen_resources');\r\nconst DEFAULT_UI_META = fs.readJsonSync(pathUtil.resolve(RSRC_BASE_DIR, 'default.ui.json'));\r\nconst DEFAULT_VOICE_META = fs.readJsonSync(pathUtil.resolve(RSRC_BASE_DIR, 'default.voice.json'));\r\n\r\n\r\nfunction manifestMergeFunc(obj, src) {\r\n  if (_.isArray(obj)) {\r\n    const result = _.mergeWith(obj, src, manifestMergeFunc);\r\n    return obj.length > src.length ? result.slice(0, src.length) : result;\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\n\r\nfunction generateMainStateResource(ms, capabilityId, componentId, option = {}) {\r\n  return ms.map((origResource, index) => {\r\n    let resource = _.cloneDeep(origResource);\r\n\r\n    if (resource.group === null) delete resource.group;\r\n    if (resource.iconUrl === null) delete resource.iconUrl;\r\n    if (resource.label && resource.label.n === null) delete resource.label.n;\r\n    if (resource.label && resource.label.arguments === null) delete resource.label.arguments;\r\n    if (resource.range === null) delete resource.range;\r\n    if (resource.valueType === null) delete resource.valueType;\r\n    if (resource.visible === null) delete resource.visible;\r\n    if (resource.alternatives === null) delete resource.alternatives;\r\n    if (resource.controlType === null) delete resource.controlType;\r\n\r\n    //  Merge/Update manifest property from option\r\n    const capabilityPropertyMap = option.capabilityPropertyMap ?\r\n    option.capabilityPropertyMap[`${componentId}:${capabilityId}`] : {};\r\n    if (capabilityPropertyMap && capabilityPropertyMap.ms &&\r\n      capabilityPropertyMap.ms[index]) {\r\n      resource = _.mergeWith(resource, capabilityPropertyMap.ms[index], manifestMergeFunc);\r\n    }\r\n\r\n    // Apply componentId to href path ms.label.arguments.href\r\n    const tgtHrefPattern = `/capability/${capabilityId}/${componentId}/`;\r\n    if (resource.label && resource.label.arguments) {\r\n      resource.label.arguments.forEach((arg) => {\r\n        const argument = arg;\r\n        if (argument.href && argument.href.indexOf(tgtHrefPattern) < 0) {\r\n          const rscIndex = argument.href.split('/').pop();\r\n          argument.href = `${tgtHrefPattern}${rscIndex}`;\r\n        }\r\n      });\r\n    }\r\n\r\n    return resource;\r\n  });\r\n}\r\n\r\n\r\nfunction generateMainActionResource(ma, capabilityId, componentId, option = {}) {\r\n  return ma.map((origResource, index) => {\r\n    let resource = _.cloneDeep(origResource);\r\n\r\n    if (resource.group === null) delete resource.group;\r\n    if (resource.iconUrl === null) delete resource.iconUrl;\r\n    if (resource.label && resource.label.n === null) delete resource.label.n;\r\n    if (resource.label && resource.label.arguments === null) delete resource.label.arguments;\r\n    if (resource.range === null) delete resource.range;\r\n    if (resource.valueType === null) delete resource.valueType;\r\n    if (resource.visible === null) delete resource.visible;\r\n    if (resource.alternatives === null) delete resource.alternatives;\r\n    if (resource.controlType === null) delete resource.controlType;\r\n\r\n    //  Merge/Update manifest property from option\r\n    const capabilityPropertyMap = option.capabilityPropertyMap ?\r\n    option.capabilityPropertyMap[`${componentId}:${capabilityId}`] : {};\r\n    if (capabilityPropertyMap && capabilityPropertyMap.ma &&\r\n      capabilityPropertyMap.ma[index]) {\r\n      resource = _.mergeWith(resource, capabilityPropertyMap.ma[index], manifestMergeFunc);\r\n    }\r\n\r\n    // Apply componentId to href path ma.link.href\r\n    const tgtHrefPattern = `/capability/${capabilityId}/${componentId}/`;\r\n    if (resource.link && resource.link.href && resource.link.href.indexOf(tgtHrefPattern) < 0) {\r\n      const rscIndex = resource.link.href.split('/').pop();\r\n      resource.link.href = `${tgtHrefPattern}${rscIndex}`;\r\n    }\r\n\r\n    // Apply componentId to href path ma.label.arguments.href\r\n    if (resource.label && resource.label.arguments) {\r\n      resource.label.arguments.forEach((arg) => {\r\n        const argument = arg;\r\n        if (argument.href && argument.href.indexOf(tgtHrefPattern) < 0) {\r\n          const rscIndex = argument.href.split('/').pop();\r\n          argument.href = `${tgtHrefPattern}${rscIndex}`;\r\n        }\r\n      });\r\n    }\r\n\r\n    return resource;\r\n  });\r\n}\r\n\r\nfunction generateDpResource(origResource, order, index, capabilityId, componentId, option) {\r\n  let dpResource = _.cloneDeep(origResource);\r\n  dpResource.order = order;\r\n\r\n  if (dpResource.group === null) delete dpResource.group;\r\n  if (dpResource.iconUrl === null) delete dpResource.iconUrl;\r\n  if (dpResource.label && dpResource.label.n === null) delete dpResource.label.n;\r\n  if (dpResource.label && dpResource.label.arguments === null) delete dpResource.label.arguments;\r\n  if (dpResource.range === null) delete dpResource.range;\r\n  if (dpResource.valueType === null) delete dpResource.valueType;\r\n  if (dpResource.visible === null) delete dpResource.visible;\r\n  if (dpResource.alternatives === null) delete dpResource.alternatives;\r\n  if (dpResource.controlType === null) delete dpResource.controlType;\r\n\r\n  //  Merge/Update manifest property from option\r\n  const capabilityPropertyMap = option.capabilityPropertyMap ?\r\n  option.capabilityPropertyMap[`${componentId}:${capabilityId}`] : {};\r\n  if (capabilityPropertyMap && capabilityPropertyMap.dpResources &&\r\n    capabilityPropertyMap.dpResources[index]) {\r\n    dpResource = _.mergeWith(dpResource, capabilityPropertyMap.dpResources[index],\r\n      manifestMergeFunc);\r\n  }\r\n\r\n  // Apply componentId to href path\r\n  const tgtHrefPattern = `/capability/${capabilityId}/${componentId}/`;\r\n  if (dpResource.link && dpResource.link.href && dpResource.link.href.indexOf(tgtHrefPattern) < 0) {\r\n    const rscIndex = dpResource.link.href.split('/').pop();\r\n    dpResource.link.href = `${tgtHrefPattern}${rscIndex}`;\r\n  }\r\n\r\n  return dpResource;\r\n}\r\n\r\n/**\r\n * Meta-Data Generator\r\n */\r\nclass MetaDataGenerator {\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @constructor\r\n   * @param {Object} config The Configuration\r\n   */\r\n  constructor(config) {\r\n    this.config = config || {};\r\n    this.resourceTypeMgr = new ResourceTypeManager(this.config);\r\n    this.baseDir = path.resolve(getRoot(), 'assets', 'meta_gen_resources');\r\n    this.mapToResourcesFile = path.resolve(getRoot(), 'assets', 'capabilities', 'mapToResources.json');\r\n    this.capabilityMap = {};\r\n    this.poCodeResources = [];\r\n  }\r\n\r\n\r\n  /**\r\n   * Generates UI Manifest from Device Profile\r\n   *\r\n   * @param {object} deviceProfile Device Profile model\r\n   * @param {object} option Generation option\r\n   * @returns {(Promise.<object|Error>)}\r\n   *   A promise to be resolved with generated UI Manifest model or rejected with an Error.\r\n   */\r\n  generateUiMetaFromDeviceProfile(deviceProfile, option = {}) {\r\n    const uiMeta = _.cloneDeep(DEFAULT_UI_META);\r\n    uiMeta.n = deviceProfile.name;\r\n    uiMeta.version = option.uiVersion || option.version || '0.0.1';\r\n    uiMeta.mnmn = (option.mnid !== null && option.mnid !== undefined) ?\r\n      option.mnid : (deviceProfile.metadata.mnmn || this.config.mnid);\r\n    uiMeta.vid = (option.vid !== null && option.vid !== undefined) ?\r\n      option.vid : deviceProfile.metadata.vid;\r\n\r\n    // update dpUri if specified\r\n    if (option.devicePlugin) {\r\n      uiMeta.dpInfo = [{\r\n        os: 'android',\r\n        dpType: 'vendorPlugIn',\r\n        dpUri: `wwst://${option.devicePlugin}`,\r\n      }, {\r\n        os: 'ios',\r\n        dpType: 'vendorPlugIn',\r\n        dpUri: `wwst://${option.devicePlugin}`,\r\n      }];\r\n    } else {\r\n      uiMeta.dpInfo = [{\r\n        os: 'android',\r\n        dpType: 'vendorPlugIn',\r\n        dpUri: ProjectConfigurator.ANDROID_GENERIC_DEVICE_PLUGIN_URI,\r\n      }, {\r\n        os: 'ios',\r\n        dpType: 'vendorPlugIn',\r\n        dpUri: ProjectConfigurator.IOS_GENERIC_DEVICE_PLUGIN_URI,\r\n      }];\r\n    }\r\n\r\n    // in case of capability model\r\n    let msCapability = option.msCapability;\r\n    if (msCapability && typeof msCapability === 'string') {\r\n      msCapability = msCapability.indexOf(':') < 0 ?\r\n        { id: msCapability, componentId: 'main' } :\r\n        { id: msCapability.split(':')[1], componentId: msCapability.split(':')[0] };\r\n    }\r\n    let maCapability = option.maCapability;\r\n    if (maCapability && typeof maCapability === 'string') {\r\n      maCapability = maCapability.indexOf(':') < 0 ?\r\n        { id: maCapability, componentId: 'main' } :\r\n        { id: maCapability.split(':')[1], componentId: maCapability.split(':')[0] };\r\n    }\r\n\r\n    if (!msCapability && deviceProfile.metadata.mainState) {\r\n      const ms = deviceProfile.metadata.mainState.split(':');\r\n      msCapability = { id: ms[1], componentId: ms[0] };\r\n    }\r\n    if (!maCapability && deviceProfile.metadata.mainAction) {\r\n      const ma = deviceProfile.metadata.mainAction.split(':');\r\n      maCapability = { id: ma[1], componentId: ma[0] };\r\n    }\r\n\r\n    return this.generateMainStateFromDeviceProfile(deviceProfile, msCapability, option)\r\n      .then((ms) => {\r\n        uiMeta.ms = ms;\r\n        return this.generateMainActionFromDeviceProfile(deviceProfile, maCapability, option);\r\n      })\r\n      .then((ma) => {\r\n        uiMeta.ma = ma;\r\n        return this.generateDisplayResourcesFromDeviceProfile(deviceProfile, option);\r\n      })\r\n      .then((dpResources) => {\r\n        uiMeta.dpResources = dpResources;\r\n        return this.generateLanguageFromDeviceProfile(deviceProfile, uiMeta.mnmn, uiMeta.vid);\r\n      })\r\n      .then((language) => {\r\n        uiMeta.language = language;\r\n        return uiMeta;\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Generates Voice Manifest from Device Profile\r\n   *\r\n   * @param {object} deviceProfile Device Profile model\r\n   * @param {object} option Generation option\r\n   * @returns {(Promise.<object|Error>)}\r\n   *   A promise to be resolved with generated Voice Manifest model or rejected with an Error.\r\n   */\r\n  generateVoiceMetaFromDeviceProfile(deviceProfile, option = {}) {\r\n    const voiceMeta = _.cloneDeep(DEFAULT_VOICE_META);\r\n    voiceMeta.n = deviceProfile.name;\r\n    voiceMeta.version = option.voiceVersion || option.version || '0.0.1';\r\n    voiceMeta.mnmn = (option.mnid !== null && option.mnid !== undefined) ?\r\n      option.mnid : (deviceProfile.metadata.mnmn || this.config.mnid);\r\n    voiceMeta.vid = (option.vid !== null && option.vid !== undefined) ?\r\n      option.vid : deviceProfile.metadata.vid;\r\n    voiceMeta.dalias = deviceProfile.name;\r\n    const metaDeviceType = deviceProfile.metadata.deviceType;\r\n    if (metaDeviceType) {\r\n      voiceMeta.dtype = metaDeviceType;\r\n    } else {\r\n      const metaOcfDeviceType = deviceProfile.metadata.ocfDeviceType;\r\n      const ocfDeviceType = metaOcfDeviceType ?\r\n        DeviceResourceManager.retrieveDeviceResourceType(metaOcfDeviceType) : null;\r\n      voiceMeta.dtype = ocfDeviceType ? ocfDeviceType.dtype : deviceProfile.name;\r\n    }\r\n\r\n    return this.generateVoiceSmlFromDeviceProfile(deviceProfile)\r\n      .then((sml) => {\r\n        voiceMeta.sml = sml;\r\n        return voiceMeta;\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Generates UI/Voice Manifest files from Device Profile\r\n   *\r\n   * @param {object} deviceProfile Device Profile model\r\n   * @param {string} outDir Output directory\r\n   * @param {object} option Generation option\r\n   * @returns {(Promise.<undefined|Error>)}\r\n   *   A promise to be resolved or rejected with an Error.\r\n   */\r\n  generateManifestFilesFromDeviceProfile(deviceProfile, outDir, option = {}) {\r\n    const uiManifestFile = pathUtil.resolve(outDir, ProjectConfigurator.UI_MANIFEST_FILE);\r\n    const voiceManifestFile = pathUtil.resolve(outDir, ProjectConfigurator.VOICE_MANIFEST_FILE);\r\n\r\n    return this.generateUiMetaFromDeviceProfile(deviceProfile, option)\r\n      .then(uiManifest => fs.writeFile(uiManifestFile, JSON.stringify(uiManifest, null, 2)))\r\n      .then(() => this.generateVoiceMetaFromDeviceProfile(deviceProfile, option))\r\n      .then(voiceManifest => fs.writeFile(voiceManifestFile,\r\n        JSON.stringify(voiceManifest, null, 2)));\r\n  }\r\n\r\n\r\n  /**\r\n   * Generates UI/Voice Manifest files from Project Path\r\n   *\r\n   * @param {object} option Generation option\r\n   * @returns {(Promise.<undefined|Error>)}\r\n   *   A promise to be resolved or rejected with an Error.\r\n   */\r\n  generateManifestFilesFromProjectPath(option = {}, projPath = process.cwd()) {\r\n    const deviceProfilePath = pathUtil.join(projPath, ProjectConfigurator.DEVICE_PROFILE_FILE);\r\n    const manifestPath = pathUtil.join(projPath, ProjectConfigurator.MANIFEST_DIR);\r\n    if (!fs.existsSync(deviceProfilePath) || !fs.existsSync(manifestPath)) throw new StError('NOT_IN_PROJECT_DIRECTORY');\r\n\r\n    const deviceProfile = fs.readJsonSync(deviceProfilePath);\r\n    const uiManifestFile = pathUtil.resolve(\r\n      ProjectConfigurator.MANIFEST_DIR, ProjectConfigurator.UI_MANIFEST_FILE);\r\n    const voiceManifestFile = pathUtil.resolve(\r\n      ProjectConfigurator.MANIFEST_DIR, ProjectConfigurator.VOICE_MANIFEST_FILE);\r\n\r\n    return this.generateUiMetaFromDeviceProfile(deviceProfile, option)\r\n      .then(uiManifest => fs.writeFile(uiManifestFile, JSON.stringify(uiManifest, null, 2)))\r\n      .then(() => this.generateVoiceMetaFromDeviceProfile(deviceProfile, option))\r\n      .then(voiceManifest => fs.writeFile(voiceManifestFile,\r\n        JSON.stringify(voiceManifest, null, 2)));\r\n  }\r\n\r\n\r\n  /**\r\n   * Generate ui-metadata from capability\r\n   * @param {string} capabilityId capability ID\r\n   * @param {string} componentId component ID\r\n   * @return {Promise.<Object|error>}\r\n   * A promise to be resolved with ui-medata object or to be rejected with an error.\r\n   */\r\n  generateUiMetaFromCapability(capabilityId, componentId, option = {}) {\r\n    const uiMeta = _.cloneDeep(DEFAULT_UI_META);\r\n    uiMeta.n = 'NoDeviceName';\r\n    uiMeta.version = '0.0.1';\r\n    uiMeta.mnmn = this.config.mnid;\r\n    uiMeta.vid = 'NoVid';\r\n\r\n    return this.retrieveCapabilityMapperFile(capabilityId, componentId, true)\r\n      .then((capMapInfo) => {\r\n        if (capMapInfo.ms && capMapInfo.ms.length > 0) {\r\n          uiMeta.ms = generateMainStateResource(capMapInfo.ms, capabilityId, componentId, option);\r\n        }\r\n        if (capMapInfo.ma && capMapInfo.ma.length > 0) {\r\n          uiMeta.ma = generateMainActionResource(capMapInfo.ma, capabilityId, componentId, option);\r\n        }\r\n\r\n        if (capMapInfo.dpResources && capMapInfo.dpResources.length > 0) {\r\n          uiMeta.dpResources = [];\r\n          let order = 1;\r\n          capMapInfo.dpResources.forEach((resource, index) => {\r\n            const dpResource = generateDpResource(resource, order,\r\n              index, capabilityId, componentId, option);\r\n            order += 1;\r\n            uiMeta.dpResources.push(dpResource);\r\n          });\r\n        }\r\n\r\n        return uiMeta;\r\n      });\r\n  }\r\n\r\n  generateVoiceMetaFromCapability(capabilityId, componentId) {\r\n    const voiceMeta = _.cloneDeep(DEFAULT_VOICE_META);\r\n    voiceMeta.n = 'NoDeviceName';\r\n    voiceMeta.version = '0.0.1';\r\n    voiceMeta.mnmn = this.config.mnid;\r\n    voiceMeta.vid = 'NoVid';\r\n    voiceMeta.dalias = 'NoDeviceAlias';\r\n    voiceMeta.dtype = 'NoDeviceType';\r\n\r\n    return this.generateVoiceSmlFromCapability(capabilityId, componentId)\r\n      .then((sml) => {\r\n        voiceMeta.sml = sml;\r\n        return voiceMeta;\r\n      });\r\n  }\r\n\r\n\r\n  static getMainAction(uiManifest) {\r\n    if (!uiManifest.ma || !uiManifest.ma[0] || !uiManifest.ma[0].link ||\r\n      !uiManifest.ma[0].link.href) return null;\r\n\r\n    // ex) /capability/switch/main/0 => [ '', 'capability', 'switch', 'main', '0' ]\r\n    const hrefTokens = uiManifest.ma[0].link.href.split('/');\r\n    if (!hrefTokens[2] || !hrefTokens[3]) return null;\r\n\r\n    return {\r\n      id: hrefTokens[2],\r\n      componentId: hrefTokens[3],\r\n    };\r\n  }\r\n\r\n\r\n  static getMainState(uiManifest) {\r\n    if (!uiManifest.ms || !uiManifest.ms[0] || !uiManifest.ms[0].label ||\r\n      !uiManifest.ms[0].label.arguments[0] ||\r\n      !uiManifest.ms[0].label.arguments[0].href) return null;\r\n\r\n    // ex) /capability/switch/main/0 => [ '', 'capability', 'switch', 'main', '0' ]\r\n    const hrefTokens = uiManifest.ms[0].label.arguments[0].href.split('/');\r\n    if (!hrefTokens[2] || !hrefTokens[3]) return null;\r\n\r\n    return {\r\n      id: hrefTokens[2],\r\n      componentId: hrefTokens[3],\r\n    };\r\n  }\r\n\r\n\r\n  generateMainStateFromDeviceProfile(deviceType, msCapability, option = {}) {\r\n    if (!msCapability) {\r\n      return Promise.resolve([]);\r\n    }\r\n\r\n    if (!msCapability.id) {\r\n      return Promise.reject(new StError('INVALID_CAPABILITY'));\r\n    }\r\n\r\n    const component = deviceType.components.find(comp => comp.id === msCapability.componentId);\r\n    if (!component) {\r\n      return Promise.reject(new StError('INVALID_COMPONENT_ID', msCapability.componentId));\r\n    }\r\n\r\n    const capability = component.capabilities.find(cap => cap.id === msCapability.id);\r\n    if (!capability) {\r\n      return Promise.reject(new StError('INVALID_COMPONENT_ID', `${msCapability.componentId}:${msCapability.id}`));\r\n    }\r\n\r\n    return this.retrieveCapabilityMapperFile(msCapability.id, component.id, true)\r\n      .then((capMapInfo) => {\r\n        if (!capMapInfo.ms || capMapInfo.ms.length === 0) {\r\n          throw new StError('INVALID_MAIN_STATE_CAPABILITY', msCapability.id);\r\n        }\r\n        return generateMainStateResource(capMapInfo.ms, msCapability.id, component.id, option);\r\n      });\r\n  }\r\n\r\n\r\n  generateMainActionFromDeviceProfile(deviceType, maCapability, option = {}) {\r\n    if (!maCapability || !maCapability.id) {\r\n      return Promise.resolve([]);\r\n    }\r\n\r\n    const component = deviceType.components.find(comp => comp.id === maCapability.componentId);\r\n    if (!component) {\r\n      return Promise.reject(new StError('INVALID_COMPONENT_ID', maCapability.componentId));\r\n    }\r\n\r\n    const capability = component.capabilities.find(cap => cap.id === maCapability.id);\r\n    if (!capability) {\r\n      return Promise.reject(new StError('INVALID_COMPONENT_ID', `${maCapability.componentId}:${maCapability.id}`));\r\n    }\r\n\r\n    return this.retrieveCapabilityMapperFile(maCapability.id, component.id, true)\r\n      .then((capMapInfo) => {\r\n        if (!capMapInfo.ma || capMapInfo.ma.length === 0) {\r\n          throw new StError('INVALID_MAIN_ACTION_CAPABILITY', maCapability.id);\r\n        }\r\n        return generateMainActionResource(capMapInfo.ma, maCapability.id, component.id, option);\r\n      });\r\n  }\r\n\r\n\r\n  generateDisplayResourcesFromDeviceProfile(deviceProfile, option = {}) {\r\n    const mainComponent = deviceProfile.components.find(comp => comp.id === 'main');\r\n    const subComponents = deviceProfile.components.filter(comp => comp.id !== 'main');\r\n\r\n    const dpResources = [];\r\n    let order = 1;\r\n    return Promise.each(mainComponent.capabilities,\r\n      capability => this.retrieveCapabilityMapperFile(capability.id, 'main', false)\r\n        .then(capMapInfo => capMapInfo.dpResources.forEach((resource, index) => {\r\n          const dpResource = generateDpResource(resource, order,\r\n            index, capability.id, 'main', option);\r\n          order += 1;\r\n          dpResources.push(dpResource);\r\n        })))\r\n    .then(() => Promise.each(subComponents,\r\n      component => Promise.each(component.capabilities,\r\n        capability => this.retrieveCapabilityMapperFile(capability.id, component.id, true)\r\n          .then(capMapInfo => capMapInfo.dpResources.forEach((resource, index) => {\r\n            const dpResource = generateDpResource(resource, order,\r\n              index, capability.id, component.id, option);\r\n            order += 1;\r\n            dpResources.push(dpResource);\r\n          })))))\r\n      .then(() => dpResources);\r\n  }\r\n\r\n\r\n  generateLanguageFromDeviceProfile(deviceProfile, mnid, vid) {\r\n    const language = [];\r\n    return Promise.each(deviceProfile.components,\r\n      component => Promise.each(component.capabilities,\r\n        capability => this.retrieveCapabilityMapperFile(capability.id, component.id, true)\r\n          .then(capMapInfo => capMapInfo.language.forEach((lang) => {\r\n            const dstLang = language.find(l => l.locale === lang.locale);\r\n            if (dstLang) {\r\n              dstLang.poCodes = _.unionWith(dstLang.poCodes, lang.poCodes, _.isEqual);\r\n            } else {\r\n              const newLang = _.cloneDeep(lang);\r\n              newLang.mnmn = (mnid !== null && mnid !== undefined) ?\r\n                mnid : (deviceProfile.metadata.mnmn || this.config.mnid);\r\n              newLang.vid = (vid !== null && vid !== undefined) ?\r\n                vid : deviceProfile.metadata.vid;\r\n              language.push(newLang);\r\n            }\r\n          }))))\r\n      .then(() => {\r\n        const defaultLang = language[0];\r\n        if (!defaultLang) return Promise.resolve();\r\n\r\n        return this.retrieveAllPoCodeResources().each((res) => {\r\n          if (res.locale === defaultLang.locale) return;\r\n          const newLang = {\r\n            locale: res.locale,\r\n            poCodes: defaultLang.poCodes\r\n              .map(poCode => ({\r\n                po: poCode.po,\r\n                label: res.poCodes[poCode.po] || poCode.label,\r\n              })),\r\n            version: defaultLang.version,\r\n            mnmn: defaultLang.mnmn,\r\n            vid: defaultLang.vid,\r\n          };\r\n          language.push(newLang);\r\n        });\r\n      })\r\n      .then(() => language);\r\n  }\r\n\r\n\r\n  generateVoiceSmlFromDeviceProfile(deviceProfile) {\r\n    const sml = [];\r\n    const addedCapabilities = {};\r\n    const mainComponent = deviceProfile.components.find(comp => comp.id === 'main');\r\n    const subComponents = deviceProfile.components.filter(comp => comp.id !== 'main');\r\n\r\n    return Promise.each(mainComponent.capabilities,\r\n      capability => this.retrieveCapabilityMapperFile(capability.id, 'main', false)\r\n        .then((capMapInfo) => {\r\n          if (capMapInfo.voiceCapability && !addedCapabilities[capability.id] &&\r\n            Object.keys(capMapInfo.voiceCapability).length > 0) {\r\n            if (Array.isArray(capMapInfo.voiceCapability)) {\r\n              capMapInfo.voiceCapability.forEach(\r\n                voiceCapability => sml.push(voiceCapability));\r\n            } else {\r\n              sml.push(capMapInfo.voiceCapability);\r\n            }\r\n            addedCapabilities[capability.id] = true;\r\n          }\r\n        }))\r\n    .then(() => Promise.each(subComponents,\r\n      component => Promise.each(component.capabilities,\r\n        capability => this.retrieveCapabilityMapperFile(capability.id, component.id, true)\r\n          .then((capMapInfo) => {\r\n            if (capMapInfo.voiceCapability && !addedCapabilities[capability.id] &&\r\n              Object.keys(capMapInfo.voiceCapability).length > 0) {\r\n              const origCapability = capMapInfo.voiceCapability;\r\n              if (Array.isArray(origCapability)) {\r\n                origCapability.forEach(voiceCapability =>\r\n                  sml.push(voiceCapability));\r\n              } else {\r\n                sml.push(origCapability);\r\n              }\r\n              addedCapabilities[capability.id] = true;\r\n            }\r\n          }))))\r\n      .then(() => sml);\r\n  }\r\n\r\n\r\n  generateVoiceSmlFromCapability(capabilityId, componentId) {\r\n    const sml = [];\r\n    const addedCapabilities = {};\r\n\r\n    return this.retrieveCapabilityMapperFile(capabilityId, componentId, true)\r\n      .then((capMapInfo) => {\r\n        if (capMapInfo.voiceCapability && !addedCapabilities[capabilityId] &&\r\n          Object.keys(capMapInfo.voiceCapability).length > 0) {\r\n          const origCapability = capMapInfo.voiceCapability;\r\n          if (Array.isArray(origCapability)) {\r\n            origCapability.forEach(voiceCapability =>\r\n              sml.push(voiceCapability));\r\n          } else {\r\n            sml.push(origCapability);\r\n          }\r\n          addedCapabilities[capabilityId] = true;\r\n        }\r\n      })\r\n      .then(() => sml);\r\n  }\r\n\r\n  retrieveCapabilityMapperFile(capabilityId, componentId = 'main', useDefaultComponent) {\r\n    if (this.capabilityMap[capabilityId] && this.capabilityMap[capabilityId][componentId]) {\r\n      return Promise.resolve(this.capabilityMap[capabilityId][componentId]);\r\n    }\r\n\r\n    let mapperFile;\r\n    return this.getMapperFileFromCapability(capabilityId, componentId)\r\n      .then((mapperFilePath) => {\r\n        mapperFile = mapperFilePath;\r\n        return fs.exists(mapperFile);\r\n      })\r\n      .then((exists) => {\r\n        if (!exists) throw new StError('CANNOT_FIND_MAPPER_FILE', mapperFile);\r\n\r\n        return fs.readFile(mapperFile, 'utf8')\r\n          .then((data) => {\r\n            const capabilityMetaInfo = JSON.parse(data);\r\n            // add meta info to cache\r\n            if (!this.capabilityMap[capabilityId]) this.capabilityMap[capabilityId] = {};\r\n            this.capabilityMap[capabilityId][componentId] = capabilityMetaInfo;\r\n            return capabilityMetaInfo;\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        if (!useDefaultComponent) throw err;\r\n        logger.warn(`Mapping capability to resource failed... ${componentId}:${capabilityId}`);\r\n        logger.info('Retrying resource mapping with \"main\" component...');\r\n        return this.retrieveCapabilityMapperFile(capabilityId, 'main', false)\r\n          .then((capabilityMetaInfo) => {\r\n            const srcHrefPattern = `/capability/${capabilityId}/main/`;\r\n            const tgtHrefPattern = `/capability/${capabilityId}/${componentId}/`;\r\n\r\n            return JSON.parse(JSON.stringify(capabilityMetaInfo)\r\n              .split(srcHrefPattern).join(tgtHrefPattern));\r\n          })\r\n          .then((capabilityMetaInfo) => {\r\n            // add meta info to cache\r\n            if (!this.capabilityMap[capabilityId]) this.capabilityMap[capabilityId] = {};\r\n            this.capabilityMap[capabilityId][componentId] = capabilityMetaInfo;\r\n            return capabilityMetaInfo;\r\n          });\r\n      });\r\n  }\r\n\r\n  getMapperFileFromCapability(capabilityId, componentId) {\r\n    if (!this.capability2MapperFile) {\r\n      return fs.readFile(this.mapToResourcesFile, 'utf8')\r\n        .then((data) => {\r\n          const mapToResources = JSON.parse(data);\r\n          this.capability2MapperFile = {};\r\n          Object.keys(mapToResources).forEach((capId) => {\r\n            this.capability2MapperFile[capId] = {};\r\n            mapToResources[capId].forEach((resourceInfo) => {\r\n              const filePath = this.getResourceFilePathFromTitle(resourceInfo.title);\r\n              this.capability2MapperFile[capId][resourceInfo.component] = filePath;\r\n            });\r\n          });\r\n\r\n          return this.getMapperFileFromCapability(capabilityId, componentId);\r\n        });\r\n    }\r\n\r\n    if (this.capability2MapperFile[capabilityId] &&\r\n      this.capability2MapperFile[capabilityId][componentId]) {\r\n      return Promise.resolve(this.capability2MapperFile[capabilityId][componentId]);\r\n    }\r\n    return Promise.reject(new StError('CANNOT_FIND_CAPABILITY_MAPPER_FILE', `${capabilityId}:${componentId}`));\r\n  }\r\n\r\n  getResourceFilePathFromTitle(title) {\r\n    const fileName = title.split(' ')\r\n      .map(tok => `${tok.charAt(0).toUpperCase()}${tok.substr(1)}`)\r\n      .join('');\r\n\r\n    return path.resolve(this.baseDir, 'resource-names', `${fileName}.json`);\r\n  }\r\n\r\n\r\n  retrieveAllPoCodeResources() {\r\n    if (this.poCodeResources.length > 0) return Promise.resolve(this.poCodeResources);\r\n\r\n    return fs.readFile(path.resolve(this.baseDir, 'po-code-resources', 'newLocale.json'), 'utf8')\r\n      .then((localeStr) => {\r\n        const localeJson = JSON.parse(localeStr);\r\n        return Object.keys(localeJson).map(locale => ({\r\n          locale,\r\n          poCodes: localeJson[locale],\r\n        }));\r\n      })\r\n      .then((resources) => {\r\n        this.poCodeResources = resources;\r\n        return resources;\r\n      });\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(MetaDataGenerator, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/MetaDataGenerator.js\n// module id = 28\n// module chunks = 0","/*  eslint global-require: 0  */\r\nconst getRoot = require('../common/util').getRoot;\r\nconst fs = require('./FileSystemHandler');\r\nconst path = require('path');\r\nconst union = require('lodash/union');\r\nconst Promise = require('bluebird');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\nlet ramlParser;\r\n\r\nfunction initModule() {\r\n  // It consumes about 0.7 sec on linux to load this module.\r\n  // So it's loaded dynamically.\r\n  ramlParser = require('raml-1-parser');\r\n}\r\n\r\nfunction getInterfacesFromTraits(traits) {\r\n  const interfaces = {};\r\n  traits.forEach((trait) => {\r\n    const name = Object.keys(trait)[0]; // NOTE: assume only one key in trait item\r\n    if (trait[name].queryParameters.if) { // NOTE: get interface only\r\n      interfaces[name] = trait[name].queryParameters.if.enum;\r\n    }\r\n  });\r\n  return interfaces;\r\n}\r\n\r\nfunction getPropertiesFromAllOf(allOf, refJsonFileMap) {\r\n  let properties = {};\r\n  allOf.forEach((ref) => {\r\n    const refToks = ref.$ref.split('#/definitions/');\r\n    if (!refToks || refToks.length < 2) return;\r\n    const refFile = refToks[0];\r\n    const refRt = refToks[1];\r\n\r\n    if (!refJsonFileMap[refFile] || !refJsonFileMap[refFile].definitions ||\r\n      !refJsonFileMap[refFile].definitions[refRt]) return;\r\n\r\n    const trgtDefinitions = refJsonFileMap[refFile].definitions[refRt];\r\n    if (trgtDefinitions.properties) {\r\n      properties = Object.assign(properties, trgtDefinitions.properties);\r\n    } else if (trgtDefinitions.allOf) {\r\n      properties = Object.assign(properties,\r\n        getPropertiesFromAllOf(trgtDefinitions.allOf, refJsonFileMap));\r\n    }\r\n  });\r\n\r\n  return properties;\r\n}\r\n\r\n\r\nfunction mapToResourceType(rootNode, rt, refJsonFileMap) {\r\n  const root = rootNode.toJSON();\r\n\r\n  // set displayName, description\r\n  const displayName = root.resources[0].displayName;\r\n  const description = root.resources[0].description;\r\n\r\n  // set is\r\n  const interfaces = getInterfacesFromTraits(root.traits);\r\n  let is = [];\r\n  root.resources[0].is.forEach((name) => { // NOTE: assume always only one resource exist\r\n    is = union(is, interfaces[name]);\r\n  });\r\n\r\n  // set methods\r\n  const methods = {};\r\n  root.resources[0].methods.forEach((api) => { // NOTE: assume always only one resource exist\r\n    // find schema to retrieve properties\r\n    let schemaNameOrContent;\r\n    let schema;\r\n    let example;\r\n\r\n    if (api.body) {\r\n      // NOTE: assume response type as always 'appliction/json'\r\n      schemaNameOrContent = api.body['application/json'].schema;\r\n      example = api.body['application/json'].example;\r\n    } else if (api.responses['200'].body) {\r\n      schemaNameOrContent = api.responses['200'].body['application/json'].schema;\r\n      example = api.responses['200'].body['application/json'].example;\r\n    }\r\n\r\n    if (schemaNameOrContent) {\r\n      try {\r\n        schema = JSON.parse(schemaNameOrContent);\r\n      } catch (e) {\r\n        if (root.schemas) {\r\n          const schemaObj = root.schemas.find(s => Object.keys(s)[0] === schemaNameOrContent);\r\n          const schemaObjKey = Object.keys(schemaObj)[0];\r\n          schema = JSON.parse(schemaObj[schemaObjKey]);\r\n        }\r\n      }\r\n\r\n      if (schema) {\r\n        const definitions = schema.definitions[rt];\r\n        if (definitions && !definitions.properties && definitions.allOf) {\r\n          definitions.properties = getPropertiesFromAllOf(definitions.allOf, refJsonFileMap);\r\n        }\r\n      } else {\r\n        throw new StError('CANNOT_PARSE_SCHEMA');\r\n      }\r\n    }\r\n\r\n    methods[api.method] = {};\r\n    // set methods.body or methods.response. Property name is method name.\r\n    if (api.body) {\r\n      methods[api.method].body = schema.definitions[rt].properties;\r\n    } else {\r\n      methods[api.method].response = schema.definitions[rt].properties;\r\n    }\r\n\r\n    if (example) {\r\n      try {\r\n        methods[api.method].example = JSON.parse(example);\r\n      } catch (e) {\r\n        throw new StError('CANNOT_PARSE_EXAMPLE');\r\n      }\r\n    }\r\n\r\n    // set methods.required\r\n    methods[api.method].required = schema.required;\r\n  });\r\n\r\n  return { rt, displayName, description, is, methods };\r\n}\r\n\r\nclass ResourceTypeManager {\r\n  constructor() {\r\n    this.refJsonFileMap = null;\r\n  }\r\n\r\n  init() {\r\n    initModule();\r\n    this.resourceTypeDirPath = path.resolve(getRoot(), 'assets/resource_types/');\r\n  }\r\n\r\n  /**\r\n   * List resource type\r\n   * @param {boolean} [includeDetail=false] include all details\r\n   * @returns {(Promise<Object[]|Error>)} A promise to be resolved with\r\n   * array of resource type object or to be rejected with an error.\r\n   * The resource type object has 'id' property.\r\n   */\r\n  retrieveResourceTypeList(includeDetail = false) {\r\n    // NOTE. if includeDetail option enabled, refJsonFileMap should be initialized\r\n    return (includeDetail ? this.initRefJsonFileMap() : Promise.resolve())\r\n      .then(() => fs.readDir(this.resourceTypeDirPath))\r\n      .then((files) => {\r\n        const ramlFiles = files.filter(file => (path.extname(file) === '.raml'));\r\n        const resourceTypes = ramlFiles.map(file => ({ id: path.basename(file, '.raml') }));\r\n        return resourceTypes;\r\n      })\r\n      .then((resourceTypes) => {\r\n        if (!includeDetail) return resourceTypes;\r\n        return Promise.map(resourceTypes, rt => this.retrieveResourceType(rt.id))\r\n          .then(rts => rts.map(rt => Object.assign({}, rt, { id: rt.rt })));\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Describe resource type\r\n   * @param {string} rt The name of the resource type.\r\n   * @returns {Object} Object describes resource type.\r\n   * It has five properties. 'rt', 'displayName', 'description', 'is' and 'methods'.\r\n   * The 'is' is array of string.\r\n   * The 'method' is an object that describes api such as 'get', 'post' methods\r\n   * and properties in 'body', 'response'.\r\n   */\r\n  retrieveResourceType(rt) {\r\n    const rPath = this.resourceTypeDirPath;\r\n    return this.initRefJsonFileMap()\r\n      .then(() => fs.readFile(path.resolve(rPath, `${rt}.raml`)))\r\n      .then(buffer => (\r\n        ramlParser.parseRAML(buffer.toString(), {\r\n          httpResolver: {\r\n            // NOTE: RAML resource URL is not real. It makes the http request spend a lot of time.\r\n            // So, it fails instantly to avoid spending time.\r\n            getResourceAsync: () => Promise.reject(new StError('AVOID_TIME_OUT')),\r\n          },\r\n          fsResolver: {\r\n            // NOTE: This is for dereferencing with relative path.\r\n            contentAsync: (p) => {\r\n              const fileName = path.basename(p);\r\n\r\n              const initialized = this.refJsonFileMap[fileName];\r\n              if (initialized) return Promise.resolve(JSON.stringify(initialized));\r\n\r\n              const relPath = path.resolve(rPath, fileName);\r\n              return fs.readFile(relPath, 'utf8');\r\n            },\r\n          },\r\n        })\r\n      ))\r\n      .catch((e) => { throw new StError('CANNOT_PARSE_RAML', e.message); })\r\n      .then(rootNode => mapToResourceType(rootNode, rt, this.refJsonFileMap));\r\n  }\r\n\r\n  initRefJsonFileMap() {\r\n    const rPath = this.resourceTypeDirPath;\r\n    if (this.refJsonFileMap) return Promise.resolve();\r\n\r\n    this.refJsonFileMap = {};\r\n    return fs.readDir(this.resourceTypeDirPath)\r\n      .then((files) => {\r\n        const jsonFiles = files.filter(file => (path.extname(file) === '.json'));\r\n        return Promise.each(jsonFiles, jsonFile => (\r\n          fs.readJson(path.resolve(rPath, jsonFile))\r\n            .then((json) => {\r\n              this.refJsonFileMap[path.basename(jsonFile)] = json;\r\n            })));\r\n      });\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(ResourceTypeManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/ResourceTypeManager.js\n// module id = 29\n// module chunks = 0","module.exports = require(\"xml2js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"xml2js\"\n// module id = 30\n// module chunks = 0","const WebConsoleDeviceProfile = require('./WebConsoleDeviceProfile');\r\nconst WebConsoleSmartApp = require('./WebConsoleSmartApp');\r\nconst WebConsolePlugin = require('./WebConsoleDevicePlugin');\r\nconst WebConsoleCatalog = require('./WebConsoleCatalog');\r\nconst WebConsoleManifest = require('./WebConsoleManifest');\r\n\r\nconst TYPE = Object.freeze({\r\n  CLOUD_CONNECTED: 'Cloud-Connected',\r\n  AUTOMATION: 'Automation',\r\n  C2C: 'Cloud-to-Cloud',\r\n  SERVICE: 'Service Plugin',\r\n});\r\n\r\nconst STATUS = Object.freeze({\r\n  ALPHA: 'Self-Published',\r\n  RC: 'Certification-Requested',\r\n});\r\n\r\n/**\r\n * Data model that contains IOT Console Project information\r\n *\r\n * @property {string} id Project ID\r\n * @property {string} name Project name\r\n * @property {string} description Project description\r\n * @property {string} type Project type\r\n * @property {WebConsoleDeviceProfile} deviceProfile Device Profile information\r\n * @property {WebConsoleCatalog} catalog Catalog\r\n * @property {WebConsoleManifest} uiManifest UI Manfiest\r\n * @property {WebConsoleManifest} voiceManifest Voice Manifest\r\n * @property {WebConsoleDevicePlugin} devicePlugin Device Plugin information\r\n * @property {string} status Project status(ALPHA/RC/GOLD/PUBLISHED)\r\n */\r\nclass WebConsoleProject {\r\n  /**\r\n   * @param {string} id Project ID\r\n   * @param {string} name Project name\r\n   * @param {string} description Project description\r\n   * @param {string} type Project type\r\n   */\r\n  constructor(id, name, description, type) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.description = description;\r\n    this.type = type || TYPE.CLOUD_CONNECTED;\r\n    switch (this.type) {\r\n      case TYPE.AUTOMATION:\r\n        this.status = null;\r\n        this.connectorApp = null;\r\n        this.appCatalog = null;\r\n        break;\r\n      case TYPE.SERVICE:\r\n        this.status = null;\r\n        this.connectorApp = null;\r\n        this.plugin = null;\r\n        this.appCatalog = null;\r\n        break;\r\n      case TYPE.CLOUD_CONNECTED:\r\n      default:\r\n        this.status = null;\r\n        this.deviceProfile = null;\r\n        this.uiManifest = null;\r\n        this.voiceManifest = null;\r\n        this.devicePlugin = null;\r\n        this.prodCatalog = null;\r\n    }\r\n  }\r\n\r\n\r\n  static createFromResp(resp) {\r\n    const project = new WebConsoleProject(resp.pjtId, resp.pjtNm,\r\n      resp.pjtDsc, TYPE.CLOUD_CONNECTED);\r\n\r\n    project.status = project.certificated ? STATUS.RC : STATUS.ALPHA;\r\n\r\n    return project;\r\n  }\r\n\r\n  static createFromCloudConnectedResp(resp) {\r\n    const project = new WebConsoleProject(resp.pjtId, resp.pjtNm,\r\n      resp.pjtDsc, TYPE.CLOUD_CONNECTED);\r\n\r\n    project.status = resp.devStatNm;\r\n    project.deviceProfile =\r\n      WebConsoleDeviceProfile.createFromCloudConnectedResp(resp.deviceProfile);\r\n    if (resp.prodCatalog) {\r\n      project.prodCatalog = {\r\n        id: resp.prodCatalog.ctlgId,\r\n        modelCd: resp.prodCatalog.modelCd,\r\n        easysetupId: resp.prodCatalog.easysetupId,\r\n        status: resp.prodCatalog.devStatNm,\r\n        whProdId: resp.prodCatalog.refProdUuid,\r\n        whGrpId: resp.prodCatalog.refGrpUuid,\r\n        refWhAppId: resp.prodCatalog.refAppUuid,\r\n      };\r\n    }\r\n    if (resp.uiManifest) {\r\n      project.uiManifest = WebConsoleManifest.createFromCloudConnectedResp(resp.uiManifest);\r\n    }\r\n    if (resp.voiceManifest) {\r\n      project.voiceManifest = WebConsoleManifest.createFromCloudConnectedResp(resp.voiceManifest);\r\n    }\r\n    if (resp.devicePlugin) {\r\n      project.devicePlugin = WebConsolePlugin.createFromResp(resp.devicePlugin);\r\n    }\r\n\r\n    return project;\r\n  }\r\n\r\n  static createListFromCloudConnectedResp(resp) {\r\n    return resp.rows.map((pjt) => {\r\n      const webPrj = new WebConsoleProject(pjt.pjtId, pjt.pjtNm, '',\r\n        TYPE.CLOUD_CONNECTED);\r\n      webPrj.status = pjt.devStatNm || 'Unknown';\r\n      return webPrj;\r\n    });\r\n  }\r\n\r\n\r\n  static createFromAutomationResp(resp) {\r\n    const project = new WebConsoleProject(resp.pjtId, resp.pjtNm, resp.pjtDsc,\r\n      TYPE.AUTOMATION);\r\n\r\n    project.status = resp.devStatNm;\r\n    project.connectorApp = WebConsoleSmartApp.createFromResp(resp.connectorApp);\r\n    project.appCatalog = WebConsoleCatalog.createFromAutomationResp(resp.appCatalog);\r\n\r\n    return project;\r\n  }\r\n\r\n  static createListFromAutomationResp(resp) {\r\n    return resp.rows.map((pjt) => {\r\n      const webPrj = new WebConsoleProject(pjt.pjtId, pjt.pjtNm,\r\n        pjt.pjtDsc, TYPE.AUTOMATION);\r\n      webPrj.status = pjt.devStatNm;\r\n      return webPrj;\r\n    });\r\n  }\r\n\r\n\r\n  static createFromSvcPlgnResp(resp, includesClientSecret = false) {\r\n    const project = new WebConsoleProject(resp.pjtId, resp.pjtNm,\r\n      resp.pjtDsc, TYPE.SERVICE);\r\n\r\n    project.status = resp.devStatNm;\r\n    project.connectorApp = WebConsoleSmartApp.createFromResp(resp.connectorApp);\r\n    if (resp.plugin) {\r\n      project.plugin = WebConsolePlugin.createFromResp(resp.plugin);\r\n    }\r\n    project.appCatalog = WebConsoleCatalog.createFromServicePluginResp(resp.appCatalog);\r\n    if (includesClientSecret) {\r\n      project.oauthClientId = resp.connectorApp.clntId;\r\n      project.oauthClientSecret = resp.connectorApp.clntSec;\r\n    }\r\n    return project;\r\n  }\r\n\r\n  static createListFromSvcPlgnResp(resp) {\r\n    return resp.rows.map((pjt) => {\r\n      const webPrj = new WebConsoleProject(pjt.pjtId, pjt.pjtNm,\r\n        pjt.pjtDsc, TYPE.SERVICE);\r\n      webPrj.status = pjt.devStatNm;\r\n      return webPrj;\r\n    });\r\n  }\r\n\r\n  toCreateRequestBody() {\r\n    return {\r\n      pjtNm: this.name,\r\n      pjtDsc: this.description,\r\n    };\r\n  }\r\n\r\n\r\n  toUpdateRequestBody() {\r\n    return {\r\n      pjtNm: this.name,\r\n      pjtDsc: this.description,\r\n    };\r\n  }\r\n}\r\nWebConsoleProject.TYPE = TYPE;\r\nWebConsoleProject.STATUS = STATUS;\r\n\r\nmodule.exports = WebConsoleProject;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/WebConsoleProject.js\n// module id = 31\n// module chunks = 0","module.exports = require(\"fs\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fs\"\n// module id = 32\n// module chunks = 0","const _ = require('lodash');\r\nconst crypto = require('crypto');\r\nconst cbor = require('cbor');\r\nconst CoapOptions = require('./CoapOptions');\r\nconst StError = require('../errors/StError');\r\n\r\n// to indicate start of payload, one byte 0xFF\r\nconst PAYLOAD_MARKER = 0xFF;\r\nconst PAYLOAD_MARKER_BUFFER = Buffer.alloc(1, PAYLOAD_MARKER);\r\n\r\nconst STATUS_CODE = Object.freeze({\r\n  // 2.xx\r\n  CREATED: 65,\r\n  DELETED: 66,\r\n  VALID: 67,\r\n  CHANGED: 68,\r\n  CONTENT: 69,\r\n  // 4.xx\r\n  BAD_REQUEST: 128,\r\n  UNAUTHORIZED: 129,\r\n  BAD_OPTION: 130,\r\n  FORBIDDEN: 131,\r\n  NOT_FOUND: 132,\r\n  METHOD_NOT_ALLOWED: 133,\r\n  NOT_ACCEPTABLE: 134,\r\n  PRECONDITION_FAILED: 140,\r\n  REQUEST_ENTITY_TOO_LARGE: 141,\r\n  UNSUPPORTED_CONTENT_FORMAT: 143,\r\n  // 5.xx\r\n  INTERNAL_SERVER_ERROR: 160,\r\n  NOT_IMPLEMENTED: 161,\r\n  BAD_GATEWAY: 162,\r\n  SERVICE_UNAVAILABLE: 163,\r\n  GATEWAY_TIMEOUT: 164,\r\n  PROXYING_NOT_SUPPORTED: 165,\r\n});\r\n\r\nconst codeToString = Object.freeze({\r\n  // RFC 7252: 5.8\r\n  1: 'GET',\r\n  2: 'POST',\r\n  3: 'PUT',\r\n  4: 'DELETE',\r\n  // RFC 7252: 5.9\r\n  // 2.xx\r\n  65: 'Created',\r\n  66: 'Deleted',\r\n  67: 'Valid',\r\n  68: 'Changed',\r\n  69: 'Content',\r\n  // 4.xx\r\n  128: 'Bad Request',\r\n  129: 'Unauthorized',\r\n  130: 'Bad Option',\r\n  131: 'Forbidden',\r\n  132: 'Not Found',\r\n  133: 'Method Not Allowed',\r\n  134: 'Not Acceptable',\r\n  140: 'Precondition Failed',\r\n  141: 'Request Entity Too Large',\r\n  143: 'Unsupported Content-Format',\r\n  // 5.xx\r\n  160: 'Internal Server Error',\r\n  161: 'Not Implemented',\r\n  162: 'Bad Gateway',\r\n  163: 'Service Unavailable',\r\n  164: 'Gateway Timeout',\r\n  165: 'Proxying Not Supported',\r\n  // 7.xx: Coap over TCP 10.1\r\n  225: 'CSM',\r\n  226: 'Ping',\r\n  227: 'Pong',\r\n  228: 'Release',\r\n  229: 'Abort',\r\n});\r\n\r\nfunction serializePayload(payload, format) {\r\n  // must not be 'undefined', 'undefined' property is ignored in serialization step\r\n  const normalized = _.mapValues(payload, v => (v === undefined ? '' : v));\r\n  switch (format) {\r\n    case undefined:\r\n    case CoapOptions.CONTENT_FORMAT.CBOR:\r\n      return cbor.encode(normalized);\r\n    case CoapOptions.CONTENT_FORMAT.JSON:\r\n      return Buffer.from(JSON.stringify(normalized));\r\n    default:\r\n      throw new StError('UNSUPPORTED_CONTENT_FORMAT', format);\r\n  }\r\n}\r\n\r\n/**\r\n * Decoder/encoder for CoAP over TCP\r\n */\r\nclass CoapMessage {\r\n\r\n  /**\r\n   * @constructor\r\n   * @param {object} content The contents of the message to be encoded/decoded.\r\n   * @param {number} content.code The code of the message.\r\n   * @param {Buffer} content.token Eight bytes buffer to identify message.\r\n   * @param {CoapOptions} content.options Options to be included in message.\r\n   * @param {object} [content.payload] The body of the message.\r\n   */\r\n  constructor({ code, token, options, payload }) {\r\n    this.code = code;\r\n    if (token) this.token = token;\r\n    else this.token = crypto.randomBytes(8);\r\n    this.options = options;\r\n    this.payload = payload;\r\n  }\r\n\r\n  // body = options + playload\r\n  makeBody() {\r\n    const buffers = [];\r\n    let length = 0;\r\n    const options = this.options;\r\n    const payload = this.payload;\r\n    if (options) {\r\n      const optionsBuffer = options.toBytes();\r\n      buffers.push(optionsBuffer);\r\n      length += optionsBuffer.length;\r\n    }\r\n    if (payload) {\r\n      // TODO: json?\r\n      // to cbor buffer\r\n      const payloadBufer = serializePayload(payload, this.options.contentFormat);\r\n      buffers.push(PAYLOAD_MARKER_BUFFER);\r\n      length += 1; // marker length\r\n      buffers.push(payloadBufer);\r\n      length += payloadBufer.length;\r\n    }\r\n    return Buffer.concat(buffers, length);\r\n  }\r\n\r\n  /* eslint-disable no-bitwise */\r\n  toTcpMessage() {\r\n    const codeLength = 1;\r\n    const codePart = Buffer.alloc(codeLength, this.code);\r\n    const tokenPart = this.token;\r\n    const tokenLength = tokenPart.length;\r\n    const bodyPart = this.makeBody();\r\n    const bodyLength = bodyPart.length;\r\n\r\n    let byte;\r\n    let lengthPart;\r\n    let lenPartLength;\r\n    if (bodyLength < 13) {\r\n      // normal header\r\n      lenPartLength = 1;\r\n      lengthPart = Buffer.alloc(lenPartLength, 0);\r\n      byte = (bodyLength << 4) | tokenLength;\r\n      lengthPart.writeUInt8(byte, 0);\r\n    } else if (bodyLength < (1 << 8) + 13) {\r\n      // 8-bit extended header\r\n      lenPartLength = 2;\r\n      lengthPart = Buffer.alloc(lenPartLength, 0);\r\n      byte = (13 << 4) | tokenLength;\r\n      lengthPart.writeUInt8(byte, 0);\r\n      lengthPart.writeUInt8(bodyLength - 13, 1);\r\n    } else if (bodyLength < (1 << 16) + 269) {\r\n      // 16-bit extended header\r\n      lenPartLength = 3;\r\n      lengthPart = Buffer.alloc(lenPartLength, 0);\r\n      byte = (14 << 4) | tokenLength;\r\n      lengthPart.writeUInt8(byte, 0);\r\n      lengthPart.writeUInt16BE(bodyLength - 269, 1);\r\n    } else if (bodyLength < (1 << 32) + 65805) {\r\n      // 32-bit extended header\r\n      lenPartLength = 5;\r\n      lengthPart = Buffer.alloc(lenPartLength, 0);\r\n      byte = (15 << 4) | tokenLength;\r\n      lengthPart.writeUInt8(byte, 0);\r\n      lengthPart.writeUInt32BE(bodyLength - 65805, 1);\r\n    } else {\r\n      throw new StError('TOO_LARGE_TCP_BODY');\r\n    }\r\n\r\n    const totalLength = lenPartLength + codeLength + tokenLength + bodyLength;\r\n    return Buffer.concat([lengthPart, codePart, tokenPart, bodyPart], totalLength);\r\n  }\r\n\r\n  toString() {\r\n    const strings = [];\r\n    strings.push(`code : ${codeToString[this.code]}`);\r\n    if (this.token) strings.push(`token: ${this.token.toString('hex')}`);\r\n    const optionsString = this.options ? this.options.toString() : null;\r\n    if (optionsString) strings.push(`options\\n${optionsString}`);\r\n    strings.push(`payload\\n${JSON.stringify(this.payload, null, 2)}`);\r\n    return strings.join('\\n');\r\n  }\r\n}\r\n\r\nCoapMessage.decodeTcpMessage = (message) => {\r\n  let position = 0;\r\n  const lengthPart = message.readUInt8(position);\r\n  position += 1;\r\n  let bodyLength = lengthPart >> 4;\r\n  const tokenLength = lengthPart & 0xF;\r\n  if (bodyLength === 13) {\r\n    // 8 bit extended\r\n    bodyLength = message.readUInt8(position) + 13;\r\n    position += 1;\r\n  } else if (bodyLength === 14) {\r\n    // 16 bit extended\r\n    bodyLength = message.readUInt16BE(position) + 269;\r\n    position += 2;\r\n  } else if (bodyLength === 15) {\r\n    // 32 bit extended\r\n    bodyLength = message.readUInt32BE(position) + 65805;\r\n    position += 4;\r\n  }\r\n\r\n  /* parse code */\r\n  const code = message.readUInt8(position);\r\n  position += 1;\r\n\r\n  /* parse token */\r\n  const token = message.slice(position, position + tokenLength);\r\n  position += tokenLength;\r\n\r\n  // NOTE: incomplete payload\r\n  if (position + bodyLength > message.length) throw new Error('sliced packet');\r\n\r\n  /* parse options */\r\n  const rawOptions = [];\r\n  let number = 0;\r\n  while (position < message.length) {\r\n    const firstByte = message.readUInt8(position);\r\n    // is payload marker\r\n    if (firstByte === PAYLOAD_MARKER) break;\r\n    position += 1;\r\n    const deltaLengthPart = firstByte;\r\n    let delta = deltaLengthPart >> 4;\r\n    let length = deltaLengthPart & 0xF;\r\n    if (delta === 13) {\r\n      delta = message.readUInt8(position) + 13;\r\n      position += 1;\r\n    } else if (delta === 14) {\r\n      delta = message.readUInt16BE(position) + 269;\r\n      position += 2;\r\n    } else if (delta > 14) {\r\n      throw new StError('INVALID_OPTION_DELTA', delta);\r\n    }\r\n    number += delta;\r\n    if (length === 13) {\r\n      length = message.readUInt8(position) + 13;\r\n      position += 1;\r\n    } else if (length === 14) {\r\n      length = message.readUInt16BE(position) + 269;\r\n      position += 2;\r\n    } else if (length > 14) {\r\n      throw new StError('INVALID_OPTION_LENGTH');\r\n    }\r\n    const value = message.slice(position, position + length);\r\n    position += length;\r\n    rawOptions.push({ number, value });\r\n  }\r\n  const options = rawOptions.length ? CoapOptions.fromRawOptions(rawOptions) : null;\r\n\r\n  /* parse payload */\r\n  let payload = null;\r\n  if (position < message.length) {\r\n    const firstByte = message.readUInt8(position);\r\n    position += 1;\r\n    if (firstByte !== PAYLOAD_MARKER) throw new StError('INVALID_PAYLOAD');\r\n    payload = message.slice(position);\r\n    if (payload && payload.length !== 0) {\r\n      if (!options) payload = cbor.decodeFirstSync(payload);\r\n      else {\r\n        switch (options.contentFormat) {\r\n          case undefined:\r\n          case CoapOptions.CONTENT_FORMAT.CBOR:\r\n            payload = cbor.decodeFirstSync(payload);\r\n            break;\r\n          case CoapOptions.CONTENT_FORMAT.JSON:\r\n            payload = JSON.parse(payload);\r\n            break;\r\n          default:\r\n            payload = `Unsupported Content Format: ${this.options.contentFormat}`;\r\n        }\r\n      }\r\n    } else {\r\n      payload = {};\r\n    }\r\n  }\r\n\r\n  return new CoapMessage({ code, token, options, payload });\r\n};\r\n/* eslint-enable no-bitwise */\r\n\r\n/**\r\n * <pre>\r\n * // 2.xx\r\n * CREATED: 65,\r\n * DELETED: 66,\r\n * VALID: 67,\r\n * CHANGED: 68,\r\n * CONTENT: 69,\r\n * // 4.xx\r\n * BAD_REQUEST: 128,\r\n * UNAUTHORIZED: 129,\r\n * BAD_OPTION: 130,\r\n * FORBIDDEN: 131,\r\n * NOT_FOUND: 132,\r\n * METHOD_NOT_ALLOWED: 133,\r\n * NOT_ACCEPTABLE: 134,\r\n * PRECONDITION_FAILED: 140,\r\n * REQUEST_ENTITY_TOO_LARGE: 141,\r\n * UNSUPPORTED_CONTENT_FORMAT: 143,\r\n * // 5.xx\r\n * INTERNAL_SERVER_ERROR: 160,\r\n * NOT_IMPLEMENTED: 161,\r\n * BAD_GATEWAY: 162,\r\n * SERVICE_UNAVAILABLE: 163,\r\n * GATEWAY_TIMEOUT: 164,\r\n * PROXYING_NOT_SUPPORTED: 165,\r\n * </pre>\r\n */\r\nCoapMessage.STATUS_CODE = STATUS_CODE;\r\n\r\nmodule.exports = CoapMessage;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/CoapMessage.js\n// module id = 33\n// module chunks = 0","module.exports = require(\"uuid\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"uuid\"\n// module id = 34\n// module chunks = 0","module.exports = require(\"uuid/v4\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"uuid/v4\"\n// module id = 35\n// module chunks = 0","/**\r\n * Data model that contains OCF Device Resource information\r\n *\r\n * @property {string} href resource's URI\r\n * @property {string} title resource's display name\r\n * @property {string[]} rt resource type list\r\n * @property {string[]} if resource inteface\r\n * @property {object} p resource policy\r\n * @property {string[]} type resource MIME type list\r\n */\r\nclass OcfDeviceResource {\r\n  constructor(href) {\r\n    this.href = href;\r\n    // this.title\r\n    // this.rt\r\n    // this.if\r\n    // this.p\r\n    // this.type\r\n  }\r\n\r\n  toSimple(di) {\r\n    const simpleObj = new OcfDeviceResource(this.href.slice(this.href.indexOf(di) + di.length));\r\n    simpleObj.rt = this.rt;\r\n\r\n    return simpleObj;\r\n  }\r\n}\r\n\r\nconst oicdResource = new OcfDeviceResource('/oic/d');\r\noicdResource.rt = ['oic.wk.d'];\r\noicdResource.p = { bm: 1 };\r\noicdResource.type = ['application/json'];\r\noicdResource.if = ['oic.if.baseline', 'oic.if.r'];\r\nconst oicpResource = new OcfDeviceResource('/oic/p');\r\noicpResource.rt = ['oic.wk.p'];\r\noicpResource.p = { bm: 1 };\r\noicpResource.type = ['application/json'];\r\noicpResource.if = ['oic.if.baseline', 'oic.if.r'];\r\n\r\nOcfDeviceResource.DEFAULT_OIC_D_RESOURCE = oicdResource;\r\nOcfDeviceResource.DEFAULT_OIC_P_RESOURCE = oicpResource;\r\n\r\n\r\nmodule.exports = OcfDeviceResource;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/OcfDeviceResource.js\n// module id = 36\n// module chunks = 0","const Promise = require('bluebird');\r\nconst IotCloudClient = require('./IotCloudClient');\r\nconst { getServerConfig } = require('../common/util');\r\nconst CertManager = require('./CertManager');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\n/**\r\n * OCF Group manager. Call init() before use.\r\n */\r\nclass OcfGroupManager {\r\n  /**\r\n   * Setup config object which contains connection information.\r\n   * @param {Object} config config object\r\n   */\r\n  constructor(config) {\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   * Initialize a OCF group manager\r\n   * @param {CloudAgent} client cloud connector\r\n   */\r\n  init(client) {\r\n    if (client) {\r\n      this.client = client;\r\n      return;\r\n    }\r\n\r\n    const iotCloudConfig = getServerConfig(this.config, 'iotCloud');\r\n    const iotConsoleConfig = getServerConfig(this.config, 'iotConsole');\r\n    const authProviderConfig = getServerConfig(this.config, 'authProvider');\r\n\r\n    const cm = new CertManager(this.config);\r\n    cm.init();\r\n    const { key, cert } = cm.getDeviceKeyCert();\r\n    iotCloudConfig.clientKey = key;\r\n    iotCloudConfig.clientCert = cert;\r\n\r\n    const clientConfig = {\r\n      iotCloud: iotCloudConfig,\r\n      authProvider: authProviderConfig,\r\n      iotConsole: iotConsoleConfig,\r\n      ssoToken: this.config.ssoToken,\r\n      authCode: this.config.authCode,\r\n      accessToken: this.config.accessToken,\r\n      userId: this.config.userId,\r\n      deviceId: this.config.deviceId,\r\n    };\r\n\r\n    this.client = new IotCloudClient(clientConfig);\r\n  }\r\n\r\n  /**\r\n   * Create a OCF group\r\n   * @param {string} name group name\r\n   * @param {string} parent parent UUID\r\n   * @param {string[]?} members members UUIDs\r\n   * @returns {Promise.<OcfGroup>} created OCF group\r\n   */\r\n  createGroup(name, parent, members) {\r\n    return this.client.connect()\r\n      .then(() => this.client.createGroup(name, parent, members))\r\n      .finally(() => this.client.disconnect());\r\n  }\r\n\r\n  /**\r\n   * Retrieve OCF group list\r\n   * @returns {Promise.<OcfGroup[]>} OCF group list\r\n   */\r\n  retrieveGroupList() {\r\n    return this.client.connect()\r\n      .then(() => this.client.retrieveGroupList())\r\n      .finally(() => this.client.disconnect());\r\n  }\r\n\r\n  /**\r\n   * Retrieve a OCF group\r\n   * @param {string} id group UUID\r\n   * @returns {Promise.<OcfGroup>} OCF group\r\n   */\r\n  retrieveGroup(id) {\r\n    return this.client.connect()\r\n      .then(() => this.client.retrieveGroup(id))\r\n      .finally(() => this.client.disconnect());\r\n  }\r\n\r\n  /**\r\n   * Update a OCF group.\r\n   * Can 'add', 'delete' or 'replace' members, masters, devices, resources.\r\n   * @param {string} id group UUID\r\n   * @param {string?} operation update operation, 'add', 'delete' or null, null is for 'replace'\r\n   * @param {(string[]|string)?} members group UUID\r\n   * @param {(string[]|string)?} masters group UUID\r\n   * @param {(string[]|string)?} devices group UUID\r\n   * @param {(string[]|string)?} resources group UUID\r\n   * @returns {Promise.<undefined>} created OCF group\r\n   */\r\n  updateGroup(id, operation, members, masters, devices, resources) {\r\n    return this.client.connect()\r\n      .then(() => {\r\n        if (operation === 'delete' && devices && devices.length > 0) {\r\n          return this.validateDeletableDevices(id, devices)\r\n            .then(() =>\r\n              this.client.updateGroup(id, operation, members, masters, devices, resources));\r\n        }\r\n        return this.client.updateGroup(id, operation, members, masters, devices, resources);\r\n      })\r\n      .finally(() => this.client.disconnect());\r\n  }\r\n\r\n  /**\r\n   * Delete a OCF group\r\n   * @param {string} id group UUID\r\n   * @returns {Promise.<undefined>} created OCF group\r\n   */\r\n  deleteGroup(id) {\r\n    return this.client.connect()\r\n      .then(() => this.client.deleteGroup(id))\r\n      .finally(() => this.client.disconnect());\r\n  }\r\n\r\n  validateDeletableDevices(groupId, devices) {\r\n    return this.client.retrieveGroup(groupId)\r\n    .then((group) => {\r\n      const isDefaultGroup = group.type === 'Private';\r\n      const dis = Array.isArray(devices) ? devices : [devices];\r\n      const checkStatus = false;\r\n      return Promise.map(dis.map(di => this.client.retrieveDevice(di, checkStatus)),\r\n        (device) => {\r\n          if (device.group.length === 1 && device.group[0] === groupId && isDefaultGroup) {\r\n            throw new StError('CANNOT_DELETE_DEVICE_FROM_GROUP', device.id, groupId);\r\n          }\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(OcfGroupManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/OcfGroupManager.js\n// module id = 37\n// module chunks = 0","const EventEmitter = require('events');\r\nconst IotCloudAgent = require('./IotCloudAgent');\r\nconst OcfGroupMapper = require('./OcfGroupMapper');\r\nconst OcfGroup = require('../models/OcfGroup');\r\nconst OcfDevice = require('../models/OcfDevice');\r\nconst IotConsoleAgent = require('./IotConsoleAgent');\r\nconst ResourceTypeManager = require('./ResourceTypeManager');\r\nconst Promise = require('bluebird');\r\nconst StError = require('../errors/StError');\r\nconst logger = require('../common/StLogger');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\n/**\r\n * @example\r\n * const IotCloudClient = require('./src/controllers/IotCloudClient');\r\n * const Configurator = require('./src/controllers/Configurator');\r\n * const { getServerConfig } = require('./src/common/util');\r\n * const CertManager = require('./src/controllers/CertManager');\r\n * const fs = require('./src/controllers/FileSystemHandler');\r\n *\r\n * const config = Configurator.getDefault().getConfig();\r\n * const iotCloudConfig = getServerConfig(config, 'iotCloud');\r\n * const cm = new CertManager(config);\r\n * cm.init();\r\n * const { key, cert } = cm.getDeviceKeyCert();\r\n * iotCloudConfig.clientKey = key;\r\n * iotCloudConfig.clientCert = cert;\r\n *\r\n * const clientConfig = {\r\n *   iotCloud: iotCloudConfig,\r\n *   ssoToken: config.ssoToken,\r\n *   authCode: config.authCode,\r\n *   accessToken: config.accessToken,\r\n *   userId: config.userId,\r\n *   deviceId: config.deviceId,\r\n * };\r\n *\r\n * const client = new IotCloudClient(clientConfig);\r\n *\r\n * client.connect()\r\n *   .then(() => client.retrieveDeviceList())\r\n *   .then((d) => {\r\n *     let cnt = 0;\r\n *     const listener = (state) => {\r\n *       console.log(state);\r\n *       cnt += 1;\r\n *       if (cnt > 1) {\r\n *         client.unsubscribeDevicePresence(d[0].id);\r\n *         client.removeListener(d[0].id, listener);\r\n *       }\r\n *     };\r\n *     client.on(d[0].id, listener);\r\n *     client.subscribeDevicePresence(d[0].id);\r\n *     return client.getDeviceResources(d[0].id);\r\n *   })\r\n *   .then((device) => {\r\n *     const href = device[0].links[0].href;\r\n *     const listener = (resources) => {\r\n *       console.log(resources);\r\n *       client.unsubscribeDeviceResource(href);\r\n *       client.removeListener(href, listener);\r\n *     };\r\n *     client.on(href, listener);\r\n *     client.subscribeDeviceResource(href);\r\n *   });\r\n */\r\nclass IotCloudClient extends EventEmitter {\r\n  /**\r\n   * @constructor\r\n   * @param {object} config The configuration to communicate Iot Cloud and Auth Provider.\r\n   * @param {string} config.deviceId The id of client.\r\n   * @param {string} config.userId The id of Samsung Account User(saguid). 10 letters.\r\n   * @param {string} config.accessToken The access token to use Iot Cloud API.\r\n   * @param {string} config.authCode The authenticate code for sign-up API.\r\n   * @param {string} config.ssoToken The sso token to get authCode.\r\n   * @param {object} config.iotCloud The configuration to communicate with IoT Cloud.\r\n   * @param {string} config.iotCloud.uri The uri of the IoT Cloud.\r\n   * @param {string} config.iotCloud.redirecturi The redirect uri of the IoT Cloud.\r\n   * It is needed after sign-up.\r\n   * @param {boolean} config.iotCloud.rejectUnauthorized\r\n   * The flag for ensuring reject during certificate process.\r\n   * @param {string} config.iotCloud.serverCert The certificate from the IoT Cloud.\r\n   * It is needs to communicate with redirect uri. PEM formatted string.\r\n   * @param {boolean} config.iotCloud.useRedirection The flag for using redirecturi.\r\n   * @param {string} config.iotCloud.proxy The proxy address to connect.\r\n   * @param {string} config.iotCloud.clientKey\r\n   * The Client private key for mutual certification. PEM format.\r\n   * @param {string} config.iotCloud.clientCert\r\n   * The Client certificate for mutual certification. PEM format.\r\n   * @param {object} config.authProvider The configuration to communicate with Auth Provider.\r\n   * @param {string} config.authProvider.uri The uri of the Auth Provider.\r\n   * @param {boolean} config.authProvider.rejectUnauthorized\r\n   * The flag for ensuring reject during certificate process.\r\n   * @param {object} config.iotConsole The configuration to communicate with Iot Console.\r\n   * @param {string} config.iotConsole.uri The uri of the Iot Console.\r\n   * @param {boolean} config.iotConsole.rejectUnauthorized\r\n   * The flag for ensuring reject during certificate process.\r\n   */\r\n  constructor(config) {\r\n    super();\r\n    this.config = config;\r\n    const iotCloudConfig = config.iotCloud;\r\n    const { clientKey, clientCert } = iotCloudConfig;\r\n    this.agent = new IotCloudAgent(iotCloudConfig, clientKey, clientCert);\r\n    this.agent.on('close', () => this.emit('close'));\r\n    this.agent.on('debug', msg => this.emit('debug', msg));\r\n  }\r\n\r\n  /**\r\n   * connect client to IotCloud\r\n   */\r\n  connect() {\r\n    return this.agent.connect();\r\n  }\r\n\r\n  /**\r\n   * disconnect client from IotCloud\r\n   */\r\n  disconnect() {\r\n    this.signedIn = false;\r\n    if (this.intervalId) clearInterval(this.intervalId);\r\n    return this.agent.disconnect();\r\n  }\r\n\r\n  /**\r\n   * check the connection of client to IotCloud\r\n   */\r\n  isConnected() {\r\n    return this.agent.isConnected();\r\n  }\r\n\r\n  validateCommandArgs(di, uri, args) {\r\n    return this.agent.getDeviceResources(di)\r\n      .then((resources) => {\r\n        const links = resources[0].links;\r\n        const link = links.find(l => l.href === uri);\r\n        if (!link) throw new StError('CANNOT_FIND_RESOURCE_IN_DEVICE', uri);\r\n        const rt = link.rt[0];\r\n        if (!rt) throw new StError('CANNOT_FIND_TYPE_OF_RESOURCE');\r\n        const rm = new ResourceTypeManager();\r\n        rm.init();\r\n        return rm.retrieveResourceType(rt);\r\n      })\r\n      .then((rt) => {\r\n        if (!rt || !rt.methods || !rt.methods.post || !rt.methods.post.body) throw new StError('CANNOT_FIND_PROPERTY_DEFINITION');\r\n        const propKeys = Object.keys(rt.methods.post.body);\r\n        const argKeys = Object.keys(args);\r\n        const invalidKey = argKeys.find(argKey => !propKeys.find(propKey => propKey === argKey));\r\n        if (invalidKey) throw new StError('INVALID_PROPERTY', invalidKey);\r\n      });\r\n  }\r\n\r\n  signIn(deviceId, userId, accessToken) {\r\n    const promise = this.signedIn\r\n      ? Promise.resolve()\r\n      : this.agent.signIn(deviceId, userId, accessToken)\r\n        .then(() => this.getPing())\r\n        .then(() => this.setPing())\r\n        .then(() => {\r\n          this.signedIn = true;\r\n          this.intervalId = setInterval(() => {\r\n            if (this.agent.isConnected()) this.setPing().catch(e => logger.error('setPing() throws an error', e));\r\n            else clearInterval(this.intervalId);\r\n          }, 1000 * 60 * 7);\r\n        })\r\n        .catch((err) => {\r\n          if (err instanceof StError && err.code === 'IOT_CLOUD_DEVICE_NOT_FOUND') {\r\n            throw new StError('IOT_CLOUD_CLIENT_DEVICE_NOT_FOUND', err);\r\n          }\r\n          throw err;\r\n        });\r\n    return promise;\r\n  }\r\n\r\n  ensureSignIn() {\r\n    const { deviceId, authProvider, iotConsole, userId, accessToken, ssoToken, authCode: code }\r\n      = this.config;\r\n\r\n    let promise = Promise.resolve();\r\n\r\n    // if need to sign-up\r\n    if (!userId || !accessToken) {\r\n      if (code) {\r\n        promise = Promise.resolve(code);\r\n      } else {\r\n        const agent = new IotConsoleAgent(this.config, iotConsole);\r\n        agent.init();\r\n        agent.on('debug', msg => this.emit('debug', msg));\r\n        promise = agent.getAuthCodeBySsoToken(ssoToken, deviceId);\r\n      }\r\n\r\n      return promise.then(authCode => (\r\n        this.agent.signUpWithAuthCode(authCode, authProvider.uri, deviceId, true))\r\n        .then((response) => {\r\n          this.config.userId = response.uid;\r\n          this.config.accessToken = response.accesstoken;\r\n          return this.disconnect();\r\n        }))\r\n        .then(() => this.connect());\r\n    }\r\n\r\n    return promise\r\n      .then(() => this.signIn(deviceId, this.config.userId, this.config.accessToken));\r\n  }\r\n\r\n  /**\r\n   * Send a command to Device.\r\n   * @param {string} di A device id to send a command.\r\n   * @param {string} href An URI of resource in device.\r\n   * @param {object} args A representation of command.\r\n   * @param {string} [prefix='/oic/route/'] An URI prefix to route resource.\r\n   * @param {string} [rt] A resource type.\r\n   * @param {string} [interf] An interface.\r\n   * @param {boolean} [checkStatus=true] Weather SDK request(check) device status or not.\r\n   * @returns {Promise.<undefined|Error>}\r\n   * A promise that is just resolved or rejected with an error object.\r\n   */\r\n  commandDevice(di, href, args, prefix = '/oic/route/', rt, interf, checkStatus = true) {\r\n    // TODO: change prefix depend on resource type(st, shp, others)\r\n    const resourceUri = href.charAt(0) === '/' ? href : `/${href}`;\r\n    const uri = `${prefix}${di}${resourceUri}`;\r\n\r\n    return this.ensureSignIn()\r\n      .then(() => {\r\n        if (!checkStatus) return Promise.resolve();\r\n        return this.agent.getDeviceState(di)\r\n          .then((state) => {\r\n            if (!state.prslist || state.prslist.length <= 0 || state.prslist[0].state !== 'on') {\r\n              throw new StError('DEVICE_TURNED_OFF');\r\n            }\r\n          });\r\n      })\r\n      .then(() => this.validateCommandArgs(di, uri, args))\r\n      .then(() => this.agent.commandDevice(uri, args, rt, interf));\r\n  }\r\n\r\n  /**\r\n   * Retrieves device's detail\r\n   *\r\n   * @param {string} di the device Id to retrieve.\r\n   * @param {boolean} [checkStatus=true] Whether SDK request(check) device status or not.\r\n   * @returns {(Promise.<OcfDevice|string>)}\r\n   * A promise is resolved with OcfDevice or rejuected with an error string.\r\n   */\r\n  retrieveDevice(di, checkStatus = true) {\r\n    return this.ensureSignIn()\r\n      .then(() => Promise.join(\r\n        checkStatus ? this.agent.getDeviceState(di) : Promise.resolve(),\r\n        this.agent.getDeviceProfile(di),\r\n        this.agent.getDeviceResources(di),\r\n        this.agent.getGroupList(this.config.userId),\r\n        (stateResponse, profileResponse, resourcesResponse, groupsResponse) =>\r\n          OcfDevice.createFromResp(profileResponse, resourcesResponse,\r\n            stateResponse, groupsResponse)));\r\n  }\r\n\r\n  /**\r\n   * Retrieves devices without client\r\n   * @param {boolean} [checkStatus=true] Weather SDK request(check) device status or not.\r\n   * @param {object} [searchCriteria] Search criteria for listing device.\r\n   * Multiple properties works as 'AND' operation.\r\n   * @param {string} [searchCriteria.mnmn] The device's mnmn.\r\n   * @param {string} [searchCriteria.rt] The device's rt.\r\n   * @param {string} [searchCriteria.vid] The device's vid.\r\n   * @param {string} [searchCriteria.name] The device's name. It means 'n' or 'nick'.\r\n   * @returns {(Promise.<OcfDevice[]|error>)}\r\n   * A promise is resolved with array of OcfDevice or rejected with an error.\r\n   */\r\n  retrieveDeviceList(checkStatus = true, searchCriteria) {\r\n    return this.ensureSignIn()\r\n      .then(() => this.agent.getDeviceProfile())\r\n      .then(({ devices: profiles }) => {\r\n        let filtered = profiles.filter(profile => profile.rt || profile.vid);\r\n        if (searchCriteria && searchCriteria.mnmn) {\r\n          filtered = filtered.filter(profile => profile.mnmn === searchCriteria.mnmn);\r\n        }\r\n        if (searchCriteria && searchCriteria.rt) {\r\n          filtered = filtered.filter(profile => profile.rt === searchCriteria.rt);\r\n        }\r\n        if (searchCriteria && searchCriteria.vid) {\r\n          filtered = filtered.filter(profile => profile.vid === searchCriteria.vid);\r\n        }\r\n        if (searchCriteria && searchCriteria.name) {\r\n          filtered = filtered.filter(\r\n            profile => (profile.n && profile.n.includes(searchCriteria.name)) ||\r\n              (profile.nick && profile.nick.includes(searchCriteria.name)));\r\n        }\r\n        return filtered;\r\n      })\r\n      .then(profiles => profiles.sort((a, b) => {\r\n        const aName = a.nick || a.n || '';\r\n        const bName = b.nick || b.n || '';\r\n        // first ordering option is by name, secondary ordering option is by di\r\n        return aName.localeCompare(bName) || a.di.localeCompare(b.di);\r\n      }))\r\n      .map(profile => (checkStatus ? this.agent.getDeviceState(profile.di) : Promise.resolve())\r\n        .then(state => OcfDevice.createListEntryFromResp(profile, state)));\r\n  }\r\n\r\n  /**\r\n   * Retrieves client devices\r\n   * @returns {(Promise.<OcfDevice[]|error>)}\r\n   * A promise is resolved with array of OcfDevice or rejected with an error.\r\n   */\r\n  retrieveClientDeviceList() {\r\n    let things;\r\n    return this.retrieveDeviceList(false)\r\n    .then((devices) => {\r\n      things = devices.map(d => d.id);\r\n      return this.agent.getDeviceList();\r\n    })\r\n    .then(({ dilist: devices }) => devices.filter(d => !things.includes(d)));\r\n  }\r\n\r\n  /**\r\n   * Delete a device from user account.\r\n   * @param {string} di A device id to delete.\r\n   * @param {boolean} isClient A flag to check device list before sending delete request.\r\n   * @returns {Promise.<undefined|Error>}\r\n   * A promise that is just resolved or rejected with an error.\r\n   */\r\n  deleteDevice(di, isClient) {\r\n    return this.ensureSignIn()\r\n      .then(() => {\r\n        if (isClient) return this.agent.deleteDevice(di, this.config.accessToken);\r\n        return this.retrieveDeviceList(false)\r\n          .then((devices) => {\r\n            const foundDevice = devices.find(device => device.id === di);\r\n            if (foundDevice) return this.agent.deleteDevice(di, this.config.accessToken);\r\n            throw new StError('IOT_CLOUD_DEVICE_NOT_FOUND');\r\n          });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Retrieves device status\r\n   * @param {string} di the device Id to retrieve.\r\n   * @param {string} uri the resource uri to retrieve.\r\n   * @param {boolean} [checkStatus=true] Weather SDK request(check) device status or not.\r\n   * @returns {(Promise.<object|error>)}\r\n   * A promise is resolved with status or rejected with an error.\r\n   */\r\n  retrieveStatus(di, uri, checkStatus = true) {\r\n    return this.ensureSignIn()\r\n      .then(() => {\r\n        const href = uri.charAt(0) === '/' ? uri : `/${uri}`;\r\n        if (href === '/oic/p' || href === '/oic/d') return Promise.resolve();\r\n        if (!checkStatus) return Promise.resolve();\r\n        return this.agent.getDeviceState(di)\r\n          .then((state) => {\r\n            if (!state.prslist || state.prslist.length <= 0 || state.prslist[0].state !== 'on') {\r\n              throw new StError('DEVICE_TURNED_OFF');\r\n            }\r\n          });\r\n      })\r\n      .then(() => this.agent.getDeviceResources(di))\r\n      .then(resources => resources[0].links.filter(link => link.href.match(uri)))\r\n      .then((matchedResources) => {\r\n        if (!matchedResources || matchedResources.length < 1) throw new StError('CANNOT_FIND_RESOURCE');\r\n        if (matchedResources.length > 1) throw new StError('TOO_MANY_RESOURCES');\r\n        return this.agent.getDeviceResource(matchedResources[0].href);\r\n      })\r\n      .catch((err) => {\r\n        if (err.message === 'DEVICE_NOT_FOUND') {\r\n          return Promise.reject(new StError('DEVICE_TURNED_OFF'));\r\n        }\r\n        return Promise.reject(err);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Create a OCF group\r\n   * @param {string} name group name\r\n   * @param {string} parent parent UUID\r\n   * @param {string[]?} members members UUIDs\r\n   * @returns {Promise.<OcfGroup>} created OCF group\r\n   */\r\n  createGroup(name, parent, members) {\r\n    if (!name) return Promise.reject(new StError('NO_GROUP_NAME'));\r\n    if (members && !Array.isArray(members)) return Promise.reject(new StError('INVALID_MEMBERS_TYPE'));\r\n\r\n    return this.ensureSignIn()\r\n      .then(() => this.agent.createGroup(name, this.config.userId, parent, members))\r\n      .then(response => OcfGroupMapper.mapToGroup(response));\r\n  }\r\n\r\n  getAllSubGroups(list, id) {\r\n    return this.agent.getGroup(id, this.config.userId)\r\n      .then((response) => {\r\n        const group = OcfGroupMapper.mapToGroup(response);\r\n        list.push(group);\r\n        return Promise.reduce(group.subGroups, this.getAllSubGroups.bind(this), list);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Retrieve OCF group list\r\n   * @returns {Promise.<OcfGroup[]>} OCF group list\r\n   */\r\n  retrieveGroupList() {\r\n    return this.ensureSignIn()\r\n      .then(() => this.agent.getGroupList(this.config.userId))\r\n      .then(({ groups }) => {\r\n        const grs = OcfGroupMapper.mapToGroupList(groups);\r\n        let subs = [];\r\n        grs.forEach((group) => { subs = subs.concat(group.subGroups); });\r\n        return Promise.reduce(subs, this.getAllSubGroups.bind(this), grs);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Retrieve a OCF group\r\n   * @param {string} id group UUID\r\n   * @returns {Promise.<OcfGroup>} OCF group\r\n   */\r\n  retrieveGroup(id) {\r\n    if (!id) return Promise.reject(new StError('NO_GROUP_ID'));\r\n\r\n    return this.ensureSignIn()\r\n      .then(() => this.agent.getGroup(id, this.config.userId))\r\n      .then(response => OcfGroupMapper.mapToGroup(response));\r\n  }\r\n\r\n  /**\r\n   * Update a OCF group.\r\n   * Can 'add', 'delete' or 'replace' members, masters, devices, resources.\r\n   * @param {string} id group UUID\r\n   * @param {string?} operation update operation, 'add', 'delete' or null, null is for 'replace'\r\n   * @param {(string[]|string)?} members group UUID\r\n   * @param {(string[]|string)?} masters group UUID\r\n   * @param {(string[]|string)?} devices group UUID\r\n   * @param {(string[]|string)?} resources group UUID\r\n   * @returns {Promise.<undefined>} created OCF group\r\n   */\r\n  updateGroup(id, operation, members, masters, devices, resources) {\r\n    if (!id) return Promise.reject(new StError('NO_GROUP_ID'));\r\n    const op = operation || '';\r\n    if (op !== 'add' && op !== 'delete' && op !== '') {\r\n      return Promise.reject(new StError('INVALID_OPERATION'));\r\n    }\r\n    const ds = devices && !Array.isArray(devices) ? [devices] : devices;\r\n    const mbs = members && !Array.isArray(members) ? [members] : members;\r\n    const mts = masters && !Array.isArray(masters) ? [masters] : masters;\r\n    const rs = resources && !Array.isArray(resources) ? [resources] : resources;\r\n\r\n    return this.ensureSignIn()\r\n      .then(() => this.agent.updateGroup(id, op, mbs, mts, ds, rs));\r\n  }\r\n\r\n  /**\r\n   * Delete a OCF group\r\n   * @param {string} id group UUID\r\n   * @returns {Promise.<undefined>} created OCF group\r\n   */\r\n  deleteGroup(id) {\r\n    if (!id) return Promise.reject(new StError('NO_GROUP_ID'));\r\n\r\n    return this.ensureSignIn()\r\n      .then(() => this.agent.getGroup(id, this.config.userId))\r\n      .then(resp => OcfGroupMapper.mapToGroup(resp))\r\n      .then((group) => {\r\n        // NOTE. if group type is 'Private', it means that it is default group\r\n        if (group.type === OcfGroup.TYPE.PRIVATE) throw new StError('CANNOT_DELETE_DEFAULT_GROUP', group.name);\r\n        return this.agent.deleteGroup(id, this.config.userId);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Retrieve raw resources from Iot Cloud.\r\n   * @param {string} deviceId The id of the device.\r\n   * @return {Promise.<object|error>}\r\n   * A promise is resolved with resource object or is rejected with an error.\r\n   */\r\n  getDeviceResources(deviceId) {\r\n    if (!deviceId) return Promise.reject(new StError('NO_DEVICE_ID'));\r\n\r\n    return this.ensureSignIn()\r\n      .then(() => this.agent.getDeviceResources(deviceId));\r\n  }\r\n\r\n  /**\r\n   * Subscribe the presence of the specified device.\r\n   * After subscribing, The instance emits the event named deviceId.\r\n   * You can register listener using .on(deviceId, callback) method.\r\n   * Also you can remove listener using .removeListener(deviceId, callbak) method.\r\n   * @param {string} deviceId The id of the device.\r\n   * @return {Promise.<undefined|error>}\r\n   */\r\n  subscribeDevicePresence(deviceId) {\r\n    if (!deviceId) throw new StError('NO_DEVICE_ID');\r\n\r\n    return this.ensureSignIn()\r\n      .then(() => this.agent.observeDeviceState(deviceId, (state) => {\r\n        if (state.prslist && state.prslist[0] && state.prslist[0].state) {\r\n          this.emit(deviceId, state.prslist[0].state);\r\n        }\r\n      }));\r\n  }\r\n\r\n  /**\r\n   * Cancel subscribing of the device presence\r\n   * @param {string} deviceId The id of the device.\r\n   * @returns {Promise.<undefined|error>}\r\n   */\r\n  unsubscribeDevicePresence(deviceId) {\r\n    if (!deviceId) throw new StError('NO_DEVICE_ID');\r\n\r\n    return this.ensureSignIn().then(() => this.agent.cancelObserveDeviceState(deviceId));\r\n  }\r\n\r\n  /**\r\n   * subscribe service event\r\n   * @param {Array<string>} [eventTypes] Types of event. If omitted, it will emit all events.\r\n   * device\r\n   * update_group\r\n   * delete_group\r\n   * create_group\r\n   * leave_group\r\n   * user_profile\r\n   * device_profile\r\n   * invitation\r\n   * create_rule\r\n   * update_rule\r\n   * delete_rule\r\n   * group_push_config\r\n   * user_push_config\r\n   * create_service\r\n   * update_service\r\n   * join_request\r\n   * update_resource\r\n   * partner_update\r\n   * You can register listener for above types like below:\r\n   * client.on('update_group', payload => console.log(payload));\r\n   * @returns {Promise.<undefined|error>}\r\n   */\r\n  subscribeServiceEvent(eventTypes) {\r\n    return this.ensureSignIn().then(() => this.agent.observeServiceEvent((payload) => {\r\n      if (eventTypes) {\r\n        if (!Array.isArray(eventTypes)) throw new StError('INVALID_EVENT_TYPES');\r\n        if (eventTypes.includes(payload.observeresponsetype)) {\r\n          this.emit(payload.observeresponsetype, payload);\r\n        }\r\n      } else {\r\n        this.emit(payload.observeresponsetype, payload);\r\n      }\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Subscribe the value of the specified resource.\r\n   * This method works only when the device presence is 'on'.\r\n   * After subscribing, The instance emits the event named href.\r\n   * You can register listener using .on(href, callback) method.\r\n   * Also you can remove listener using .removeListener(href, callbak) method.\r\n   * @param {string} href The uri of the resource.\r\n   * @return {Promise.<undefined|error>}\r\n   */\r\n  subscribeDeviceResource(href) {\r\n    if (!href) throw new StError('NO_RESOURCE_HREF');\r\n\r\n    return this.ensureSignIn()\r\n      .then(() => this.agent.observeResource(href, payload => this.emit(href, payload)));\r\n  }\r\n\r\n  /**\r\n   * Cancel subscribing of the resource.\r\n   * @param {string} href The uri of the resource.\r\n   * @return {Promise.<undefined|error>}\r\n   */\r\n  unsubscribeDeviceResource(href) {\r\n    if (!href) throw new StError('NO_RESOURCE_HREF');\r\n\r\n    return this.ensureSignIn().then(() => this.agent.cancelObserveResource(href));\r\n  }\r\n\r\n\r\n  getPing() {\r\n    return this.agent.getPing();\r\n  }\r\n\r\n\r\n  setPing() {\r\n    return this.agent.setPing(8);\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(IotCloudClient, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/IotCloudClient.js\n// module id = 38\n// module chunks = 0","\r\n/**\r\n * Group type\r\n *\r\n * @static\r\n * @property {string} PRIVATE 'Private'\r\n * @property {string} PUBLIC 'Public'\r\n * @memberof OcfGroup\r\n */\r\nconst TYPE = Object.freeze({\r\n  PRIVATE: 'Private',\r\n  PUBLIC: 'Public',\r\n});\r\n\r\n/**\r\n * Representing a OCF group\r\n *\r\n * @property {string} id group UUID\r\n * @property {string} name group name\r\n * @property {number} latitude group latitude\r\n * @property {number} longitude group logitude\r\n * @property {number} radius group radius\r\n * @property {string} backgroundImage background image URI\r\n * @property {string} gacl gcal\r\n * @property {number} createTime created time\r\n * @property {number} updateTime updated time\r\n * @property {string} owner group owner\r\n * @property {string} type group type\r\n * @property {string[]} members members\r\n * @property {string[]} masters master members\r\n * @property {string} parent parent group\r\n * @property {string[]} subGroups child groups\r\n * @property {string[]} devices devices\r\n * @property {string[]} resources resources\r\n */\r\nclass OcfGroup {\r\n  /**\r\n   * @param {Object} obj Response object\r\n   */\r\n  constructor(obj) {\r\n    this.id = obj.gid;\r\n    this.name = obj.gname;\r\n    this.latitude = obj.latitude;\r\n    this.longitude = obj.longitude;\r\n    this.radius = obj.radius;\r\n    this.backgroundImage = obj.backgroundImage;\r\n    this.gacl = obj.gacl;\r\n    this.createTime = obj.createTime;\r\n    this.updateTime = obj.updateTime;\r\n    this.owner = obj.owner;\r\n    this.type = obj.type;\r\n    this.members = obj.members;\r\n    this.masters = obj.masters;\r\n    this.parent = obj.parent;\r\n    this.subGroups = obj.subGroups;\r\n    this.devices = obj.devices;\r\n    this.resources = obj.response;\r\n  }\r\n}\r\n\r\nOcfGroup.TYPE = TYPE;\r\nmodule.exports = OcfGroup;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/OcfGroup.js\n// module id = 39\n// module chunks = 0","const Promise = require('bluebird');\r\nconst fs = require('fs-extra');\r\nconst JSZip = require('jszip');\r\nconst pathUtil = require('path');\r\n\r\nconst pathJoin = pathUtil.join;\r\nconst pathBasename = pathUtil.basename;\r\n\r\nfunction zipHelper(zipObject, files) {\r\n  return Promise.each(files, (file) => {\r\n    const fileName = pathBasename(file);\r\n    return fs.stat(file)\r\n    .then((stat) => {\r\n      if (stat.isDirectory()) {\r\n        return fs.readdir(file)\r\n        .then((innerFiles) => {\r\n          const paths = innerFiles.map(innerFile => pathJoin(file, innerFile));\r\n          return zipHelper(zipObject.folder(fileName), paths);\r\n        });\r\n      }\r\n      return fs.readFile(file)\r\n      .then((data) => {\r\n        if (stat.mode) {\r\n          return zipObject.file(fileName, data, { unixPermissions: stat.mode });\r\n        }\r\n        return zipObject.file(fileName, data);\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nfunction zip(destPath, name, files) {\r\n  if (!name) throw Error('Invalid archive file name');\r\n\r\n  const zipObject = new JSZip();\r\n  return zipHelper(zipObject, files)\r\n    .then(() => zipObject.generateAsync({\r\n      type: 'nodebuffer',\r\n      platform: process.platform,\r\n      compression: 'DEFLATE',\r\n      compressionOptions: { level: 5 },\r\n    }))\r\n    .then(buffer => fs.outputFile(pathJoin(destPath, name), buffer));\r\n}\r\n\r\nfunction unzip(archivePath, destPath) {\r\n  return fs.readFile(archivePath)\r\n  .then(zipData => JSZip.loadAsync(zipData))\r\n  .then((zipObject) => {\r\n    const entries = zipObject.files;\r\n    const zipPaths = Object.keys(entries);\r\n    return Promise.each(zipPaths, (zipPath) => {\r\n      const file = entries[zipPath];\r\n      const targetPath = pathJoin(destPath, zipPath);\r\n      if (file.dir) {\r\n        return fs.ensureDir(targetPath);\r\n      }\r\n      return file.async('nodebuffer').then((data) => {\r\n        fs.outputFile(targetPath, data);\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nmodule.exports = {\r\n  zip,\r\n  unzip,\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/archiveBuilder.js\n// module id = 40\n// module chunks = 0","const Promise = require('bluebird');\r\nconst cloneDeep = require('lodash/cloneDeep');\r\nconst pathUtil = require('path');\r\nconst Emitter = require('events');\r\n\r\nconst { getServerConfig } = require('../common/util');\r\nconst fs = require('./FileSystemHandler');\r\nconst StCloudAgent = require('./StCloudAgent');\r\nconst ProjectConfigurator = require('./ProjectConfigurator');\r\nconst AwsManager = require('./AwsManager');\r\nconst LambdaAppBuilder = require('./LambdaAppBuilder');\r\nconst Project = require('../models/Project');\r\nconst SmartApp = require('../models/SmartApp');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\n\r\n/**\r\n * Controller that has a responsibility for manage Smart-App\r\n */\r\nclass SmartAppManager extends Emitter {\r\n  /**\r\n   * Setup config object which contains connection information.\r\n   * @param {Object} config config object\r\n   */\r\n  constructor(config) {\r\n    super();\r\n\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   * Initialize a Smart-App manager\r\n   * @param {CloudAgent} agent cloud connector\r\n   */\r\n  init(agent) {\r\n    const { accessToken } = this.config;\r\n    const serverConfig = getServerConfig(this.config, 'stCloud');\r\n    this.agent = agent || new StCloudAgent(accessToken, serverConfig);\r\n\r\n    this.awsManager = new AwsManager(this.config);\r\n    this.awsManager.init();\r\n  }\r\n\r\n\r\n  /**\r\n   * Register Smart-App\r\n   * @param {SmartApp} smartAppConfig Smart App Configuration\r\n   * @returns {Promise.<SmartApp>} A promise to be resolved with Smart-App\r\n   */\r\n  registerSmartApp(smartAppConfig) {\r\n    const appConfig = smartAppConfig;\r\n\r\n    return this.validateSmartAppConfig(appConfig)\r\n      .then(() => {\r\n        const impl = appConfig.appType === SmartApp.APP_TYPE.LAMBDA ?\r\n          appConfig.lambdaSmartApp : appConfig.webhookSmartApp;\r\n\r\n        return this.createApp(appConfig.appName, appConfig.appType,\r\n        impl, appConfig.displayName, appConfig.description, appConfig.singleInstance);\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Register Lambda Smart-App\r\n   * @param {string} appName App name\r\n   * @param {string} displayName App display name\r\n   * @param {string} description App description\r\n   * @param {boolean} singleInstance App is single instance\r\n   * @param {string[]} lambdaArn Existing Lambda Function ARN\r\n   * @returns {Promise.<SmartApp>} A promise to be resolved with Smart-App\r\n   */\r\n  registerLambdaSmartApp(appName, displayName, description, singleInstance, lambdaArn) {\r\n    if (!lambdaArn || !lambdaArn.length || lambdaArn.length === 0) {\r\n      return Promise.reject(new Error('Need Lambda ARNs'));\r\n    }\r\n\r\n    const smartAppConfig = {};\r\n    smartAppConfig.appName = appName;\r\n    smartAppConfig.appType = SmartApp.APP_TYPE.LAMBDA;\r\n    smartAppConfig.displayName = displayName || '';\r\n    smartAppConfig.description = description || '';\r\n    smartAppConfig.singleInstance = (singleInstance !== undefined) ? singleInstance : false;\r\n    smartAppConfig.lambdaSmartApp = {\r\n      functions: Array.isArray(lambdaArn) ? lambdaArn : [lambdaArn],\r\n    };\r\n\r\n    return this.registerSmartApp(smartAppConfig);\r\n  }\r\n\r\n\r\n  /**\r\n   * Register WebHook Smart-App\r\n   * @param {string} appName App name\r\n   * @param {string} displayName App display name\r\n   * @param {string} description App description\r\n   * @param {boolean} singleInstance App is single instance\r\n   * @param {string[]} targetUrl Target URL\r\n   * @returns {Promise.<SmartApp>} A promise to be resolved with Smart-App\r\n   */\r\n  registerWebhookSmartApp(appName, displayName, description, singleInstance, targetUrl) {\r\n    if (!targetUrl) {\r\n      return Promise.reject(new Error('Need target URL of Webhook service'));\r\n    }\r\n\r\n    const smartAppConfig = {};\r\n    smartAppConfig.appName = appName;\r\n    smartAppConfig.appType = SmartApp.APP_TYPE.WEBHOOK;\r\n    smartAppConfig.displayName = displayName || '';\r\n    smartAppConfig.description = description || '';\r\n    smartAppConfig.singleInstance = (singleInstance !== undefined) ? singleInstance : false;\r\n    smartAppConfig.webhookSmartApp = {\r\n      targetUrl,\r\n    };\r\n\r\n    return this.registerSmartApp(smartAppConfig);\r\n  }\r\n\r\n  /**\r\n   * Register a Smart-App in project\r\n   * @param {string} projPath Project path\r\n   * @returns {Promise.<SmartApp>} A promise to be resolved with Smart-App\r\n   */\r\n  registerSmartAppInProject(projPath) {\r\n    let appConfig;\r\n\r\n    return this.validateProjectConfig(projPath)\r\n      .then((config) => {\r\n        appConfig = config.endpointApp;\r\n        if (appConfig.appType === SmartApp.APP_TYPE.LAMBDA) {\r\n          if (appConfig.lambdaSmartApp.functions.length === 0) {\r\n            this.emit('progress', 'Registering Lambda Function on AWS...');\r\n            return this.registerLambdaFunction(projPath);\r\n          }\r\n          return appConfig.lambdaSmartApp.functions;\r\n        }\r\n\r\n        throw new Error(`Invalid Smart-App type... ${appConfig.appType}`);\r\n      })\r\n      .then((endpointInfo) => {\r\n        const smartAppConfig = cloneDeep(appConfig);\r\n        if (smartAppConfig.appType === SmartApp.APP_TYPE.LAMBDA) {\r\n          smartAppConfig.lambdaSmartApp = {\r\n            functions: Array.isArray(endpointInfo) ? endpointInfo : [endpointInfo],\r\n          };\r\n        }\r\n\r\n        return this.registerSmartApp(smartAppConfig)\r\n          .catch((e) => {\r\n            if (appConfig.appType === SmartApp.APP_TYPE.LAMBDA &&\r\n              appConfig.lambdaSmartApp.functions.length === 0) {\r\n              return this.cleanUpLambdaFunction(projPath)\r\n                .then(() => Promise.reject(e));\r\n            }\r\n\r\n            throw e;\r\n          });\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Retrieve Smart-App list\r\n   * @param {string} appType App type, one of 'LAMBDA_SMART_APP', 'WEBHOOK_SMART_APP', 'BEHAVIOR'\r\n   * @returns {Promise.<SmartApp[]>}\r\n   *   A promise to be resolved with application info list\r\n   */\r\n  retrieveSmartAppList(appType) {\r\n    if (!appType) return Promise.reject(new StError('NO_APP_TYPE_PARAM'));\r\n    if (!SmartApp.isValidAppType(appType)) return Promise.reject(new StError('INVALID_APP_TYPE', appType));\r\n\r\n    const agent = this.agent;\r\n    function getAppListIterator(apps, url, isNext) {\r\n      const getList = isNext\r\n        ? agent.get(url)\r\n        : agent.getAppList(appType);\r\n\r\n      return getList\r\n        .then(({ items, _links }) => {\r\n          if (items) {\r\n            items.forEach(item => apps.push(new SmartApp(item)));\r\n          }\r\n          if (_links && _links.next && _links.next.href) {\r\n            return getAppListIterator(apps, _links.next.href, true);\r\n          }\r\n          return apps;\r\n        });\r\n    }\r\n\r\n    return getAppListIterator([]);\r\n  }\r\n\r\n  /**\r\n   * Retrieve Smart-App\r\n   * @param {string} nameOrId App name or Id\r\n   * @returns {Promise.<SmartApp>}\r\n   *   A promise to be resolved with Smart-App\r\n   */\r\n  retrieveSmartApp(nameOrId) {\r\n    if (!nameOrId) return Promise.reject(new StError('NO_APP_NAME_OR_NO_APP_ID'));\r\n\r\n    return this.agent.getApp(nameOrId)\r\n      .then(response => new SmartApp(response))\r\n      .catch((err) => {\r\n        if (err.statusCode === 403) {\r\n          throw new StError('APP_NOT_FOUND', nameOrId);\r\n        }\r\n        throw err;\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Retrieve Smart-App in project\r\n   * @param {string} projPath Project path\r\n   * @returns {Promise.<SmartApp>}\r\n   *   A promise to be resolved with Smart-App\r\n   */\r\n  retrieveSmartAppInProject(projPath) {\r\n    return this.validateProjectConfig(projPath)\r\n      .then(config => this.retrieveSmartApp(config.endpointApp.appName));\r\n  }\r\n\r\n\r\n  /**\r\n   * Check if Smart-App exists\r\n   * @param {string} nameOrId App name or Id\r\n   * @returns {Promise.<boolean>}\r\n   *   A promise to be resolved with Smart-App existence\r\n   */\r\n  existsSmartApp(nameOrId) {\r\n    if (!nameOrId) return Promise.reject(new Error('needs app name or ID'));\r\n\r\n    return this.agent.getApp(nameOrId)\r\n      .then(() => true)\r\n      .catch(() => false);\r\n  }\r\n\r\n\r\n  /**\r\n   * Update Smart-App\r\n   * @param {SmartApp} smartAppConfig Smart App Configuration\r\n   * @returns {Promise.<SmartApp>} A promise to be resolved with Smart-App\r\n   */\r\n  updateSmartApp(smartAppConfig) {\r\n    return this.validateSmartAppConfig(smartAppConfig)\r\n      .then(() => this.updateApp(smartAppConfig));\r\n  }\r\n\r\n\r\n  /**\r\n   * Update Lambda Smart-App\r\n   * @param {string} nameOrId App name or Id\r\n   * @param {string} displayName App display name\r\n   * @param {string} description App description\r\n   * @param {boolean} singleInstance App is single instance\r\n   * @param {string[]} lambdaArn Existing Lambda Function ARN\r\n   * @returns {Promise.<SmartApp>} A promise to be resolved with Smart-App\r\n   */\r\n  updateLambdaSmartApp(nameOrId, displayName, description, singleInstance, lambdaArn) {\r\n    return this.retrieveSmartApp(nameOrId)\r\n      .then((appConfig) => {\r\n        const smartAppConfig = cloneDeep(appConfig);\r\n        if (displayName) smartAppConfig.displayName = displayName;\r\n        if (description) smartAppConfig.description = description;\r\n        if (singleInstance !== undefined) smartAppConfig.singleInstance = singleInstance;\r\n        if (lambdaArn) {\r\n          smartAppConfig.lambdaSmartApp = {\r\n            functions: Array.isArray(lambdaArn) ? lambdaArn : [lambdaArn],\r\n          };\r\n        }\r\n\r\n        this.emit('progress', `Updating Lambda Smart-App... ${nameOrId}`);\r\n        return this.updateSmartApp(smartAppConfig);\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Update Smart-App in project\r\n   * @param {string} projPath Project path\r\n   * @param {SmartApp} smartAppConfig Smart App Configuration\r\n   * @returns {Promise.<SmartApp>} A promise to be resolved with Smart-App\r\n   */\r\n  updateSmartAppInProject(projPath, smartAppConfig) {\r\n    let projConfig;\r\n\r\n    return this.validateProjectConfig(projPath)\r\n      .then((config) => {\r\n        projConfig = config;\r\n        return this.updateSmartAppInternalInProject(projPath, smartAppConfig);\r\n      })\r\n      .then((smartApp) => {\r\n        projConfig.endpointApp = smartAppConfig;\r\n        return ProjectConfigurator.updateConfig(projPath, projConfig)\r\n          .then(() => smartApp);\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Update Lambda Smart-App in project\r\n   * @param {string} projPath Project path\r\n   * @param {string} displayName App display name\r\n   * @param {string} description App description\r\n   * @param {boolean} singleInstance App is single instance\r\n   * @param {string[]} lambdaArn Existing Lambda Function ARN\r\n   * @returns {Promise.<SmartApp>} A promise to be resolved with Smart-App\r\n   */\r\n  updateLambdaSmartAppInProject(projPath, displayName, description, singleInstance, lambdaArn) {\r\n    return ProjectConfigurator.retrieveConfig(projPath)\r\n      .then((config) => {\r\n        const smartAppConfig = cloneDeep(config.endpointApp);\r\n        if (displayName) smartAppConfig.displayName = displayName;\r\n        if (description) smartAppConfig.description = description;\r\n        if (singleInstance !== undefined) smartAppConfig.singleInstance = singleInstance;\r\n        if (lambdaArn) {\r\n          smartAppConfig.lambdaSmartApp = {\r\n            functions: Array.isArray(lambdaArn) ? lambdaArn : [lambdaArn],\r\n          };\r\n        }\r\n\r\n        return this.updateSmartAppInProject(projPath, smartAppConfig);\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Delete Smart-App\r\n   * @param {string} nameOrId App name or Id\r\n   * @returns {Promise.<undefined>} A promise to be resolved with undefined\r\n   */\r\n  deleteSmartApp(nameOrId) {\r\n    if (!nameOrId) return Promise.reject(new StError('NO_APP_NAME_OR_NO_APP_ID'));\r\n\r\n    return this.agent.deleteApp(nameOrId);\r\n  }\r\n\r\n\r\n  /**\r\n   * Delete Lambda Smart-App\r\n   * @param {string} nameOrId App name or Id\r\n   * @param {boolean} forceDeleteLambda Force to delete Lambda Function\r\n   * @returns {Promise.<undefined>} A promise to be resolved with undefined\r\n   */\r\n  deleteLambdaSmartApp(nameOrId, forceDeleteLambda = false) {\r\n    if (!nameOrId) return Promise.reject(new StError('NO_APP_NAME_OR_NO_APP_ID'));\r\n\r\n    if (forceDeleteLambda) {\r\n      return this.retrieveSmartApp(nameOrId)\r\n        .then(smartApp => (\r\n          Promise.each(smartApp.lambdaSmartApp.functions, (func) => {\r\n            const lambdaAppName = func.split(':').slice(-1)[0];\r\n            return this.awsManager.deleteLambdaFunction(lambdaAppName);\r\n          })\r\n          .then(() => this.agent.deleteApp(nameOrId))));\r\n    }\r\n\r\n    return this.agent.deleteApp(nameOrId);\r\n  }\r\n\r\n\r\n  /**\r\n   * Delete Smart-App in project\r\n   * @param {string} projPath Project path\r\n   * @returns {Promise.<undefined>} A promise to be resolved with undefined\r\n   */\r\n  deleteSmartAppInProject(projPath) {\r\n    return this.validateProjectConfig(projPath)\r\n      .then(config => this.deleteSmartApp(config.endpointApp.appName));\r\n  }\r\n\r\n\r\n  /**\r\n   * Delete Lambda Smart-App in project\r\n   * @param {string} projPath Project path\r\n   * @param {boolean} forceDeleteLambda Force to delete Lambda Function\r\n   * @returns {Promise.<undefined>} A promise to be resolved with undefined\r\n   */\r\n  deleteLambdaSmartAppInProject(projPath, forceDeleteLambda) {\r\n    const lambdaAppPath = pathUtil.join(projPath, ProjectConfigurator.SMART_APP_DIR);\r\n    return this.validateProjectConfig(projPath)\r\n      .then(config => fs.exists(lambdaAppPath)\r\n        .then(exists => this.deleteLambdaSmartApp(config.endpointApp.appName,\r\n          forceDeleteLambda || exists)));\r\n  }\r\n\r\n\r\n  /**\r\n   * Update Smart-App's OAuth\r\n   * @param {string} nameOrId App name or Id\r\n   * @param {string=} clientName Client name\r\n   * @param {Array<string>=} scope Auth array\r\n   * @returns {Promise.<undefined>} A promise to be resolved with undefined\r\n   */\r\n  updateSmartAppOauth(nameOrId, clientName, scope) {\r\n    if (!nameOrId) return Promise.reject(new StError('NO_APP_NAME_OR_NO_APP_ID'));\r\n    if (scope && !Array.isArray(scope)) return Promise.reject(new StError('INVALID_SCOPE'));\r\n\r\n    const body = {\r\n      clientName,\r\n      scope,\r\n    };\r\n    return this.agent.updateAppOauth(nameOrId, body)\r\n      .then(response => ({\r\n        clientName: response.clientName || '',\r\n        scope: response.scope,\r\n      }));\r\n  }\r\n\r\n\r\n  /**\r\n   * Update Smart-App's OAuth in project\r\n   * @param {string} projPath Project path\r\n   * @param {string=} clientName Client name\r\n   * @param {Array<string>=} scope Auth array\r\n   * @returns {Promise.<undefined>} A promise to be resolved with undefined\r\n   */\r\n  updateSmartAppOauthInProject(projPath, clientName, scope) {\r\n    return this.validateProjectConfig(projPath)\r\n      .then(config => this.updateSmartAppOauth(config.endpointApp.appName, clientName, scope));\r\n  }\r\n\r\n\r\n  /**\r\n   * Retrieve Smart-App's OAuth\r\n   * @param {string} nameOrId App name or Id\r\n   * @returns {Promise.<Object>} A promise to be resolved with Oauth configuration\r\n   */\r\n  retrieveSmartAppOauth(nameOrId) {\r\n    if (!nameOrId) return Promise.reject(new StError('NO_APP_NAME_OR_NO_APP_ID'));\r\n\r\n    return this.agent.getAppOauth(nameOrId);\r\n  }\r\n\r\n\r\n  /**\r\n   * Retrieve Smart-App's OAuth in project\r\n   * @param {string} projPath Project path\r\n   * @returns {Promise.<Object>} A promise to be resolved with Oauth configuration\r\n   */\r\n  retrieveSmartAppOauthInProject(projPath) {\r\n    return this.validateProjectConfig(projPath)\r\n      .then(config => this.retrieveSmartAppOauth(config.endpointApp.appName));\r\n  }\r\n\r\n\r\n  /**\r\n   * Update Smart-App's settings\r\n   * @param {string} nameOrId App name or Id\r\n   * @param {Array<string>=} settings App settings in {key}:{value} ... form\r\n   * @returns {Promise.<Object|Error>} A promise to be resolved with App settings\r\n   */\r\n  updateSmartAppSettings(nameOrId, settings) {\r\n    if (!nameOrId) return Promise.reject(new StError('NO_APP_NAME_OR_NO_APP_ID'));\r\n    if (settings && !Array.isArray(settings)) return Promise.reject(new StError('INVALID_SETTINGS'));\r\n\r\n    const baseUrl = this.config.stCloud.uri;\r\n    const body = { settings: { baseUrl } };\r\n    settings.forEach((setting) => {\r\n      const key = setting.split(':')[0];\r\n      const value = setting.split(':').slice(1).join('');\r\n      body.settings[key] = value;\r\n    });\r\n    return this.agent.updateAppSettings(nameOrId, body);\r\n  }\r\n\r\n\r\n  /**\r\n   * Update Smart-App's settings in project\r\n   * @param {string} projPath Project path\r\n   * @param {Array<string>=} settings App settings in {key}:{value} ... form\r\n   * @returns {Promise.<Object|Error>} A promise to be resolved with App settings\r\n   */\r\n  updateSmartAppSettingsInProject(projPath, settings) {\r\n    return this.validateProjectConfig(projPath)\r\n      .then(config => this.updateSmartAppSettings(config.endpointApp.appName, settings));\r\n  }\r\n\r\n\r\n  /**\r\n   * Retrieve Smart-App's settings\r\n   * @param {string} nameOrId App name or Id\r\n   * @returns {Promise.<Object|Error>} A promise to be resolved with App settings\r\n   */\r\n  retrieveSmartAppSettings(nameOrId) {\r\n    if (!nameOrId) return Promise.reject(new StError('NO_APP_NAME_OR_NO_APP_ID'));\r\n\r\n    return this.agent.getAppSettings(nameOrId);\r\n  }\r\n\r\n\r\n  /**\r\n   * Retrieve Smart-App's settings in project\r\n   * @param {string} projPath Project path\r\n   * @returns {Promise.<Object|Error>} A promise to be resolved with App settings\r\n   */\r\n  retrieveSmartAppSettingsInProject(projPath) {\r\n    return this.validateProjectConfig(projPath)\r\n      .then(config => this.retrieveSmartAppSettings(config.endpointApp.appName));\r\n  }\r\n\r\n\r\n  /**\r\n   * Retrieve Smart-App's Lamabda configuration\r\n   * @param {string} projPath Project path\r\n   * @returns {Promise.<Object|Error>} A promise to be resolved with Lambda Configuration\r\n   */\r\n  retrieveLambdaConfig(projPath) {\r\n    const lambdaConfigPath = pathUtil.join(projPath, ProjectConfigurator.SMART_APP_DIR,\r\n      ProjectConfigurator.LAMBDA_CONFIG_FILE);\r\n\r\n    return fs.exists(lambdaConfigPath)\r\n      .then((exists) => {\r\n        if (!exists) {\r\n          throw new Error(`Lambda configuration file not found... ${lambdaConfigPath}`);\r\n        }\r\n\r\n        return fs.readJson(lambdaConfigPath);\r\n      })\r\n      .then((config) => {\r\n        const lambdaConfig = config;\r\n        lambdaConfig.role = this.config.aws.role;\r\n        return lambdaConfig;\r\n      });\r\n  }\r\n\r\n\r\n  validateSmartAppConfig(config) { // eslint-disable-line\r\n    if (config.appType === SmartApp.APP_TYPE.LAMBDA && !config.lambdaSmartApp) {\r\n      return Promise.reject(new Error('Missing \"lambdaSmartApp\" configuration'));\r\n    }\r\n    if (config.appType === SmartApp.APP_TYPE.WEBHOOK && !config.webhookSmartApp) {\r\n      return Promise.reject(new Error('Missing \"webhookSmartApp\" configuration'));\r\n    }\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n\r\n  validateProjectConfig(projPath) { // eslint-disable-line\r\n    return ProjectConfigurator.retrieveConfig(projPath)\r\n      .then((config) => {\r\n        if (config.type !== Project.PROJ_TYPE.AUTOMATION &&\r\n          config.type !== Project.PROJ_TYPE.C2C) {\r\n          throw new Error('Project type is not Automation or C2C');\r\n        }\r\n        if (!config.endpointApp) throw new StError('REGISTER_ENDPOINT_APP_NO_CONFIG');\r\n\r\n        return config;\r\n      });\r\n  }\r\n\r\n\r\n  createApp(appName, appType, impl, displayName, description, singleInstance) {\r\n    if (!appName) return Promise.reject(new Error('needs app name'));\r\n    if (!appType) return Promise.reject(new Error('needs app type'));\r\n    if (!impl) return Promise.reject(new Error('needs app implementation'));\r\n    if (!displayName) return Promise.reject(new Error('needs app display name'));\r\n    if (!description) return Promise.reject(new Error('needs app description'));\r\n\r\n    const smartApp = new SmartApp({ appName, appType, impl, displayName, description });\r\n    if (singleInstance !== undefined) smartApp.singleInstance = singleInstance;\r\n\r\n    return this.agent.createApp(smartApp.toRequestBody())\r\n      .then(({ app, oauthClientId, oauthClientSecret }) => {\r\n        const result = new SmartApp(app);\r\n        result.oauthClientId = oauthClientId;\r\n        result.oauthClientSecret = oauthClientSecret;\r\n\r\n        return result;\r\n      });\r\n  }\r\n\r\n\r\n  updateSmartAppInternalInProject(projPath, smartAppConfig) {\r\n    const smartAppDir = pathUtil.join(projPath, ProjectConfigurator.SMART_APP_DIR);\r\n    const appName = smartAppConfig.appName;\r\n\r\n    return fs.exists(smartAppDir)\r\n      .then((exists) => {\r\n        if (!exists) throw new Error(`Smart-App not found... ${appName}`);\r\n\r\n        if (smartAppConfig.appType === SmartApp.APP_TYPE.LAMBDA &&\r\n          smartAppConfig.lambdaSmartApp.functions.length === 0) {\r\n          return this.updateLambdaFunction(projPath);\r\n        }\r\n        return Promise.resolve();\r\n      })\r\n      .then((endpointInfo) => {\r\n        const updatedConfig = cloneDeep(smartAppConfig);\r\n        if (smartAppConfig.appType === SmartApp.APP_TYPE.LAMBDA && endpointInfo) {\r\n          updatedConfig.lambdaSmartApp.functions =\r\n            Array.isArray(endpointInfo) ? endpointInfo : [endpointInfo];\r\n        }\r\n\r\n        return this.updateApp(updatedConfig);\r\n      });\r\n  }\r\n\r\n\r\n  updateApp(smartAppConfig) {\r\n    const smartApp = new SmartApp(smartAppConfig);\r\n    const body = smartApp.toRequestBody();\r\n    delete body.appName; // NOTE: app update API body should not contain appName\r\n\r\n    return this.agent.updateApp(smartApp.appName, body)\r\n      .then(resp => new SmartApp(resp));\r\n  }\r\n\r\n\r\n  registerLambdaFunction(projPath) {\r\n    const lambdaAppPath = pathUtil.join(projPath, ProjectConfigurator.SMART_APP_DIR);\r\n    const outputPath = pathUtil.join(projPath, '.lambda-out');\r\n\r\n    return fs.exists(lambdaAppPath)\r\n      .then((exists) => {\r\n        if (!exists) throw new StError('REGISTER_ENDPOINT_APP_NO_LAMBDA');\r\n      })\r\n      .then(() => this.retrieveLambdaConfig(projPath))\r\n      .then(lambdaConfig => this.awsManager.existsLambdaFunction(lambdaConfig.name)\r\n        .then((exists) => {\r\n          if (exists) throw new Error(`Lambda Function already exists... ${lambdaConfig.name}`);\r\n\r\n          this.emit('progress', `> Function name: ${lambdaConfig.name}`);\r\n          const builder = new LambdaAppBuilder(this, lambdaAppPath, outputPath);\r\n          builder.on('progress', msg => this.emit('progress', `> ${msg}`));\r\n\r\n          return builder.build()\r\n            .then(() => {\r\n              this.emit('progress', '> Calling AWS API to create Lambda Function...');\r\n              const lambdaZipFile = pathUtil.join(outputPath,\r\n                LambdaAppBuilder.LAMBDA_ZIP_FILE_NAME);\r\n              return this.awsManager.createLambdaFunction(lambdaZipFile, lambdaConfig);\r\n            })\r\n            .then(response => response.FunctionArn)\r\n            .finally(() => {\r\n              builder.clean();\r\n            });\r\n        }));\r\n  }\r\n\r\n\r\n  cleanUpLambdaFunction(projPath) {\r\n    return this.retrieveLambdaConfig(projPath)\r\n      .then(lambdaConfig => this.awsManager.existsLambdaFunction(lambdaConfig.name)\r\n        .then((exists) => {\r\n          if (!exists) return Promise.resolve();\r\n\r\n          return this.awsManager.deleteLambdaFunction(lambdaConfig.name);\r\n        }));\r\n  }\r\n\r\n\r\n  updateLambdaFunction(projPath) {\r\n    const lambdaAppPath = pathUtil.join(projPath, ProjectConfigurator.SMART_APP_DIR);\r\n    const outputPath = pathUtil.join(projPath, '.lambda-out');\r\n\r\n    return fs.exists(lambdaAppPath)\r\n      .then((exists) => {\r\n        if (!exists) throw new StError('REGISTER_ENDPOINT_APP_NO_LAMBDA');\r\n      })\r\n      .then(() => this.retrieveLambdaConfig(projPath))\r\n      .then(lambdaConfig => this.awsManager.existsLambdaFunction(lambdaConfig.name)\r\n        .then((exists) => {\r\n          if (!exists) throw new Error(`Lambda Function not found... ${lambdaConfig.name}`);\r\n\r\n          this.emit('progress', `> Function name: ${lambdaConfig.name}`);\r\n          const builder = new LambdaAppBuilder(this, lambdaAppPath, outputPath);\r\n          builder.on('progress', msg => this.emit('progress', `> ${msg}`));\r\n\r\n          return builder.build()\r\n            .then(() => {\r\n              this.emit('progress', '> Calling AWS API to update Lambda Function...');\r\n              const lambdaZipFile = pathUtil.join(outputPath,\r\n                LambdaAppBuilder.LAMBDA_ZIP_FILE_NAME);\r\n              return this.awsManager.updateLambdaFunction(lambdaZipFile, lambdaConfig);\r\n            })\r\n            .then(response => response.FunctionArn)\r\n            .finally(() => {\r\n              builder.clean();\r\n            });\r\n        }));\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(SmartAppManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/SmartAppManager.js\n// module id = 41\n// module chunks = 0","/**\r\n * App Catalog type object\r\n *\r\n * @static\r\n * @property {string} SETUP 'setupApp'\r\n * @property {string} SERVICE 'serviceApp'\r\n * @property {string} AUTOMATION 'automationApp'\r\n * @memberof AppCatalog\r\n */\r\nconst APP_TYPE = Object.freeze({\r\n  SETUP: 'setupApp',\r\n  SERVICE: 'serviceApp',\r\n  AUTOMATION: 'automationApp',\r\n});\r\n\r\n/**\r\n * Check app type validity\r\n *\r\n * @static\r\n * @memberof AppCatalog\r\n * @param {string} type App type name\r\n * @returns {boolean} Type validity\r\n */\r\nfunction isValidAppType(type) {\r\n  return type === APP_TYPE.SETUP ||\r\n    type === APP_TYPE.SERVICE ||\r\n    type === APP_TYPE.AUTOMATION;\r\n}\r\n\r\n/**\r\n * Data model for Smart-App\r\n *\r\n * @property {string} appInternalName internal name of the app\r\n * @property {string} appType Type of the app (required).\r\n *   Once this has been set, it cannot be modified\r\n * @property {string} localizations Map of the localized data (optional).\r\n *   Key is the language and value is the localized data\r\n */\r\nclass AppCatalog {\r\n  /**\r\n   * @param {Object} response Response object\r\n   */\r\n  constructor({ appInternalName, appType, localizations }) {\r\n    this.appInternalName = appInternalName;\r\n    this.appType = appType;\r\n    this.localizations = localizations;\r\n  }\r\n}\r\n\r\nAppCatalog.APP_TYPE = APP_TYPE;\r\nAppCatalog.isValidAppType = isValidAppType;\r\n\r\nmodule.exports = AppCatalog;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/AppCatalog.js\n// module id = 42\n// module chunks = 0","module.exports = require(\"qs\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"qs\"\n// module id = 43\n// module chunks = 0","module.exports = require(\"debug\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"debug\"\n// module id = 44\n// module chunks = 0","const RequestManager = require('./RequestManager');\r\nconst { StatusCodeError } = require('request-promise/errors');\r\nconst qs = require('qs');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\nconst EventEmitter = require('events');\r\n\r\nconst INVALID_SSO_TOKEN_CODE = 'AUT_1882';\r\n\r\nclass AuthProviderAgent extends EventEmitter {\r\n  constructor(config) {\r\n    super();\r\n    const { uri: baseUri, proxy, rejectUnauthorized } = config;\r\n    this.requestManager = new RequestManager(baseUri, proxy, rejectUnauthorized);\r\n    this.requestManager.on('debug', msg => this.emit('debug', msg));\r\n  }\r\n\r\n  getAuthCodeBySsoToken(ssoToken, deviceId) {\r\n    const method = RequestManager.METHODS.GET;\r\n    const uri = '/auth/oauth2/authorize';\r\n    const query = {\r\n      response_type: 'code',\r\n      sso_token: ssoToken,\r\n      physical_address_text: deviceId,\r\n      service_type: 'W',\r\n      client_id: AuthProviderAgent.CLIENT_ID,\r\n      scope: 'iot.client iot.device iot.dev',\r\n      redirect_uri: 'https://get.authcode.from.ssotoken', // NOTE: No problem if it doesn't exist\r\n    };\r\n\r\n    const extraOptions = {\r\n      // NOTE: Don't follow redirect. We just get authCode from error response.\r\n      followRedirect: false,\r\n    };\r\n\r\n    return this.requestManager.request(method, uri, query, null, null, false, extraOptions)\r\n      .catch(StatusCodeError, (e) => {\r\n        if (!e.response.headers.location) {\r\n          let message = e.message.replace(/\\\\/g, '');\r\n          const subStringStartIndex = message.indexOf('{');\r\n          message = message.substring(subStringStartIndex, message.length).trim();\r\n          const error = JSON.parse(message);\r\n          if (error.error_code === INVALID_SSO_TOKEN_CODE) {\r\n            throw new StError('INVALID_SSO_TOKEN');\r\n          }\r\n          throw e;\r\n        }\r\n        return Promise.resolve(qs.parse(e.response.headers.location.split('?')[1]).code);\r\n      })\r\n      .catch((err) => {\r\n        if (err instanceof StError) throw err;\r\n        throw new StError('CANNOT_GET_AUTH_CODE', err);\r\n      });\r\n  }\r\n}\r\n\r\nAuthProviderAgent.CLIENT_ID = '3694457r8f';\r\n\r\nmodule.exports = new Proxy(AuthProviderAgent, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/AuthProviderAgent.js\n// module id = 45\n// module chunks = 0","const DevPortalAgent = require('./DevPortalAgent');\r\nconst { getServerConfig } = require('../common/util');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\nconst DEPRECATED_ID = 'a05c000000MPRri';\r\nconst PROGRAM_ID = 'a0G11000004qqOD';\r\n\r\nclass DevPortalManager {\r\n  /**\r\n   * @constructor\r\n   * @param {Object} configurator\r\n   * The configurator for retrieving and saving the configuration of dev portal.\r\n   */\r\n  constructor(configurator) {\r\n    this.configurator = configurator;\r\n  }\r\n\r\n  init(agent) {\r\n    const config = this.configurator.getConfig();\r\n    const serverConfig = getServerConfig(config, 'devPortal');\r\n    this.agent = agent || new DevPortalAgent(serverConfig);\r\n  }\r\n\r\n  requestEnrollmentData() {\r\n    const devPortal = this.configurator.get('devPortal');\r\n    const userId = this.configurator.get('userId');\r\n\r\n    if (!devPortal) throw new StError('NO_DEV_PORTAL');\r\n    if (!userId) throw new StError('NO_USER_ID');\r\n\r\n    let { programId } = devPortal;\r\n    if (!programId) throw new StError('NO_PROGRAM_ID');\r\n    if (programId === DEPRECATED_ID) {\r\n      this.configurator.set('devPortal.programId', PROGRAM_ID);\r\n      programId = PROGRAM_ID;\r\n    }\r\n\r\n    return this.agent.requestAccount(userId, programId)\r\n      .then((response) => {\r\n        const email = response.data.Contact.Email;\r\n        this.configurator.set('email', email);\r\n\r\n        const individualMnnm = response.data.Contact.Name;\r\n        const individualMnid = response.data.Contact.MNid__c;\r\n\r\n        const companyMnnm = response.data.Account.Name;\r\n        const companyMnid = response.data.Account.MNid__c;\r\n\r\n        const currentMnid = this.configurator.get('mnid');\r\n        const currentMnnm = this.configurator.get('mnnm');\r\n\r\n        const previousMnidMnnm =\r\n          (currentMnid === individualMnid && currentMnnm === individualMnnm) ||\r\n          (currentMnid === companyMnid && currentMnnm === companyMnnm);\r\n\r\n        // keep previous mnid and mnnm\r\n        if (!previousMnidMnnm) {\r\n          const hasCompany = companyMnnm !== 'Individual';\r\n          if (hasCompany) {\r\n            this.configurator.set('mnid', companyMnid);\r\n            this.configurator.set('mnnm', companyMnnm);\r\n          } else {\r\n            this.configurator.set('mnid', individualMnid);\r\n            this.configurator.set('mnnm', individualMnnm);\r\n          }\r\n        }\r\n\r\n\r\n        this.configurator.set('companyMnnm', companyMnnm);\r\n        this.configurator.set('companyMnid', companyMnid);\r\n\r\n        this.configurator.set('individualMnid', individualMnid);\r\n        this.configurator.set('individualMnnm', individualMnnm);\r\n      });\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(DevPortalManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/DevPortalManager.js\n// module id = 46\n// module chunks = 0","/*  eslint global-require: 0  */\r\nconst Promise = require('bluebird');\r\nconst HttpsProxyAgent = require('https-proxy-agent');\r\nconst fs = require('./FileSystemHandler');\r\nconst { getProxy } = require('../common/util');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\nconst AVAILABLE_AWS_REGIONS = ['us-east-1', 'us-east-2', 'eu-west-1', 'ap-northeast-2'];\r\nconst LAMBDA_ACTION = 'lambda:InvokeFunction';\r\nconst LAMBDA_STATEMENT_ID = 'smartthings';\r\n\r\nlet AWS;\r\n\r\nfunction initModule() {\r\n  // It consumes about 0.1 sec on linux to load this module.\r\n  // So it's loaded dynamically.\r\n  AWS = require('aws-sdk');\r\n}\r\n\r\n/**\r\n * AWS manager\r\n */\r\nclass AwsManager {\r\n  /**\r\n   * Setup config object\r\n   * @param {Object} config cli config object\r\n   */\r\n  constructor(config) {\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   * Initialize a AWS Manager\r\n   */\r\n  init() {\r\n    initModule();\r\n    const region = this.config.aws && this.config.aws.region;\r\n    if (region && AVAILABLE_AWS_REGIONS.indexOf(region) < 0) {\r\n      throw new StError('UNSUPPORTED_REGION', region, AVAILABLE_AWS_REGIONS.join(','));\r\n    }\r\n\r\n    const accessKeyId = this.config.aws && this.config.aws.accessKeyId;\r\n    const secretAccessKey = this.config.aws && this.config.aws.secretAccessKey;\r\n\r\n    const awsConfig = {\r\n      region,\r\n      accessKeyId,\r\n      secretAccessKey,\r\n    };\r\n\r\n\r\n    // proxy option\r\n    const proxy = getProxy(this.config, 'aws');\r\n    if (proxy) awsConfig.httpOptions = { agent: new HttpsProxyAgent(proxy) };\r\n\r\n    AWS.config.update(awsConfig);\r\n  }\r\n\r\n  /**\r\n   * Create AWS Lambda function\r\n   * @param {string} lambdaZipFile The zip file for Lambda Function\r\n   * @param {object} lambdaConfig Lambda Function configuration\r\n   * @returns {Promise.<Object>} A promise to be resolved with Lambda info\r\n   */\r\n  createLambdaFunction(lambdaZipFile, lambdaConfig) {\r\n    let lambdaFunction;\r\n\r\n    return fs.readFile(lambdaZipFile)\r\n      .then((zipData) => {\r\n        const { name, runtime, role, handler } = lambdaConfig;\r\n        if (!name) throw new StError('NO_LAMBDA_NAME');\r\n        if (!runtime) throw new StError('NO_LAMBDA_RUNTIME');\r\n        if (!role) throw new StError('NO_LAMBDA_ROLE');\r\n        if (!handler) throw new StError('NO_LAMBDA_HANDLER');\r\n\r\n        const awsLambda = new AWS.Lambda({\r\n          region: this.config.aws.region,\r\n          apiVersion: '2015-03-31',\r\n        });\r\n        const createLambdaFunction = Promise.promisify(\r\n          awsLambda.createFunction,\r\n          { context: awsLambda });\r\n        const params = {\r\n          FunctionName: name,\r\n          Runtime: runtime,\r\n          Role: role,\r\n          Handler: handler,\r\n          Code: { ZipFile: zipData },\r\n        };\r\n        return createLambdaFunction(params);\r\n      })\r\n      .then((resp) => {\r\n        lambdaFunction = resp;\r\n      })\r\n      .then(() => this.addStInvokePermission(lambdaConfig.name))\r\n      .then(() => lambdaFunction);\r\n  }\r\n\r\n\r\n  /**\r\n   * List AWS Lambda functions\r\n   * @returns {Promise.<Object>} A promise to be resolved with Lambda info\r\n   */\r\n  listLambdaFunctions() {\r\n    const awsLambda = new AWS.Lambda({\r\n      region: this.config.aws.region,\r\n      apiVersion: '2015-03-31',\r\n    });\r\n    const listFunctions = Promise.promisify(\r\n      awsLambda.listFunctions,\r\n      { context: awsLambda });\r\n    const params = {\r\n    };\r\n    return listFunctions(params);\r\n  }\r\n\r\n\r\n  /**\r\n   * Check AWS Lambda function exists\r\n   * @param {string} funcName Lambda Function name\r\n   * @returns {Promise.<boolean>} A promise to be resolved with Lambda existence\r\n   */\r\n  existsLambdaFunction(funcName) {\r\n    return this.listLambdaFunctions()\r\n      .then(resp => (resp.Functions &&\r\n          resp.Functions.filter(func => func.FunctionName === funcName).length > 0));\r\n  }\r\n\r\n  /**\r\n   * Update AWS Lambda function\r\n   * @param {string} lambdaZipFile The zip file for Lambda Function\r\n   * @param {object} lambdaConfig Lambda Function configuration\r\n   * @returns {Promise.<Object>} A promise to be resolved with Lambda info\r\n   */\r\n  updateLambdaFunction(lambdaZipFile, lambdaConfig) {\r\n    const awsLambda = new AWS.Lambda({\r\n      region: this.config.aws.region,\r\n      apiVersion: '2015-03-31',\r\n    });\r\n    const updateFunctionCode = Promise.promisify(\r\n      awsLambda.updateFunctionCode,\r\n      { context: awsLambda });\r\n    const updateFunctionConfiguration = Promise.promisify(\r\n      awsLambda.updateFunctionConfiguration,\r\n      { context: awsLambda });\r\n    let lambdaFunction;\r\n\r\n    return fs.readFile(lambdaZipFile)\r\n      .then((zipData) => {\r\n        const { name } = lambdaConfig;\r\n        if (!name) throw new StError('NO_LAMBDA_NAME');\r\n        const params = {\r\n          FunctionName: name,\r\n          ZipFile: zipData,\r\n        };\r\n        return updateFunctionCode(params);\r\n      })\r\n      .then(() => {\r\n        const { name, runtime, role, handler } = lambdaConfig;\r\n        if (!name) throw new StError('NO_LAMBDA_NAME');\r\n        if (!runtime) throw new StError('NO_LAMBDA_RUNTIME');\r\n        if (!role) throw new StError('NO_LAMBDA_ROLE');\r\n        if (!handler) throw new StError('NO_LAMBDA_HANDLER');\r\n        const params = {\r\n          FunctionName: name,\r\n          Runtime: runtime,\r\n          Role: role,\r\n          Handler: handler,\r\n        };\r\n        return updateFunctionConfiguration(params);\r\n      })\r\n      .then((resp) => {\r\n        lambdaFunction = resp;\r\n      })\r\n      .then(() => this.getLambdaPolicy(lambdaConfig.name))\r\n      .then((resp) => {\r\n        const policy = JSON.parse(resp.Policy);\r\n        if (policy.Statement && policy.Statement.find((s => s.Sid === 'smartthings'))) {\r\n          return this.removeStInvokePermission(lambdaConfig.name);\r\n        }\r\n\r\n        return Promise.resolve();\r\n      })\r\n      .then(() => this.addStInvokePermission(lambdaConfig.name))\r\n      .then(() => lambdaFunction);\r\n  }\r\n\r\n\r\n  /**\r\n   * Delete AWS Lambda function\r\n   * @param {string} funcName Lambda Function name\r\n   * @returns {Promise.<Object>} A promise to be resolved with Lambda info\r\n   */\r\n  deleteLambdaFunction(funcName) {\r\n    return this.existsLambdaFunction(funcName)\r\n      .then((exists) => {\r\n        if (!exists) throw new Error(`Lambda Function not found... ${funcName}`);\r\n\r\n        const awsLambda = new AWS.Lambda({\r\n          region: this.config.aws.region,\r\n          apiVersion: '2015-03-31',\r\n        });\r\n        const deleteFunction = Promise.promisify(\r\n          awsLambda.deleteFunction,\r\n          { context: awsLambda });\r\n\r\n        const params = {\r\n          FunctionName: funcName,\r\n        };\r\n        return deleteFunction(params);\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Add ST invoke permission to AWS Lambda function\r\n   * @param {string} name lambda function name\r\n   * @returns {Promise.<Object>} A promise to be resolved with Lambda info\r\n   */\r\n  addStInvokePermission(name) {\r\n    const awsLambda = new AWS.Lambda({\r\n      region: this.config.aws.region,\r\n      apiVersion: '2015-03-31',\r\n    });\r\n    const addPermission = Promise.promisify(\r\n      awsLambda.addPermission,\r\n      { context: awsLambda });\r\n    const params = {\r\n      Action: LAMBDA_ACTION,\r\n      FunctionName: name,\r\n      Principal: this.config.stCloud.awsAccount,\r\n      StatementId: LAMBDA_STATEMENT_ID,\r\n    };\r\n    return addPermission(params);\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove ST invoke permission from AWS Lambda function\r\n   * @param {string} name lambda function name\r\n   * @returns {Promise.<Object>} A promise to be resolved with Lambda info\r\n   */\r\n  removeStInvokePermission(name) {\r\n    const awsLambda = new AWS.Lambda({\r\n      region: this.config.aws.region,\r\n      apiVersion: '2015-03-31',\r\n    });\r\n    const removePermission = Promise.promisify(\r\n      awsLambda.removePermission,\r\n      { context: awsLambda });\r\n    const params = {\r\n      FunctionName: name,\r\n      StatementId: LAMBDA_STATEMENT_ID,\r\n    };\r\n    return removePermission(params);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get policy from AWS Lambda function\r\n   * @param {string} name lambda function name\r\n   * @returns {Promise.<Object>} A promise to be resolved with policy\r\n   */\r\n  getLambdaPolicy(name) {\r\n    const awsLambda = new AWS.Lambda({\r\n      region: this.config.aws.region,\r\n      apiVersion: '2015-03-31',\r\n    });\r\n    const getPolicy = Promise.promisify(\r\n      awsLambda.getPolicy,\r\n      { context: awsLambda });\r\n    const params = {\r\n      FunctionName: name,\r\n    };\r\n    return getPolicy(params);\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(AwsManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/AwsManager.js\n// module id = 47\n// module chunks = 0","module.exports = require(\"lodash/isEmpty\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash/isEmpty\"\n// module id = 48\n// module chunks = 0","const path = require('path');\r\nconst { getRoot } = require('../common/util');\r\nconst fs = require('./FileSystemHandler');\r\nconst MetaDataGenerator = require('./MetaDataGenerator');\r\nconst Promise = require('bluebird');\r\nconst Capability = require('../models/Capability');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\nconst StCloudAgent = require('./StCloudAgent');\r\nconst { getServerConfig } = require('../common/util');\r\n\r\nfunction sortByVersion(items, order) {\r\n  return items.sort((a, b) => {\r\n    const verA = a.version;\r\n    const verB = b.version;\r\n    let comparison = 0;\r\n    if (verA > verB) {\r\n      comparison = 1;\r\n    } else if (verA < verB) {\r\n      comparison = -1;\r\n    }\r\n    // default desc\r\n    if (!order || order.tolowercase() === 'desc') {\r\n      return comparison;\r\n    }\r\n    return comparison * -1; // asc\r\n  });\r\n}\r\n\r\n/**\r\n * Capability Manager. Call init() before use.\r\n */\r\nclass CapabilityManager {\r\n\r\n  constructor(config) {\r\n    this.config = config || {};\r\n  }\r\n\r\n  init(agent) {\r\n    this.capabilitiesFilePath = path.resolve(getRoot(), 'assets/capabilities/capabilities.json');\r\n    this.mapToResourcesFilePath = path.resolve(getRoot(), 'assets/capabilities/mapToResources.json');\r\n    this.metaDataGenerator = new MetaDataGenerator();\r\n\r\n    const { accessToken } = this.config;\r\n    const serverConfig = getServerConfig(this.config, 'stCloud');\r\n    this.agent = agent || new StCloudAgent(accessToken, serverConfig);\r\n  }\r\n\r\n  /**\r\n   * List supported capabilities\r\n   * @param {object} searchCriteria condition for searching capabilities\r\n   * @returns {(Promise<object|error>)}\r\n   * A promise is resolved with object that has id property or is rejected with an error.\r\n   */\r\n  retrieveCapabilityList(searchCriteria) {\r\n    let capabilityIds = {};\r\n    let mapToResourcesList = {};\r\n    const capabilities = [];\r\n\r\n    return fs.readFile(this.capabilitiesFilePath)\r\n    .then((buffer) => {\r\n      capabilityIds = JSON.parse(buffer.toString());\r\n      return fs.readFile(this.mapToResourcesFilePath);\r\n    })\r\n    .then((buffer) => {\r\n      mapToResourcesList = JSON.parse(buffer.toString());\r\n      return Object.keys(capabilityIds);\r\n    })\r\n    .map((id) => {\r\n      let canBeUsedAsMainState;\r\n      let canBeUsedAsMainAction;\r\n\r\n      const mapToResources = mapToResourcesList[id];\r\n      if (!mapToResources) throw new StError('CANNOT_FIND_MAP_TO_RESOURCES', id);\r\n      const components = mapToResources.map(r => r.component);\r\n      if (components.length === 0) throw new StError('CANNOT_FIND_COMPONENTS', id);\r\n\r\n      return Promise.resolve()\r\n        .then(() => {\r\n          const promises = components.map(cid => this.canBeUsedAsMainState(id, cid));\r\n          return Promise.reduce(promises,\r\n            (acc, canBeUsed) => { if (canBeUsed) return true; return acc; }, false);\r\n        })\r\n        .then((mainState) => {\r\n          canBeUsedAsMainState = mainState;\r\n          const promises = components.map(cid => this.canBeUsedAsMainAction(id, cid));\r\n          return Promise.reduce(promises,\r\n            (acc, canBeUsed) => { if (canBeUsed) return true; return acc; }, false);\r\n        })\r\n        .then((mainAction) => {\r\n          canBeUsedAsMainAction = mainAction;\r\n          const capability = new Capability(id, canBeUsedAsMainAction, canBeUsedAsMainState,\r\n            mapToResources, components);\r\n          capabilities.push(capability);\r\n        });\r\n    })\r\n    .then(() => {\r\n      if (searchCriteria) {\r\n        if (searchCriteria.mainState && searchCriteria.mainAction) {\r\n          return capabilities.filter(capability => capability.mainState && capability.mainAction);\r\n        } else if (searchCriteria.mainState && !searchCriteria.mainAction) {\r\n          return capabilities.filter(capability => capability.mainState);\r\n        } else if (!searchCriteria.mainState && searchCriteria.mainAction) {\r\n          return capabilities.filter(capability => capability.mainAction);\r\n        }\r\n      }\r\n      return null;\r\n    })\r\n    .then(() => {\r\n      if (searchCriteria && searchCriteria.sdkOnly) {\r\n        return capabilities;\r\n      }\r\n      return this.retrieveCapabilityListFromSTCloud().then((stCapabilites) => {\r\n        const retCpbtList = [];\r\n        stCapabilites.forEach((stCpbt) => {\r\n          capabilities.forEach((cpbt) => {\r\n            const capability = cpbt;\r\n            if (cpbt.id === stCpbt.id) {\r\n              capability.status = stCpbt.status;\r\n              capability.version = stCpbt.version;\r\n              retCpbtList.push(capability);\r\n            }\r\n          });\r\n          const found = capabilities.find(cp => cp.id === stCpbt.id);\r\n          if (!found) {\r\n            retCpbtList.push(\r\n              new Capability(stCpbt.id, null, null, null, null, stCpbt.version, stCpbt.status)\r\n            );\r\n          }\r\n        });\r\n        return retCpbtList;\r\n      });\r\n    })\r\n    .then(resultCpbtList => resultCpbtList.sort((a, b) => {\r\n      if (a.id < b.id) return -1;\r\n      if (a.id > b.id) return 1;\r\n      return 0;\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Returns a boolean that indicates the capability can be used as main action.\r\n   * @param {string} id The id of capability.\r\n   * @param {string} component The id of component.\r\n   * @return {Promise<object|error>}\r\n   * A promise is resolved with boolean or is rejected with an error.\r\n   */\r\n  canBeUsedAsMainAction(id, component) {\r\n    return this.metaDataGenerator.retrieveCapabilityMapperFile(id, component, true)\r\n      .then((capabilityInfo) => {\r\n        if (!capabilityInfo.ma || capabilityInfo.ma.length === 0) return false;\r\n        return true;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Returns a boolean that indicates the capability can be used as main state.\r\n   * @param {string} id The id of capability.\r\n   * @param {string} component The id of component.\r\n   * @return {Promise<object|error>}\r\n   * A promise is resolved with boolean or is rejected with an error.\r\n   */\r\n  canBeUsedAsMainState(id, component) {\r\n    return this.metaDataGenerator.retrieveCapabilityMapperFile(id, component, true)\r\n      .then((capabilityInfo) => {\r\n        if (!capabilityInfo.ms || capabilityInfo.ms.length === 0) return false;\r\n        return true;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Retrieve the mapping from capability to resources\r\n   * @returns {(Promise<object|error>)}\r\n   * A promise is resolved with mapping object or is rejected with an error.\r\n   */\r\n  retrieveCapabilityToResourcesMapping() {\r\n    return fs.readFile(this.mapToResourcesFilePath, 'utf8')\r\n      .then(data => JSON.parse(data));\r\n  }\r\n\r\n  /**\r\n   * Retrieve the capability\r\n   * @param {string} id The id of capability.\r\n   * @param {string} [version] The version of capability.\r\n   * @returns {(Promise<object|error>)}\r\n   * A promise is resolved with capability object or is rejected with an error.\r\n   */\r\n  retrieveCapability(id, version) {\r\n    if (!version) {\r\n      return this.retrieveCapabilityVersionList(id, 'asc')\r\n        .then(sortedList => this.agent.getCapability(id, sortedList[0].version));\r\n    }\r\n    return this.agent.getCapability(id, version);\r\n  }\r\n\r\n  /**\r\n   * Retrieve the capability's version list\r\n   * @param {string} id The id of capability.\r\n   * @param {string} order The sort order of capability version. 'asc' or 'desc'\r\n   * @returns {(Promise<object|error>)}\r\n   * A promise is resolved with capability object or is rejected with an error.\r\n   */\r\n  retrieveCapabilityVersionList(id, order) {\r\n    return this.agent.getCapabilityVersionList(id, order)\r\n      .then(resp => sortByVersion(resp.items));\r\n  }\r\n\r\n/**\r\n   * Retrieve the capability list from STCloud\r\n   * @returns {(Promise<object|error>)}\r\n   * A promise is resolved with capabilities object or is rejected with an error.\r\n   */\r\n  retrieveCapabilityListFromSTCloud() {\r\n    return this.agent.getCapabilityList()\r\n      .then(resp => resp.items.sort((a, b) => {\r\n        if (a.id.toLowerCase() < b.id.toLowerCase()) return -1;\r\n        if (a.id.toLowerCase() > b.id.toLowerCase()) return 1;\r\n        return 0; // asc\r\n      }));\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(CapabilityManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/CapabilityManager.js\n// module id = 49\n// module chunks = 0","/**\r\n * Data model that contains OCF Device Basic information\r\n *\r\n * @property {string} n Device name\r\n * @property {string[]} rt resource type list\r\n * @property {string} icv OIC server version\r\n * @property {string} dmv Data model version\r\n */\r\nclass OcfDeviceInfo {\r\n  constructor(n) {\r\n    this.n = n;\r\n    // this.rt\r\n    // this.icv\r\n    // this.dmv\r\n  }\r\n}\r\nmodule.exports = OcfDeviceInfo;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/OcfDeviceInfo.js\n// module id = 50\n// module chunks = 0","/**\r\n * Data model that contains OCF Device Platform information\r\n *\r\n * @property {string} n Device name\r\n * @property {string[]} rt resource type list\r\n * @property {string} icv OIC server version\r\n * @property {string} dmv Data model version\r\n */\r\nclass OcfDevicePlatform {\r\n  constructor(mnmn, vid) {\r\n    this.mnmn = mnmn;\r\n    // this.mnml\r\n    // this.mnmo\r\n    // this.mndt\r\n    // this.mnpv\r\n    // this.mnos\r\n    // this.mnhw\r\n    // this.mnfv\r\n    this.vid = vid;\r\n  }\r\n}\r\nmodule.exports = OcfDevicePlatform;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/OcfDevicePlatform.js\n// module id = 51\n// module chunks = 0","const os = require('os');\r\nconst fs = require('fs-extra');\r\nconst path = require('path');\r\nconst Store = require('data-store');\r\nconst uuid = require('uuid/v4');\r\nconst EventEmitter = require('events');\r\nconst Configuration = require('../models/Configuration');\r\nconst { merge, has, get, set, unset } = require('lodash');\r\nconst { getFlatKeys, getServerConfig, encodeBase64, decodeBase64 } = require('../common/util');\r\nconst StError = require('../errors/StError');\r\nconst StLogger = require('../common/StLogger');\r\nconst getClassLogger = require('../common/getClassLogger');\r\nconst CertManager = require('./CertManager');\r\n\r\nconst VALID_CONFIG_KEYS = [\r\n  'accessToken',\r\n  'accessTokenExpireDate',\r\n  'adbPath',\r\n  'authCode',\r\n  'authState',\r\n  'authProvider.proxy',\r\n  'authProvider.rejectUnauthorized',\r\n  'authProvider.uri',\r\n  'aws.accessKeyId',\r\n  'aws.proxy',\r\n  'aws.region',\r\n  'aws.role',\r\n  'aws.secretAccessKey',\r\n  'deviceId',\r\n  'devPortal.programId',\r\n  'devPortal.proxy',\r\n  'devPortal.rejectUnauthorized',\r\n  'devPortal.uri',\r\n  'iotCloud.proxy',\r\n  'iotCloud.redirecturi',\r\n  'iotCloud.rejectUnauthorized',\r\n  'iotCloud.serverCert',\r\n  'iotCloud.uri',\r\n  'iotCloud.useRedirection',\r\n  'iotConsole.proxy',\r\n  'iotConsole.rejectUnauthorized',\r\n  'iotConsole.uri',\r\n  'mnid',\r\n  'mnnm',\r\n  'individualMnid',\r\n  'individualMnnm',\r\n  'companyMnid',\r\n  'companyMnnm',\r\n  'proxy',\r\n  'refreshToken',\r\n  'refreshTokenExpireDate',\r\n  'securityPath',\r\n  'ssoToken',\r\n  'stCloud.awsAccount',\r\n  'stCloud.proxy',\r\n  'stCloud.rejectUnauthorized',\r\n  'stCloud.uri',\r\n  'userId',\r\n  'email',\r\n  'logLevel',\r\n];\r\n\r\nconst SECURITY_PROPERTIES = [\r\n  'accessToken',\r\n  'accessTokenExpireDate',\r\n  'authCode',\r\n  'authState',\r\n  'aws.accessKeyId',\r\n  'aws.proxy',\r\n  'aws.region',\r\n  'aws.role',\r\n  'aws.secretAccessKey',\r\n  'mnid',\r\n  'mnnm',\r\n  'individualMnid',\r\n  'individualMnnm',\r\n  'companyMnid',\r\n  'companyMnnm',\r\n  'refreshToken',\r\n  'refreshTokenExpireDate',\r\n  'ssoToken',\r\n  'userId',\r\n  'email',\r\n];\r\n\r\nconst DEFAULT_CONFIG_DIR_NAME = '.iotcloud';\r\nconst DEFAULT_CONFIG_PATH = path.resolve(os.homedir(), DEFAULT_CONFIG_DIR_NAME);\r\nconst DEFAULT_SECURITY_PATH = DEFAULT_CONFIG_PATH;\r\nconst SECURITY_FILE_NAME = 'security';\r\n\r\n/** Class manages configuration in local file system. Call init() before use. */\r\nclass Configurator extends EventEmitter {\r\n  /**\r\n   * Create a Configurator\r\n   * @param {string} toolConfigFilePath A path of tool configuration file.\r\n   * @param {string} [systemConfigFilePath] A path of system configuration file.\r\n   * Default path is os.homedir() + '/.iotcloud/system/config.json'\r\n   * The file extension must be '.json'.\r\n   */\r\n  constructor(toolConfigFilePath, systemConfigFilePath) {\r\n    super();\r\n    this.toolConfigFilePath = toolConfigFilePath;\r\n    this.toolConfigDirPath = path.dirname(this.toolConfigFilePath);\r\n    this.toolConfigDirName = path.basename(this.toolConfigDirPath);\r\n    this.toolConfigFileName = path.basename(this.toolConfigFilePath, '.json');\r\n\r\n    this.systemConfigFilePath =\r\n      systemConfigFilePath || path.resolve(DEFAULT_CONFIG_PATH, 'system/config.json');\r\n    this.systemConfigDirPath = path.dirname(this.systemConfigFilePath);\r\n    this.systemConfigFileName = path.basename(this.systemConfigFilePath, '.json');\r\n    this.oldProxyInToolConfig = null;\r\n  }\r\n\r\n  /**\r\n   * @static\r\n   * This method returns specified server config applying proxy policy.\r\n   * @param {object} config A config object to resolve.\r\n   * @param {string} serverName A server name to resolve.\r\n   * @returns {object} A config object for specified server applying proxy policy.\r\n   */\r\n  static getServerConfig(config, serverName) {\r\n    return getServerConfig(config, serverName);\r\n  }\r\n\r\n  /**\r\n   * @static\r\n   * This method generate default configuration file in default path.\r\n   * The Configuration is filled with default properties. Randomly generated device id, etc...\r\n   * @returns {Configurator} A default configurator.\r\n   */\r\n  static getDefault() {\r\n    const defaultConfigPath = path.resolve(DEFAULT_CONFIG_PATH, 'cli/config.json');\r\n    const configurator = new Configurator(defaultConfigPath);\r\n    configurator.init();\r\n\r\n    return configurator;\r\n  }\r\n\r\n  static isValidKey(key) {\r\n    if (typeof key !== 'string') return false;\r\n    return VALID_CONFIG_KEYS.includes(key);\r\n  }\r\n\r\n  static getDefaultToolConfig() {\r\n    return {\r\n      deviceId: uuid(),\r\n      logLevel: 'INFO',\r\n    };\r\n  }\r\n\r\n  static getDefaultSystemConfig() {\r\n    return {\r\n      proxy: '',\r\n      adbPath: '',\r\n      securityPath: encodeBase64(DEFAULT_SECURITY_PATH),\r\n      authProvider: {\r\n        uri: 'https://us-auth2.samsungosp.com',\r\n        rejectUnauthorized: true,\r\n      },\r\n      devPortal: {\r\n        uri: 'https://devportalapi.developer.samsung.com:7020',\r\n        programId: 'a0Df40000002PHv',\r\n        rejectUnauthorized: true,\r\n      },\r\n      iotCloud: {\r\n        uri: 'coaps+tcp://connect.samsungiotcloud.com:443',\r\n        useRedirection: true,\r\n        rejectUnauthorized: true,\r\n      },\r\n      iotConsole: {\r\n        uri: 'https://devworkspace.developer.samsung.com/smartthingsconsole/iotdev',\r\n        rejectUnauthorized: true,\r\n      },\r\n      stCloud: {\r\n        uri: 'https://api.smartthings.com/v1',\r\n        awsAccount: '906037444270',\r\n        rejectUnauthorized: true,\r\n      },\r\n    };\r\n  }\r\n\r\n  static getDefaultSecurityConfig() {\r\n    return {\r\n      accessToken: '',\r\n      accessTokenExpireDate: '',\r\n      authCode: '',\r\n      authState: '',\r\n      companyMnid: '',\r\n      companyMnnm: '',\r\n      email: '',\r\n      individualMnid: '',\r\n      individualMnnm: '',\r\n      mnid: '',\r\n      mnnm: '',\r\n      refreshToken: '',\r\n      refreshTokenExpireDate: '',\r\n      ssoToken: '',\r\n      userId: '',\r\n    };\r\n  }\r\n\r\n  static getDefaultConfig() {\r\n    const toolConfig = Configurator.getDefaultToolConfig();\r\n    const systemConfig = Configurator.getDefaultSystemConfig();\r\n    const securityConfig = Configurator.getDefaultSecurityConfig();\r\n    const config = merge({}, systemConfig, toolConfig, securityConfig);\r\n    return new Configuration(config);\r\n  }\r\n\r\n  static isStageMode(config) {\r\n    const { iotCloud: iotCloudProd, stCloud: stCloudProd } = Configurator.getDefaultConfig();\r\n    const { iotCloud, stCloud } = config;\r\n\r\n    return !(iotCloud.uri === iotCloudProd.uri && stCloud.uri === stCloudProd.uri);\r\n  }\r\n\r\n  static isProductionMode(config) {\r\n    const { iotCloud: iotCloudProd, stCloud: stCloudProd } = Configurator.getDefaultConfig();\r\n    const { iotCloud, stCloud } = config;\r\n\r\n    return (iotCloud.uri === iotCloudProd.uri && stCloud.uri === stCloudProd.uri);\r\n  }\r\n\r\n  static getMode(config) {\r\n    const iotConsoleUri = config.iotConsole.uri;\r\n    if (iotConsoleUri.startsWith('https://d-')) return 'develop';\r\n    if (iotConsoleUri.startsWith('https://s-')) return 'stage';\r\n    if (iotConsoleUri.startsWith('https://dev')) return 'production';\r\n    if (iotConsoleUri.startsWith('http://local')) return 'local';\r\n    return 'develop';\r\n  }\r\n\r\n  changeMode(mode) {\r\n    if (mode === 'stage') {\r\n      this.set('authProvider.uri', 'https://us-auth2.samsungosp.com');\r\n      this.set('devPortal.uri', 'https://s-devportalapi.developer.samsung.com:7020');\r\n      this.set('devPortal.programId', 'a0G11000004qqOD');\r\n      this.set('iotCloud.uri', 'coaps+tcp://connects.samsungiots.com:443');\r\n      this.set('iotConsole.uri', 'https://s-devworkspace.developer.samsung.com/smartthingsconsole/iotdev');\r\n      this.set('stCloud.uri', 'https://apis.smartthingsgdev.com');\r\n      this.set('stCloud.awsAccount', '084870046141');\r\n      this.save();\r\n    } else if (mode === 'production') {\r\n      this.set('authProvider.uri', 'https://us-auth2.samsungosp.com');\r\n      this.set('devPortal.uri', 'https://devportalapi.developer.samsung.com:7020');\r\n      this.set('devPortal.programId', 'a0Df40000002PHv');\r\n      this.set('iotCloud.uri', 'coaps+tcp://connect.samsungiotcloud.com:443');\r\n      this.set('iotConsole.uri', 'https://devworkspace.developer.samsung.com/smartthingsconsole/iotdev');\r\n      this.set('stCloud.uri', 'https://api.smartthings.com/v1');\r\n      this.set('stCloud.awsAccount', '906037444270');\r\n      this.save();\r\n    } else if (mode === 'develop') {\r\n      this.set('authProvider.uri', 'https://stg-us-auth2.samsungosp.com');\r\n      this.set('devPortal.uri', 'http://d-devportalapi.developer.samsung.com:7020');\r\n      this.set('devPortal.programId', 'a05c000000MPWdo');\r\n      this.set('iotCloud.uri', 'coaps+tcp://connectd.samsungiots.com:443');\r\n      this.set('iotConsole.uri', 'https://d-devworkspace.developer.samsung.com/smartthingsconsole/iotdev');\r\n      this.set('stCloud.uri', 'https://apid.smartthingsgdev.com');\r\n      this.set('stCloud.awsAccount', '084870046141');\r\n      this.save();\r\n    } else {\r\n      throw new StError('UNSUPPORTED_MODE', mode);\r\n    }\r\n    const cm = new CertManager(this.getConfig());\r\n    cm.init();\r\n    cm.clearSecurityProfile();\r\n  }\r\n\r\n  changeMnidType(type) {\r\n    if (type !== 'company' && type !== 'individual') {\r\n      return Promise.reject(new StError('UNSUPPORTED_MNID_TYPE'));\r\n    }\r\n\r\n    const mnid = this.get('mnid');\r\n    const mnnm = this.get('mnnm');\r\n\r\n    if (type === 'company') {\r\n      const companyMnid = this.get('companyMnid');\r\n      const companyMnnm = this.get('companyMnnm');\r\n      if (!companyMnid || !companyMnnm) return Promise.reject(new StError('NO_COMPANY_INFORMATION'));\r\n      if (companyMnnm.toLowerCase() === 'individual') {\r\n        return Promise.reject(new StError('CANNOT_CHANGE_COMPANY_MNID'));\r\n      }\r\n\r\n      const shouldChange = mnid !== companyMnid || mnnm !== companyMnnm;\r\n\r\n      if (shouldChange) {\r\n        this.set('mnid', companyMnid);\r\n        this.set('mnnm', companyMnnm);\r\n        return this.issueNewDeviceCert()\r\n          .catch((e) => {\r\n            this.set('mnid', mnid);\r\n            this.set('mnnm', mnnm);\r\n            throw e;\r\n          });\r\n      }\r\n    } else {\r\n      const individualMnid = this.get('individualMnid');\r\n      const individualMnnm = this.get('individualMnnm');\r\n      if (!individualMnid || !individualMnnm) {\r\n        return Promise.reject(new StError('NO_INDIVIDUAL_INFORMATION'));\r\n      }\r\n\r\n      const shouldChange = mnid !== individualMnid || mnnm !== individualMnnm;\r\n\r\n      if (shouldChange) {\r\n        this.set('mnid', individualMnid);\r\n        this.set('mnnm', individualMnnm);\r\n        return this.issueNewDeviceCert()\r\n          .catch((e) => {\r\n            this.set('mnid', mnid);\r\n            this.set('mnnm', mnnm);\r\n            throw e;\r\n          });\r\n      }\r\n    }\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  issueNewDeviceCert() {\r\n    const cm = new CertManager(this.getConfig());\r\n    cm.init();\r\n    return cm.checkDeviceKeyCert()\r\n      .then(() => {}, () => cm.createDeviceCert())\r\n      .catch((err) => { throw new StError('REQUESTING_DEVICE_CERT_FAILED', err); });\r\n  }\r\n\r\n  setToolConfig(config) {\r\n    const toolConfig = Configurator.filterToolConfig(config);\r\n    this.toolConfig.clear();\r\n    this.toolConfig.set(toolConfig);\r\n  }\r\n\r\n  setSystemConfig(config) {\r\n    const systemConfig = Configurator.filterSystemConfig(config);\r\n    this.systemConfig.set(systemConfig);\r\n  }\r\n\r\n  setSecurityConfig(config) {\r\n    const securityConfig = Configurator.filterSecurityConfig(config);\r\n    this.securityConfig.set(securityConfig);\r\n  }\r\n\r\n  static filterToolConfig(config) {\r\n    const keys = getFlatKeys(config);\r\n    const toolKeys = keys.filter(key =>\r\n      !Configurator.isSystemProperty(key) && !Configurator.isSecurityProperty(key));\r\n    const toolConfig = {};\r\n    toolKeys.reduce((acc, toolKey) => {\r\n      const toolValue = get(config, toolKey);\r\n      set(acc, toolKey, toolValue);\r\n      return acc;\r\n    }, toolConfig);\r\n    return toolConfig;\r\n  }\r\n\r\n  static filterSystemConfig(config) {\r\n    const keys = getFlatKeys(config);\r\n    const systemKeys = keys.filter(key => Configurator.isSystemProperty(key));\r\n    const systemConfig = {};\r\n    systemKeys.reduce((acc, systemKey) => {\r\n      const systemValue = systemKey === 'securityPath'\r\n        ? encodeBase64(get(config, systemKey))\r\n        : get(config, systemKey);\r\n      set(acc, systemKey, systemValue);\r\n      return acc;\r\n    }, systemConfig);\r\n    return systemConfig;\r\n  }\r\n\r\n  static filterSecurityConfig(config) {\r\n    const keys = getFlatKeys(config);\r\n    const securityKeys = keys.filter(key => Configurator.isSecurityProperty(key));\r\n    const securityConfig = {};\r\n    securityKeys.reduce((acc, securityKey) => {\r\n      set(acc, securityKey, get(config, securityKey));\r\n      return acc;\r\n    }, securityConfig);\r\n    return securityConfig;\r\n  }\r\n\r\n  static isSystemProperty(key) {\r\n    return has(Configurator.getDefaultSystemConfig(), key) || key.endsWith('.proxy');\r\n  }\r\n\r\n  static isSecurityProperty(key) {\r\n    return SECURITY_PROPERTIES.includes(key);\r\n  }\r\n\r\n  initToolConfig() {\r\n    const toolConfigOption = {};\r\n    let loadedToolConfig = {};\r\n\r\n    // initialize config\r\n    toolConfigOption.cwd = this.toolConfigDirPath;\r\n    this.toolConfig = new Store(this.toolConfigFileName, toolConfigOption);\r\n\r\n    const defaultToolConfig = Configurator.getDefaultToolConfig();\r\n    if (fs.pathExistsSync(this.toolConfigFilePath)) {\r\n      try {\r\n        loadedToolConfig = fs.readJsonSync(this.toolConfigFilePath);\r\n        if (has(loadedToolConfig, 'proxy')) {\r\n          unset(loadedToolConfig, 'proxy');\r\n          this.toolConfig.del('proxy');\r\n        }\r\n      } catch (e) {\r\n        throw new StError('CANNOT_LOAD_CONFIGURATION_FILE', this.toolConfigFilePath);\r\n      }\r\n\r\n      loadedToolConfig = merge({}, defaultToolConfig, loadedToolConfig);\r\n    } else {\r\n      loadedToolConfig = defaultToolConfig;\r\n    }\r\n\r\n    // update configuration\r\n    this.toolConfig.set(loadedToolConfig);\r\n\r\n    // set log level\r\n    StLogger.setLogLevel(this.toolConfig.get('logLevel'));\r\n  }\r\n\r\n  initSystemConfig() {\r\n    const systemConfigOption = {};\r\n    let loadedSystemConfig = {};\r\n\r\n    // initialize config\r\n    systemConfigOption.cwd = this.systemConfigDirPath;\r\n    this.systemConfig = new Store(this.systemConfigFileName, systemConfigOption);\r\n\r\n    const defaultSystemConfig = Configurator.getDefaultSystemConfig();\r\n    if (fs.pathExistsSync(this.systemConfigFilePath)) {\r\n      try {\r\n        loadedSystemConfig = fs.readJsonSync(this.systemConfigFilePath);\r\n\r\n        // remove unused system configuration keys\r\n        if (has(loadedSystemConfig, 'iotCloud.redirecturi')) {\r\n          unset(loadedSystemConfig, 'iotCloud.redirecturi');\r\n          this.systemConfig.del('iotCloud.redirecturi');\r\n        }\r\n\r\n        if (has(loadedSystemConfig, 'iotCloud.serverCert')) {\r\n          unset(loadedSystemConfig, 'iotCloud.serverCert');\r\n          this.systemConfig.del('iotCloud.serverCert');\r\n        }\r\n      } catch (e) {\r\n        throw new StError('CANNOT_LOAD_CONFIGURATION_FILE', this.systemConfigFilePath);\r\n      }\r\n      loadedSystemConfig = merge({}, defaultSystemConfig, loadedSystemConfig);\r\n    } else {\r\n      loadedSystemConfig = defaultSystemConfig;\r\n\r\n      // apply old proxy setting for compat\r\n      if (this.oldProxyInToolConfig) {\r\n        loadedSystemConfig.proxy = this.oldProxyInToolConfig;\r\n      }\r\n    }\r\n\r\n    // update configuration\r\n    this.systemConfig.set(loadedSystemConfig);\r\n  }\r\n\r\n  initSecurityConfig() {\r\n    const securityBasePath = this.get('securityPath');\r\n    const securityDirPath = path.resolve(securityBasePath, this.toolConfigDirName);\r\n    const securityFilePath = path.resolve(securityDirPath, `${SECURITY_FILE_NAME}.json`);\r\n    this.securityConfig = new Store(SECURITY_FILE_NAME, { cwd: securityDirPath });\r\n\r\n    let loadedSecurityConfig = Configurator.getDefaultSecurityConfig();\r\n    if (fs.pathExistsSync(securityFilePath)) {\r\n      try {\r\n        loadedSecurityConfig = fs.readJsonSync(securityFilePath);\r\n      } catch (e) {\r\n        throw new StError('CANNOT_LOAD_CONFIGURATION_FILE', securityFilePath);\r\n      }\r\n    }\r\n\r\n    this.securityConfig.set(loadedSecurityConfig);\r\n\r\n    const awsRole = this.securityConfig.get('aws.role');\r\n    if (!awsRole) this.securityConfig.set('aws.role', '');\r\n  }\r\n\r\n  changeSecurityPath(securityPath) {\r\n    let newSecurityConfig;\r\n    try {\r\n      Configurator.validateSecurityPath(securityPath);\r\n      const securityBasePath = securityPath;\r\n      const securityDirPath = path.resolve(securityBasePath, this.toolConfigDirName);\r\n      newSecurityConfig = new Store(SECURITY_FILE_NAME, { cwd: securityDirPath });\r\n      newSecurityConfig.set(Configurator.getDefaultSecurityConfig());\r\n    } catch (e) {\r\n      throw new StError('CANNOT_CREATE_SECURITY', securityPath, e.message);\r\n    }\r\n    this.emit('progress', `Change securityPath to ${securityPath}. Please log-in again.`);\r\n    this.securityConfig = newSecurityConfig;\r\n  }\r\n\r\n  static validateSecurityPath(securityPath) {\r\n    if (!securityPath) throw new StError('PATH_IS_EMPTY');\r\n    if (securityPath.length && securityPath.length > 255) throw new StError('PATH_LENGTH_EXCEEDED');\r\n\r\n    let separator;\r\n\r\n    if (os.platform() === 'win32') {\r\n      const volumeWithBackSlash = /^[a-zA-Z]:\\\\/;\r\n      const volumeWithSlash = /^[a-zA-Z]:\\//;\r\n\r\n      if (volumeWithBackSlash.test(securityPath)) separator = '\\\\';\r\n      else if (volumeWithSlash.test(securityPath)) separator = '/';\r\n      else throw new StError('PATH_WITHOUT_VOLUME');\r\n\r\n      if (Configurator.hasDisAllowedChar(securityPath, separator)) throw new StError('PATH_INCLUDES_ILLEGAL_CHAR');\r\n    } else {\r\n      separator = '/';\r\n\r\n      const absolute = /^\\//;\r\n      if (!absolute.test(securityPath)) throw new StError('PATH_IS_NOT_AN_ABSOLUTE_PATH');\r\n\r\n      if (Configurator.hasDisAllowedChar(securityPath, separator)) throw new StError('PATH_INCLUDES_ILLEGAL_CHAR');\r\n    }\r\n  }\r\n\r\n  static hasDisAllowedChar(securityPath, separator) {\r\n    const disAllowedChars = ['*', '?', '\"', '\\'', ':', '/', '\\\\', '\\r', '\\n'];\r\n    disAllowedChars.splice(disAllowedChars.indexOf(separator), 1); // remove separator\r\n\r\n    const names = securityPath.split(separator);\r\n    if (os.platform() === 'win32') names.splice(0, 1); // remove volume\r\n\r\n    let found = false;\r\n\r\n    names.forEach(name => disAllowedChars.forEach((disAllowedChar) => {\r\n      if (name.includes(disAllowedChar)) found = true;\r\n    }));\r\n\r\n    return found;\r\n  }\r\n\r\n  /**\r\n   * Initialize configurator.\r\n   * If configuration file exists, load data from it.\r\n   * If the file does not exist, create the file.\r\n   * Newly created Configuration is filled with default properties.\r\n   * @returns {undefined}\r\n   */\r\n  init() {\r\n    // NOTE tool config MUST be initialized prior to system config and security config\r\n    this.initToolConfig();\r\n    this.initSystemConfig();\r\n    this.initSecurityConfig();\r\n  }\r\n\r\n  /**\r\n   * This method returns a configuration.\r\n   * It is plain javascript object that has all configuration as properties.\r\n   * @returns {Configuration}\r\n   */\r\n  getConfig() {\r\n    const toolConfig = this.toolConfig.get();\r\n    const systemConfig = this.systemConfig.get();\r\n    const securityConfig = this.securityConfig.get();\r\n    if (securityConfig.securityPath) {\r\n      securityConfig.securityPath = decodeBase64(securityConfig.securityPath);\r\n    }\r\n    const config = merge({}, systemConfig, toolConfig, securityConfig);\r\n    return new Configuration(config);\r\n  }\r\n\r\n  /**\r\n   * This method set a configuration.\r\n   * It is plain javascript object that has all configuration as properties.\r\n   * @param {object} config A configuration to be set.\r\n   * @returns {undefined}\r\n   */\r\n  setConfig(config) {\r\n    if (config.securityPath && config.securityPath !== this.get('securityPath')) {\r\n      this.changeSecurityPath(config.securityPath);\r\n    }\r\n    this.setToolConfig(config);\r\n    this.setSystemConfig(config);\r\n    this.setSecurityConfig(config);\r\n  }\r\n\r\n  /**\r\n   * This method returns a value of the specified configuration key.\r\n   * @param {string} key A key of configuration item.\r\n   * @returns {any}\r\n   */\r\n  get(key) {\r\n    if (Configurator.isSecurityProperty(key)) return this.securityConfig.get(key);\r\n    if (Configurator.isSystemProperty(key)) {\r\n      if (key === 'securityPath') {\r\n        return decodeBase64(this.systemConfig.get(key));\r\n      }\r\n      return this.systemConfig.get(key);\r\n    }\r\n    return this.toolConfig.get(key);\r\n  }\r\n\r\n  /**\r\n   * This method set a value of the specified configuration key.\r\n   * @param {string} key A key of configuration item.\r\n   * @param {string} value A value of configuration item.\r\n   * @returns {undefined}\r\n   */\r\n  set(key, value) {\r\n    if (Configurator.isSecurityProperty(key)) {\r\n      this.securityConfig.set(key, value);\r\n      return;\r\n    }\r\n\r\n    if (Configurator.isSystemProperty(key)) {\r\n      if (key === 'securityPath') {\r\n        this.changeSecurityPath(value);\r\n        this.systemConfig.set(key, encodeBase64(path.resolve(value)));\r\n      } else {\r\n        this.systemConfig.set(key, value);\r\n      }\r\n      return;\r\n    }\r\n\r\n    this.toolConfig.set(key, value);\r\n  }\r\n\r\n  /**\r\n   * This method ensures storing of configuration to the local file system.\r\n   * Generally, The configuration will be stored without call of this method.\r\n   * @returns {undefined}\r\n   */\r\n  save() {\r\n    this.toolConfig.save();\r\n    this.systemConfig.save();\r\n    this.securityConfig.save();\r\n  }\r\n\r\n  /**\r\n   * This method delete an item of the specified configuration key.\r\n   * @param {string} key A key of configuration item.\r\n   * @returns {undefined}\r\n   */\r\n  del(key) {\r\n    const option = { force: true };\r\n    if (Configurator.isSecurityProperty(key)) { this.securityConfig.del(key, option); return; }\r\n    if (Configurator.isSystemProperty(key)) { this.systemConfig.del(key, option); return; }\r\n    this.toolConfig.del(key, option);\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(Configurator, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/Configurator.js\n// module id = 52\n// module chunks = 0","const OcfDeviceInfo = require('./OcfDeviceInfo');\r\nconst OcfDevicePlatform = require('./OcfDevicePlatform');\r\nconst OcfDeviceResource = require('./OcfDeviceResource');\r\n\r\n/**\r\n * Data model that contains OcfDevice infomation\r\n *\r\n * @property {string} id device's id\r\n * @property {string} nick device's nick\r\n * @property {string} state device's state (ex: on, off, inactive)\r\n * @property {string[]} group device's group ids\r\n * @property {OcfDeviceInfo} device device basic information\r\n * @property {OcfDevicePlatform} platform device's platform information\r\n * @property {OcfDeviceResource[]} resources device's resources\r\n */\r\nclass OcfDevice {\r\n  constructor() {\r\n    this.id = '-';\r\n    this.nick = null;\r\n    this.state = '-';\r\n    this.group = [];\r\n    this.device = null;\r\n    this.platform = null;\r\n    this.resources = null;\r\n  }\r\n\r\n  toSimple() {\r\n    return {\r\n      id: this.id,\r\n      nick: this.nick,\r\n      state: this.state,\r\n      group: this.group,\r\n      device: this.device,\r\n      platform: this.platform,\r\n      resources: this.resources.map(resource => resource.toSimple(this.id)),\r\n    };\r\n  }\r\n\r\n  toListEntry() {\r\n    let deviceRt = this.device.rt.find(rt => rt !== 'oic.wk.d');\r\n    if (!deviceRt) {\r\n      deviceRt = 'oic.wk.d'; // for 'Others' device type\r\n    }\r\n    return {\r\n      id: this.id,\r\n      name: this.device.n || this.nick,\r\n      nick: this.nick,\r\n      state: this.state,\r\n      type: deviceRt,\r\n      mnid: this.platform.mnmn,\r\n      vid: this.platform.vid,\r\n    };\r\n  }\r\n\r\n  toCreateDeviceProfileBody() {\r\n    let deviceRt = this.device.rt.find(rt => rt !== 'oic.wk.d');\r\n    if (!deviceRt) {\r\n      deviceRt = 'oic.wk.d'; // for 'Others' device type\r\n    }\r\n    return {\r\n      devices: [{\r\n        di: this.id,\r\n        n: this.device.n,\r\n        nick: this.nick,\r\n        mnmn: this.platform.mnmn,\r\n        vid: this.platform.vid,\r\n        rt: deviceRt,\r\n      }],\r\n    };\r\n  }\r\n\r\n  toPublishDeviceBody() {\r\n    return {\r\n      di: this.id,\r\n      n: this.device.n,\r\n      links: this.resources,\r\n    };\r\n  }\r\n\r\n  static createFromResp(profileResp, resourcesResp, stateResp, groupsResp) {\r\n    const state = stateResp;\r\n    const profile = profileResp.devices[0];\r\n    const resources = resourcesResp[0];\r\n    const groups = groupsResp.groups;\r\n    const device = new OcfDevice();\r\n\r\n    // id\r\n    device.id = resources.di;\r\n\r\n    // nick\r\n    device.nick = profile.nick;\r\n\r\n    // state\r\n    if (state && state.prslist && state.prslist.length > 0) {\r\n      device.state = state.prslist[0].state;\r\n    }\r\n\r\n    // group\r\n    device.group = groups.filter((group) => {\r\n      const devices = group.devices;\r\n      if (devices === undefined || devices === null) {\r\n        return false;\r\n      }\r\n      return group.devices.indexOf(device.id) > -1;\r\n    }).map(group => group.gid);\r\n\r\n    // device\r\n    const oicdLink = resources.links.find(link => link.rt.indexOf('oic.wk.d') > -1);\r\n    device.device = new OcfDeviceInfo(resources.n || profile.n);\r\n    device.device.icv = profile.icv;\r\n    device.device.dmv = profile.dmv;\r\n    device.device.rt = oicdLink ? oicdLink.rt : null;\r\n\r\n    // platform\r\n    device.platform = new OcfDevicePlatform(profile.mnmn, profile.vid);\r\n    device.platform.mnml = profile.mnml || undefined;\r\n    device.platform.mnmo = profile.mnmo;\r\n    device.platform.mndt = profile.mndt || undefined;\r\n    device.platform.mnpv = profile.mnpv;\r\n    device.platform.mnos = profile.mnos;\r\n    device.platform.mnhw = profile.mnhw;\r\n    device.platform.mnfv = profile.mnfv;\r\n\r\n    // resources\r\n    device.resources = resources.links.map((link) => {\r\n      const resource = new OcfDeviceResource(link.href);\r\n      resource.title = link.title;\r\n      resource.rt = link.rt;\r\n      resource.p = link.p;\r\n      resource.type = link.type;\r\n      resource.if = link.if;\r\n\r\n      return resource;\r\n    });\r\n\r\n    return device;\r\n  }\r\n\r\n\r\n  static createListEntryFromResp(profileResp, stateResp) {\r\n    const state = stateResp;\r\n    const profile = profileResp;\r\n    const device = new OcfDevice();\r\n    // id\r\n    device.id = profile.di;\r\n\r\n    // nick\r\n    device.nick = profile.nick;\r\n\r\n    // state\r\n    if (state && state.prslist && state.prslist.length > 0) {\r\n      device.state = state.prslist[0].state;\r\n    }\r\n\r\n    // device\r\n    device.device = new OcfDeviceInfo(profile.n);\r\n    device.device.icv = profile.icv;\r\n    device.device.dmv = profile.dmv;\r\n    device.device.rt = ['oic.wk.d', profile.rt];\r\n\r\n    // platform\r\n    device.platform = new OcfDevicePlatform(profile.mnmn, profile.vid);\r\n    device.platform.mnml = profile.mnml || undefined;\r\n    device.platform.mnmo = profile.mnmo;\r\n    device.platform.mndt = profile.mndt || undefined;\r\n    device.platform.mnpv = profile.mnpv;\r\n    device.platform.mnos = profile.mnos;\r\n    device.platform.mnhw = profile.mnhw;\r\n    device.platform.mnfv = profile.mnfv;\r\n\r\n    // resources\r\n    device.resources = undefined;\r\n\r\n    return device;\r\n  }\r\n}\r\n\r\nmodule.exports = OcfDevice;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/OcfDevice.js\n// module id = 53\n// module chunks = 0","const EventEmitter = require('events').EventEmitter;\r\nconst cloneDeep = require('lodash/cloneDeep');\r\nconst IotConsoleAgent = require('./IotConsoleAgent');\r\nconst IotCloudAgent = require('./IotCloudAgent');\r\nconst CoapMessage = require('../models/CoapMessage');\r\nconst CoapOptions = require('../models/CoapOptions');\r\nconst OcfDevice = require('../models/OcfDevice');\r\nconst logger = require('../common/StLogger');\r\nconst Promise = require('bluebird');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\nconst METHOD = Object.freeze({\r\n  GET: 1,\r\n  POST: 2,\r\n  PUT: 3,\r\n  DELETE: 4,\r\n  SUBSCRIBE: 5,\r\n  UNSUBSCRIBE: 6,\r\n  NOTIFY: CoapMessage.STATUS_CODE.CONTENT,\r\n});\r\n\r\nconst PUBLISH_TIMEOUT = 5000;\r\nconst PUBLISH_WAIT = 2000;\r\n\r\n/**\r\n * @example\r\n * const vorpal = require('vorpal')();\r\n * const IotCloudServer = require('../src/controllers/IotCloudServer');\r\n * const CoapMessage = require('../src/models/CoapMessage');\r\n * const CoapOptions = require('../src/models/CoapOptions');\r\n * const CertManager = require('../src/controllers/CertManager');\r\n * const DeviceProfileManager = require('../src/controllers/DeviceProfileManager');\r\n * const Configurator = require('../src/controllers/Configurator');\r\n * const fs = require('fs');\r\n *\r\n * const config = Configurator.getDefault().getConfig();\r\n * const dpm = new DeviceProfileManager(config);\r\n * const deviceId = '816be3ba-b993-4ee1-b399-f08d9f001142';\r\n * const deviceMnmn = config.mnid;\r\n *\r\n * let power = 'off';\r\n *\r\n * dpm.retrieveDeviceProfile('8e53e69e-91eb-11e7-accc-a3d27f6d0d06')\r\n * .then(deviceProfile =>\r\n *   DeviceProfileManager.generateOcfDeviceTypeFromDeviceProfile(deviceProfile, deviceMnmn))\r\n * .then((ocfDeviceType) => {\r\n *   const iotCloudConfig = Configurator.getServerConfig(config, 'iotCloud');\r\n *   const cm = new CertManager(config);\r\n *   cm.init();\r\n *   const { key, cert } = cm.getDeviceKeyCert();\r\n *   iotCloudConfig.clientKey = key;\r\n *   iotCloudConfig.clientCert = cert;\r\n *   const serverConfig = {\r\n *     iotCloud: iotCloudConfig,\r\n *     authProvider: Configurator.getServerConfig(config, 'authProvider'),\r\n *     ssoToken: config.ssoToken,\r\n *   };\r\n *   const target = {\r\n *     deviceId,\r\n *     ocfDeviceType,\r\n *   };\r\n *   const server = new IotCloudServer(target, serverConfig);\r\n *   server.get('/capability/switch/main/0', req => (\r\n *     new CoapMessage({\r\n *       code: CoapMessage.STATUS_CODE.CONTENT,\r\n *       token: req.token,\r\n *       payload: {\r\n *         power,\r\n *       },\r\n *       options: new CoapOptions({ format: CoapOptions.CONTENT_FORMAT.CBOR }),\r\n *     })));\r\n *   server.subscribe('/capability/switch/main/0', req => (\r\n *     new CoapMessage({\r\n *       code: CoapMessage.STATUS_CODE.CONTENT,\r\n *       token: req.token,\r\n *       payload: {\r\n *         power,\r\n *       },\r\n *       options: new CoapOptions({\r\n *         observe: CoapOptions.numberTo4Bytes(0),\r\n *         format: CoapOptions.CONTENT_FORMAT.CBOR,\r\n *       }),\r\n *     })));\r\n *   server.post('/capability/switch/main/0', (req) => {\r\n *     power = req.payload.power;\r\n *     console.log(power);\r\n *     setTimeout(() => { server.notify('/capability/switch/main/0', { power }); }, 1000);\r\n *     return new CoapMessage({\r\n *       code: CoapMessage.STATUS_CODE.CHANGED,\r\n *       token: req.token,\r\n *       payload: {\r\n *         power,\r\n *       },\r\n *       options: new CoapOptions({ format: CoapOptions.CONTENT_FORMAT.CBOR }),\r\n *     });\r\n *   });\r\n *   return server.start().then(() => server);\r\n * })\r\n * .then((server) => {\r\n *   vorpal\r\n *     .command('on', 'switch on')\r\n *     .action(function on(args, callback) {\r\n *       power = 'on';\r\n *       server.notify('/capability/switch/main/0', { power });\r\n *       this.log('on');\r\n *       callback();\r\n *     });\r\n *\r\n *   vorpal\r\n *     .command('off', 'switch off')\r\n *     .action(function off(args, callback) {\r\n *       power = 'off';\r\n *       server.notify('/capability/switch/main/0', { power });\r\n *       this.log('off');\r\n *       callback();\r\n *     });\r\n *\r\n *   vorpal\r\n *     .delimiter('switch>')\r\n *     .show();\r\n * });\r\n *\r\n */\r\nclass IotCloudServer extends EventEmitter {\r\n  /**\r\n   * @constructor\r\n   * @param {OcfDevice|object} target Target device information.\r\n   * @param {string} target.deviceId Device ID if target's type is 'object'\r\n   * @param {string} target.nick Device nick name if target's type is 'object'\r\n   * @param {object} target.ocfDeviceType OCF Device Type if target's type is 'object'\r\n   * @param {object} target.ocfDeviceProfile The profile of the ocf device.(Will be deprecated)\r\n   * @param {OcfDeivceResource} target.resources The resource object list of the device.\r\n   * @param {object} config The configuration to communicate Iot Cloud and Auth Provider.\r\n   * The configuration should contains required properties.\r\n   * @param {string} config.userId The id of Samsung Account User(saguid). 10 letters.\r\n   * @param {string} config.accessToken The access token to use Iot Cloud API.\r\n   * @param {string} config.authCode The authenticate code for sign-up API.\r\n   * @param {string} config.ssoToken The sso token to get authCode.\r\n   * @param {object} config.iotCloud The configuration to communicate with IoT Cloud.\r\n   * @param {string} config.iotCloud.uri The uri of the IoT Cloud.\r\n   * @param {string} config.iotCloud.redirecturi The redirect uri of the IoT Cloud.\r\n   * It is needed after sign-up.\r\n   * @param {boolean} config.iotCloud.rejectUnauthorized\r\n   * The flag for ensuring reject during certificate process.\r\n   * @param {string} config.iotCloud.serverCert The certificate from the IoT Cloud.\r\n   * It is needs to communicate with redirect uri. PEM format.\r\n   * @param {boolean} config.iotCloud.useRedirection The flag for using redirecturi.\r\n   * @param {string} config.iotCloud.clientKey\r\n   * The Client private key for mutual certification. PEM format.\r\n   * @param {string} config.iotCloud.clientCert\r\n   * The Client certificate for mutual certification. PEM format.\r\n   * @param {object} config.authProvider The configuration to communicate with Auth Provider.\r\n   * @param {string} config.authProvider.uri The uri of the Auth Provider.\r\n   * @param {boolean} config.authProvider.rejectUnauthorized\r\n   * The flag for ensuring reject during certificate process.\r\n   * @param {object} config.iotConsole The configuration to communicate with Iot Console.\r\n   * @param {string} config.iotConsole.uri The uri of the Iot Console.\r\n   * @param {boolean} config.iotConsole.rejectUnauthorized\r\n   * The flag for ensuring reject during certificate process.\r\n   */\r\n  constructor(target, config) {\r\n    super();\r\n    if (target instanceof OcfDevice) {\r\n      this.deviceId = target.id;\r\n      this.ocfDeviceProfile = target.toCreateDeviceProfileBody();\r\n      this.resources = target.toPublishDeviceBody();\r\n    } else {\r\n      this.deviceId = target.deviceId;\r\n      if (target.ocfDeviceType) {\r\n        this.ocfDeviceProfile =\r\n          target.ocfDeviceType.toCreateDeviceProfileBody(target.deviceId, target.nick);\r\n        this.resources = target.ocfDeviceType.toPublishDeviceBody(target.deviceId);\r\n      } else {\r\n        this.ocfDeviceProfile = target.ocfDeviceProfile;\r\n        this.resources = target.resources;\r\n      }\r\n    }\r\n    this.config = config;\r\n\r\n    this.handlers = new Map();\r\n    this.handlers.set(METHOD.GET, new Map());\r\n    this.handlers.set(METHOD.POST, new Map());\r\n    this.handlers.set(METHOD.PUT, new Map());\r\n    this.handlers.set(METHOD.DELETE, new Map());\r\n    this.handlers.set(METHOD.SUBSCRIBE, new Map());\r\n    this.handlers.set(METHOD.UNSUBSCRIBE, new Map());\r\n\r\n    this.subscribers = new Map();\r\n\r\n    const { clientKey, clientCert } = config.iotCloud;\r\n    this.agent = new IotCloudAgent(config.iotCloud, clientKey, clientCert);\r\n\r\n    this.agent.setRequestHandler(this.handleRequest.bind(this));\r\n    this.agent.on('close', () => this.emit('close'));\r\n    this.agent.on('debug', msg => this.emit('debug', msg));\r\n  }\r\n\r\n\r\n  handleRequest(request) {\r\n    let method = request.code;\r\n    const observe = request.options.observe;\r\n    const uri = request.options.uriPath;\r\n\r\n    if (request.code === METHOD.GET && !!observe && observe[0] === 0) method = METHOD.SUBSCRIBE;\r\n    if (request.code === METHOD.GET && !!observe && observe[0] === 1) method = METHOD.UNSUBSCRIBE;\r\n\r\n    let handler;\r\n    if (method === METHOD.SUBSCRIBE) {\r\n      handler = this.handlers.get(method).get(uri) || this.handlers.get(METHOD.GET).get(uri);\r\n      const subs = this.subscribers.get(uri) || new Map();\r\n      subs.set(request.token, 1);\r\n      if (!this.subscribers.has(uri)) this.subscribers.set(uri, subs);\r\n    } else if (method === METHOD.UNSUBSCRIBE) {\r\n      handler = this.handlers.get(method).get(uri) || this.handlers.get(METHOD.GET).get(uri);\r\n      const subs = this.subscribers.get(uri) || new Map();\r\n      subs.delete(request.token);\r\n    } else {\r\n      handler = this.handlers.get(method).get(uri);\r\n    }\r\n\r\n    const errorResponse = new CoapMessage({\r\n      code: CoapMessage.STATUS_CODE.INTERNAL_SERVER_ERROR,\r\n      token: request.token,\r\n      options: new CoapOptions(),\r\n    });\r\n    if (handler) {\r\n      Promise.resolve()\r\n      .then(() => handler(request))\r\n      .then((response) => {\r\n        if (!(response instanceof CoapMessage)) this.agent.sendResponse(errorResponse);\r\n        else this.agent.sendResponse(response);\r\n      });\r\n    } else {\r\n      const response = new CoapMessage({\r\n        code: CoapMessage.STATUS_CODE.NOT_IMPLEMENTED,\r\n        token: request.token,\r\n        options: new CoapOptions(),\r\n      });\r\n      this.agent.sendResponse(response);\r\n    }\r\n  }\r\n\r\n  addHandler(uri, method, callback) {\r\n    this.handlers.get(method).set(uri, callback);\r\n  }\r\n\r\n  ensureSignUp() {\r\n    const { authProvider, iotConsole, userId, accessToken, ssoToken, authCode: code } = this.config;\r\n    const deviceId = this.deviceId;\r\n\r\n    let promise = Promise.resolve();\r\n\r\n    // if need to sign-up\r\n    if (!userId || !accessToken) {\r\n      if (code) {\r\n        promise = Promise.resolve(code);\r\n      } else {\r\n        const agent = new IotConsoleAgent(this.config, iotConsole);\r\n        agent.init();\r\n        agent.on('debug', msg => this.emit('debug', msg));\r\n        promise = agent.getAuthCodeBySsoToken(ssoToken, deviceId);\r\n      }\r\n\r\n      return promise.then(authCode => (\r\n        this.agent.connect()\r\n        .then(() => this.agent.signUpWithAuthCode(authCode, authProvider.uri, deviceId, true))\r\n        .then((response) => {\r\n          const config = cloneDeep(this.config);\r\n          config.userId = response.uid;\r\n          config.accessToken = response.accesstoken;\r\n          config.iotCloud.redirecturi = response.redirecturi;\r\n          config.iotCloud.serverCert = response.certificate;\r\n          this.agent.disconnect();\r\n          return config;\r\n        })));\r\n    }\r\n\r\n    return promise;\r\n  }\r\n\r\n  ensurePublish() {\r\n    const { userId, accessToken } = this.config;\r\n\r\n    if (!userId || !accessToken) return this.publish();\r\n\r\n    return this.agent.connect()\r\n    .then(() => this.agent.signIn(this.deviceId, userId, accessToken))\r\n    .then(() => this.agent.getDeviceProfile(this.deviceId))\r\n    .then(() => {}, () => {\r\n      this.agent.disconnect();\r\n      return this.publish();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Publish device. It automatically starts a server. Then it publishes a device.\r\n   * Then it automatically stop a server.\r\n   * If the device is not signed-up, then sign-up device first.\r\n   * @returns {Promise<undefined|error>}\r\n   * returns a promise is resolved with undefeind or is rejected with an error.\r\n   */\r\n  publish() {\r\n    return this.ensureSignUp()\r\n    .then((config) => {\r\n      const { userId, accessToken } = config;\r\n      const { clientKey, clientCert } = config.iotCloud;\r\n      this.agent = new IotCloudAgent(config.iotCloud, clientKey, clientCert);\r\n      this.agent.setRequestHandler(this.handleRequest.bind(this));\r\n\r\n      return this.agent.connect()\r\n      .then(() => this.agent.signIn(this.deviceId, userId, accessToken))\r\n      .then(() => this.agent.createDeviceProfile(this.ocfDeviceProfile))\r\n      .then(() => (new Promise((resolve) => {\r\n        let timeout;\r\n        const oicd = this.resources.links.find(l => l.href === '/oic/d');\r\n        const responded = { '/oic/p': false, '/oic/d': false };\r\n        this.get('/oic/p', (req) => {\r\n          if (responded['/oic/d']) {\r\n            if (timeout) clearTimeout(timeout);\r\n            timeout = setTimeout(resolve, PUBLISH_WAIT);\r\n          }\r\n          responded['/oic/p'] = true;\r\n          const vid = this.ocfDeviceProfile.devices[0].vid;\r\n          const mnmn = this.ocfDeviceProfile.devices[0].mnmn;\r\n          const message = new CoapMessage({\r\n            code: CoapMessage.STATUS_CODE.CONTENT,\r\n            token: req.token,\r\n            payload: { vid, mnmn },\r\n            options: new CoapOptions({ format: CoapOptions.CONTENT_FORMAT.CBOR }),\r\n          });\r\n          return message;\r\n        });\r\n        this.get('/oic/d', (req) => {\r\n          if (responded['/oic/p']) {\r\n            if (timeout) clearTimeout(timeout);\r\n            timeout = setTimeout(resolve, PUBLISH_WAIT);\r\n          }\r\n          responded['/oic/d'] = true;\r\n          const di = this.ocfDeviceProfile.devices[0].di;\r\n          const n = this.ocfDeviceProfile.devices[0].n;\r\n          const message = new CoapMessage({\r\n            code: CoapMessage.STATUS_CODE.CONTENT,\r\n            token: req.token,\r\n            payload: {\r\n              rt: oicd.rt,\r\n              di,\r\n              if: oicd.if,\r\n              n,\r\n            },\r\n            options: new CoapOptions({ format: CoapOptions.CONTENT_FORMAT.CBOR }),\r\n          });\r\n          return message;\r\n        });\r\n        this.agent.publishResources(this.deviceId, this.resources);\r\n        timeout = setTimeout(() => {\r\n          if (!responded['/oic/p'] || !responded['/oic/d']) logger.info('Publish response time is over');\r\n          resolve();\r\n        }, PUBLISH_TIMEOUT);\r\n      })));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start the device as a server. It connects to the iot cloud using configuration.\r\n   * If the device is not published, then publish device first.\r\n   * Then, listening request from the cloud.\r\n   * When request is comming, it calls corresponding request handler.\r\n   * @returns {undefined}\r\n   */\r\n  start() {\r\n    return this.ensurePublish()\r\n    .then(() => this.getPing())\r\n    .then(() => this.setPing())\r\n    .then(() => {\r\n      this.intervalId = setInterval(() => {\r\n        if (this.agent.isConnected()) this.setPing().catch(e => logger.error('setPing() throws an error', e));\r\n        else clearInterval(this.intervalId);\r\n      }, 1000 * 60 * 7);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Stop the device. It disconnects to the iot cloud.\r\n   * @returns {undefined}\r\n   */\r\n  stop() {\r\n    const { userId, accessToken } = this.config;\r\n    if (this.intervalId) clearInterval(this.intervalId);\r\n    return this.agent.signOut(this.deviceId, userId, accessToken)\r\n      .then(() => this.agent.disconnect());\r\n  }\r\n\r\n  /**\r\n   * Add request handler for 'GET' method.\r\n   * @param {string} uri The uriPath of the request to handle.\r\n   * @param {IotCloudServer~callback} callback The callback to handle request.\r\n   * @returns {undefined}\r\n   */\r\n  get(uri, callback) {\r\n    this.addHandler(uri, METHOD.GET, callback);\r\n  }\r\n\r\n  /**\r\n   * Add request handler for 'POST' method.\r\n   * @param {string} uri The uriPath of the request to handle.\r\n   * @param {IotCloudServer~callback} callback The callback to handle request.\r\n   * @returns {undefined}\r\n   */\r\n  post(uri, callback) {\r\n    this.addHandler(uri, METHOD.POST, callback);\r\n  }\r\n\r\n  /**\r\n   * Add request handler for 'PUT' method.\r\n   * @param {string} uri The uriPath of the request to handle.\r\n   * @param {IotCloudServer~callback} callback The callback to handle request.\r\n   * @returns {undefined}\r\n   */\r\n  put(uri, callback) {\r\n    this.addHandler(uri, METHOD.PUT, callback);\r\n  }\r\n\r\n  /**\r\n   * Add request handler for 'DELETE' method.\r\n   * @param {string} uri The uriPath of the request to handle.\r\n   * @param {IotCloudServer~callback} callback The callback to handle request.\r\n   * @returns {undefined}\r\n   */\r\n  delete(uri, callback) {\r\n    this.addHandler(uri, METHOD.DELETE, callback);\r\n  }\r\n\r\n  /**\r\n   * Add request handler for 'SUBSCRIBE' method.\r\n   * @param {string} uri The uriPath of the request to handle.\r\n   * @param {IotCloudServer~callback} callback The callback to handle request.\r\n   * @returns {undefined}\r\n   */\r\n  subscribe(uri, callback) {\r\n    this.addHandler(uri, METHOD.SUBSCRIBE, callback);\r\n  }\r\n\r\n  /**\r\n   * Add request handler for 'UNSUBSCRIBE' method.\r\n   * @param {string} uri The uriPath of the request to handle.\r\n   * @param {IotCloudServer~callback} callback The callback to handle request.\r\n   * @returns {undefined}\r\n   */\r\n  unsubscribe(uri, callback) {\r\n    this.addHandler(uri, METHOD.UNSUBSCRIBE, callback);\r\n  }\r\n\r\n  /**\r\n   * Send a notify message to subscriber.\r\n   * The payload is sent to subscriber that is managed internally.\r\n   * @param {string} uri The uri of the resource to notify.\r\n   * @param {object} payload The payload of the notify.\r\n   * @returns {undefined}\r\n   */\r\n  notify(uri, payload) {\r\n    const subscribers = this.getSubscribers(uri);\r\n    if (subscribers) {\r\n      subscribers.forEach((sequence, token) => {\r\n        const message = new CoapMessage({\r\n          code: CoapMessage.STATUS_CODE.CONTENT,\r\n          token,\r\n          options: new CoapOptions({\r\n            observe: CoapOptions.numberTo4Bytes(sequence),\r\n            path: uri,\r\n            format: CoapOptions.CONTENT_FORMAT.CBOR,\r\n          }),\r\n          payload,\r\n        });\r\n        this.agent.sendResponse(message);\r\n        this.countNextSequence(uri, token);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a message to client.\r\n   * @param {CoapMessage} message The message to send.\r\n   * @returns {undefined}\r\n   */\r\n  send(message) {\r\n    this.agent.sendResponse(message);\r\n  }\r\n\r\n  getSubscribers(uri) {\r\n    return this.subscribers.get(uri);\r\n  }\r\n\r\n  countNextSequence(uri, token) {\r\n    const subscribers = this.getSubscribers(uri);\r\n    const sequence = subscribers.get(token);\r\n    const newSequence = (sequence < CoapOptions.MAX_OBSERVE) ? sequence + 1 : 1;\r\n    subscribers.set(token, newSequence);\r\n  }\r\n\r\n  getPing() {\r\n    return this.agent.getPing();\r\n  }\r\n\r\n\r\n  setPing() {\r\n    return this.agent.setPing(8);\r\n  }\r\n}\r\n\r\n/**\r\n * @example\r\n * (request) => (new CoapMessage({\r\n *     token: request.token,\r\n *     code: CoapMessage.STATUS_CODE.CONTENT,\r\n *     options: new CoapOptions(),\r\n *     payload: {\r\n *       vid: 'S-CORE'\r\n *     },\r\n *   }));\r\n * @callback IotCloudServer~callback\r\n * @param {CoapMessage} request The request from the IoT Cloud.\r\n * @returns {CoapMessage|Promise<CoapMessage>}\r\n * CoapMessage or a promise that is resolved with CoapMessage.\r\n */\r\n\r\nmodule.exports = new Proxy(IotCloudServer, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/IotCloudServer.js\n// module id = 54\n// module chunks = 0","const IotConsoleAgent = require('./IotConsoleAgent');\r\nconst manifestMapper = require('./ManifestMapper');\r\nconst { getServerConfig } = require('../common/util');\r\nconst fs = require('./FileSystemHandler');\r\nconst pathUtil = require('path');\r\nconst tv4 = require('tv4');\r\nconst Schema = require('../common/Schema');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\nclass ManifestManager {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @constructor\r\n   * @param {Object} config The Configuration of the IoTCloudAgent, User Account and Device info.\r\n   */\r\n  constructor(config) {\r\n    this.config = config;\r\n  }\r\n\r\n  init(agent) {\r\n    this.agent = agent ||\r\n      new IotConsoleAgent(this.config, getServerConfig(this.config, 'iotConsole'));\r\n    this.workflowtype = `${this.config.mnid}_Metadata_Approval`;\r\n  }\r\n\r\n  /**\r\n   * Register a Manifest(metadata)\r\n   * @param {string} manifestPath manifest(metadata) file path\r\n   * @param {string} type manifest type, ui or voice\r\n   * @returns {(Promise.<Object|Error>)}\r\n   */\r\n  registerManifest(manifestPath, type) {\r\n    const manifestType = type.toLowerCase();\r\n    return fs.readJson(pathUtil.resolve(manifestPath))\r\n      .then((manifest) => {\r\n        if (manifestType === 'ui' || manifestType === 'presentation') tv4.validate(manifest, Schema.uiSchema);\r\n        // else if (manifestType === 'voice') tv4.validate(manifest, Schema.voiceSchema);\r\n        if (tv4.error) {\r\n          const dataPath = tv4.error.dataPath ? ` ${tv4.error.dataPath}` : '';\r\n          throw Error(`Invalid metadata, ${tv4.error.message}${dataPath}`);\r\n        }\r\n        return this.agent.createManifest(manifest, manifestType);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Retrieves Manifest(metadata) list and status.\r\n   * @param {string} [workflowId] workflow Id, search filter\r\n   * @param {string} [status] workflow status, search filter\r\n   * @param {string} [ownerId=this.config.userId] ownerId, search filter\r\n   * @param {string} [type] manifest type, ui or voice\r\n\r\n   * @returns {Promise.<ManifestResource[]|Error>} Manifest\r\n   */\r\n  retrieveManifestList(workflowId, status, ownerId = this.config.userId, type) {\r\n    const validStatus = ['ALPHA', 'RC', 'GOLD', 'PUBLISHED', 'DELETED', 'ALL'];\r\n    if (status && validStatus.indexOf(status) === -1) {\r\n      return Promise.reject(new StError('INVALID_STATUS', status));\r\n    }\r\n\r\n    let manifestType;\r\n    if (type) manifestType = type.toLowerCase();\r\n\r\n    let statusFilter = status;\r\n    let exceptType = 'DELETED';\r\n\r\n    if (status === 'ALL') {\r\n      exceptType = null;\r\n      statusFilter = null; // no filter option for status in agent\r\n    }\r\n    if (status === 'DELETED') {\r\n      exceptType = null;\r\n    }\r\n\r\n    return this.agent.getManifestList(workflowId, this.workflowtype, statusFilter, ownerId)\r\n      .then((resp) => {\r\n        if (!resp) throw new StError('INVALID_RESPONSE');\r\n        if (resp.code === 2000000 && resp.data) {\r\n          return manifestMapper.mapToManifestResourceList(resp.data, manifestType, exceptType);\r\n        }\r\n        // If there's no manifest in list, it returns wrong 404 error\r\n        if (resp.code === 4040000 && resp.data === 'No workflows found') return null;\r\n        throw new StError('FAILED_TO_RETRIEVE_MANIFEST', `${resp.code} : ${resp.data || ''} : ${resp.message || ''}`);\r\n      })\r\n      .catch((error) => {\r\n        if (error && error.statusCode === 404) {\r\n          return null;\r\n        }\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Retrieve a Manifest(metadata)\r\n   * @param {string} mnmn manufacturer name\r\n   * @param {string} vid manufacturer's Manifest(metadata) id\r\n   * @param {string} version Manifest(metadata) version\r\n   * @param {string} type manifest type, ui or voice\r\n\r\n   * @returns {Promise.<ManifestResource|Error>} Manifest Manifest(metadata)\r\n   */\r\n  retrieveManifest(mnmn, vid, version, type) {\r\n    const manifestType = type.toLowerCase();\r\n    return this.agent.getManifest(mnmn, vid, version, manifestType)\r\n      .then((resp) => {\r\n        if (manifestType === 'presentation' || manifestType === 'ui') return manifestMapper.mapToPresentationManifest(resp);\r\n        return manifestMapper.mapToVoiceResource(resp);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Retrieve a Presentaion Manifest(metadata) except status \"DELETED\"\r\n   * @param {string} workflowId workflow Id\r\n   * @returns {Promise.<ManifestResource|Error>} Manifest Manifest(metadata)\r\n   */\r\n  retrieveManifestById(workflowId) {\r\n    let type = '';\r\n    return this.agent.getManifestList(workflowId, this.workflowtype)\r\n      .then((resp) => {\r\n        if (!resp) throw new StError('INVALID_RESPONSE');\r\n        if (resp.code === 2000000 && resp.data) {\r\n          return manifestMapper.mapToManifestResourceList(resp.data, null, 'DELETED');\r\n        }\r\n        throw new StError('FAILED_TO_RETRIEVE_MANIFEST_LIST', `${resp.code} ${resp.data || ''} ${resp.message || ''}`);\r\n      })\r\n      .then((manifest) => {\r\n        if (!manifest || manifest.length < 1) throw new StError('CANNOT_FIND_MANIFEST', workflowId);\r\n        type = manifest[0].type;\r\n        return this.agent.getManifest(manifest[0].mnmn, manifest[0].vid, manifest[0].version,\r\n          manifest[0].type);\r\n      })\r\n      .then((resp) => {\r\n        if (type === 'presentation') return manifestMapper.mapToPresentationManifest(resp);\r\n        return manifestMapper.mapToVoiceResource(resp);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Update a Presentaion Manifest(metadata)\r\n   * @param {object} workflowId workflow Id\r\n   * @param {object} manifestPath ui Manifest(metadata) path\r\n\r\n   * @returns {(Promise.<Object|Error>)}\r\n   */\r\n  updateManifest(workflowId, manifestPath) {\r\n    let manifestType = 'presentation'; // initialize as presentation(ui manifest)\r\n    return this.getManifestTypebyId(workflowId)\r\n      .then((type) => {\r\n        manifestType = type;\r\n        return fs.readJson(pathUtil.resolve(manifestPath));\r\n      })\r\n      .then((manifest) => {\r\n        if (manifestType === 'ui' || manifestType === 'presentation') tv4.validate(manifest, Schema.uiSchema);\r\n        // else if (manifestType === 'voice') tv4.validate(manifest, Schema.voiceSchema);\r\n        if (tv4.error) {\r\n          const dataPath = tv4.error.dataPath ? ` ${tv4.error.dataPath}` : '';\r\n          throw Error(`Invalid metadata, ${tv4.error.message}${dataPath}`);\r\n        }\r\n        return this.agent.updateManifest(workflowId, manifest, manifestType);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Delete a Presentaion Manifest(metadata)\r\n   * @param {string} workflowId  The workflowId of Manifest\r\n   * @returns {Promise<undefined|error>}\r\n   * A promise to be just resolved. Or to be rejected with an error.\r\n   */\r\n  deleteManifest(workflowId) {\r\n    return this.getManifestTypebyId(workflowId)\r\n      .then(type => this.agent.deleteManifest(workflowId, type));\r\n  }\r\n\r\n  /**\r\n   * get a type of manifest(metadata)\r\n   * @param {string} workflowId  The workflowId of Manifest\r\n   * @returns {string|error}\r\n   * A promise to be just resolved. Or to be rejected with an error.\r\n   */\r\n  getManifestTypebyId(workflowId) {\r\n    return this.agent.getManifestList(workflowId, this.workflowtype)\r\n      .then((resp) => {\r\n        if (resp && resp.code === 2000000 && resp.data) {\r\n          return manifestMapper.mapToManifestResourceList(resp.data, null, 'DELETED');\r\n        }\r\n        throw new StError('CANNOT_FIND_MANIFEST', workflowId);\r\n      })\r\n      .then((manifest) => {\r\n        if (!manifest || manifest.length < 1) throw new StError('CANNOT_FIND_MANIFEST', workflowId);\r\n        return manifest[0].type;\r\n      });\r\n  }\r\n\r\n\r\n  static validatePoCodes(manifestData) {\r\n    const regex = /^(_)+PO_CODE_/;\r\n    function validatePoCodeUsage(metadata, poCode, manifestPath) {\r\n      metadata.language.forEach((lang) => {\r\n        if (lang.poCodes && lang.poCodes.length > 0) {\r\n          const defined = regex.test(poCode) ? !!lang.poCodes.find(p => p.po === poCode) : true;\r\n          if (!defined) throw new StError('UNDEFINED_PO_CODE', poCode, manifestPath, lang.locale);\r\n        }\r\n      });\r\n    }\r\n\r\n    function validatePoCodesInMa(metadata) {\r\n      if (metadata.ma && Array.isArray(metadata.ma) && metadata.ma.length > 0) {\r\n        metadata.ma.forEach((ma, maIndex) => {\r\n          if (ma.alternatives && Array.isArray(ma.alternatives) && ma.alternatives.length > 0) {\r\n            ma.alternatives.forEach((a, alternativesIndex) => {\r\n              const usagePath = `ma.${maIndex}.alternatives.${alternativesIndex}.value`;\r\n              if (a.value) validatePoCodeUsage(metadata, a.value, usagePath);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function validatePoCodesInMs(metadata) {\r\n      if (metadata.ms && Array.isArray(metadata.ms) && metadata.ms.length > 0) {\r\n        metadata.ms.forEach((ms, msIndex) => {\r\n          if (ms.label && Array.isArray(ms.label.arguments) && ms.label.arguments.length > 0) {\r\n            ms.label.arguments.forEach((arg, argIndex) => {\r\n              if (arg.alternatives && Array.isArray(arg.alternatives) &&\r\n                arg.alternatives.length > 0) {\r\n                arg.alternatives.forEach((a, alternativesIndex) => {\r\n                  const usagePath = `ms.${msIndex}.label.arguments.${argIndex}.alternatives.${alternativesIndex}.value`;\r\n                  if (a.value) validatePoCodeUsage(metadata, a.value, usagePath);\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function validatePoCodesInDpResources(metadata) {\r\n      if (metadata.dpResources && Array.isArray(metadata.dpResources)\r\n        && metadata.dpResources.length > 0) {\r\n        metadata.dpResources.forEach((dpRes, dpResIndex) => {\r\n          if (dpRes.alternatives && Array.isArray(dpRes.alternatives)\r\n            && dpRes.alternatives.length > 0) {\r\n            dpRes.alternatives.forEach((a, alternativesIndex) => {\r\n              const usagePath = `dpResources.${dpResIndex}.alternatives.${alternativesIndex}.value`;\r\n              if (a.value) validatePoCodeUsage(metadata, a.value, usagePath);\r\n            });\r\n          }\r\n          if (dpRes.label && dpRes.label.label) {\r\n            const usagePath = `dpResources.${dpResIndex}.label.label`;\r\n            validatePoCodeUsage(metadata, dpRes.label.label, usagePath);\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n\r\n    validatePoCodesInMa(manifestData);\r\n    validatePoCodesInMs(manifestData);\r\n    validatePoCodesInDpResources(manifestData);\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(ManifestManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/ManifestManager.js\n// module id = 55\n// module chunks = 0","module.exports = require(\"tv4\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"tv4\"\n// module id = 56\n// module chunks = 0","const uiSchema = {\r\n  $schema: 'http://json-schema.org/draft-04/schema#',\r\n  title: 'Presentation Resource',\r\n  type: 'object',\r\n  definitions: {\r\n    detailPageLinkObject: {\r\n      type: 'object',\r\n      properties: {\r\n        os: {\r\n          description: 'OS (android, ios, etc.)',\r\n          type: 'string',\r\n        },\r\n        dpType: {\r\n          description: 'Type cathe detail page of the device',\r\n          type: 'string',\r\n          enum: [\r\n            'vendorPlugIn',\r\n            'defaultPlugIn',\r\n            'vendorApp',\r\n          ],\r\n        },\r\n        dpUri: {\r\n          description: 'Link to the detail page',\r\n          type: 'string',\r\n          format: 'uri',\r\n        },\r\n      },\r\n      required: [\r\n        'os',\r\n        'dpType',\r\n        'dpUri',\r\n      ],\r\n    },\r\n    conditionObject: {\r\n      description: 'Set visibility option',\r\n      type: 'object',\r\n      properties: {\r\n        n: {\r\n          description: 'name of this condition',\r\n          type: 'string',\r\n        },\r\n        id: {\r\n          description: 'ID of this unit condition object',\r\n          type: 'string',\r\n        },\r\n        source: {\r\n          description: 'Used to distinguish this object from ExternalCondition. Fixed \"RESOURCE_SERVER\" for presentation resousrce',\r\n          type: 'string',\r\n        },\r\n        did: {\r\n          description: 'Device ID',\r\n          type: 'string',\r\n        },\r\n        href: {\r\n          description: 'URI to the target resource',\r\n          type: 'string',\r\n        },\r\n        property: {\r\n          description: 'The name of the target property',\r\n          type: 'string',\r\n        },\r\n        operand: {\r\n          description: 'Value to compare with',\r\n        },\r\n        operator: {\r\n          description: 'Operator that will be used to test the property',\r\n          type: 'string',\r\n          enum: [\r\n            '=',\r\n            '!=',\r\n            '>',\r\n            '>=',\r\n            '<',\r\n            '<=',\r\n            'startWith',\r\n            'endWith',\r\n            'contain',\r\n            'notContain',\r\n            'exists',\r\n            'changed',\r\n          ],\r\n        },\r\n        type: {\r\n          description: 'Type (boolean, number, string, object)',\r\n          type: 'string',\r\n          enum: [\r\n            'boolean',\r\n            'number',\r\n            'string',\r\n            'object',\r\n          ],\r\n        },\r\n      },\r\n      required: [\r\n        'source',\r\n        'href',\r\n        'property',\r\n        'operator',\r\n      ],\r\n    },\r\n    iconUrlObject: {\r\n      type: 'object',\r\n      properties: {\r\n        small: {\r\n          description: 'Small size icon URL (no larger than 100 X 100 pixels)',\r\n          type: 'string',\r\n          format: 'uri',\r\n        },\r\n        large: {\r\n          description: 'Large size icon URL (larger than 300 X 300 pixels)',\r\n          type: 'string',\r\n          format: 'uri',\r\n        },\r\n        mid: {\r\n          description: 'Middle size icon URL (other sizes)',\r\n          type: 'string',\r\n          format: 'uri',\r\n        },\r\n        vector: {\r\n          description: 'Vector type icon URL (SPR format only)',\r\n          type: 'string',\r\n          format: 'uri',\r\n        },\r\n      },\r\n      required: [\r\n        'mid',\r\n      ],\r\n    },\r\n    alternativeArray: {\r\n      type: 'array',\r\n      items: {\r\n        title: 'Argument for each variable value',\r\n        type: 'object',\r\n        properties: {\r\n          key: {\r\n            description: 'Value of the target property',\r\n            type: 'string',\r\n          },\r\n          value: {\r\n            description: 'Display text of the value',\r\n            type: 'string',\r\n          },\r\n        },\r\n        required: [\r\n          'key',\r\n          'value',\r\n        ],\r\n      },\r\n    },\r\n    valueTypeObject: {\r\n      description: 'Type of the value',\r\n      type: 'string',\r\n      enum: [\r\n        'string',\r\n        'boolean',\r\n        'integer',\r\n        'float',\r\n        'data',\r\n        'datetime',\r\n        'time',\r\n      ],\r\n    },\r\n    controlTypeObject: {\r\n      description: 'Control type. Used for binary value or enum value control',\r\n      type: 'string',\r\n      enum: [\r\n        'StandbyPowerSwitch',\r\n        'OffPowerSwitch',\r\n        'ToggleSwitch',\r\n        'List',\r\n        'PlayPause',\r\n        'PlayStop',\r\n        'PushButton',\r\n        'slider',\r\n        'Image',\r\n        'Button',\r\n      ],\r\n    },\r\n    argumentObject: {\r\n      type: 'object',\r\n      properties: {\r\n        n: {\r\n          description: 'Variable name',\r\n          type: 'string',\r\n        },\r\n        href: {\r\n          description: 'URI of the target resource',\r\n          type: 'string',\r\n        },\r\n        property: {\r\n          description: 'Property name of the target resource',\r\n          type: 'string',\r\n        },\r\n        valueType: {\r\n          $ref: '#/definitions/valueTypeObject',\r\n        },\r\n        alternatives: {\r\n          description: 'Arguments for the variables',\r\n          $ref: '#/definitions/alternativeArray',\r\n        },\r\n      },\r\n      required: [\r\n        'n',\r\n        'href',\r\n        'property',\r\n      ],\r\n    },\r\n    labelObject: {\r\n      type: 'object',\r\n      properties: {\r\n        n: {\r\n          description: 'Label name',\r\n          type: 'string',\r\n        },\r\n        label: {\r\n          description: 'Display string. Variables must be expressed as <var1>, <var2>.',\r\n          type: 'string',\r\n        },\r\n        argements: {\r\n          $ref: '#/definitions/argumentObject',\r\n        },\r\n      },\r\n      required: [\r\n        'label',\r\n      ],\r\n    },\r\n    linkObject: {\r\n      type: 'object',\r\n      properties: {\r\n        href: {\r\n          description: 'link to the resorouce',\r\n          type: 'string',\r\n        },\r\n        if: {\r\n          description: 'interface',\r\n          type: 'string',\r\n        },\r\n        rt: {\r\n          description: 'Resource type',\r\n          type: 'string',\r\n        },\r\n      },\r\n      required: [\r\n        'href',\r\n        'if',\r\n        'rt',\r\n      ],\r\n    },\r\n    mainStateObject: {\r\n      type: 'object',\r\n      properties: {\r\n        name: {\r\n          description: 'Name of the state object',\r\n          type: 'string',\r\n        },\r\n        group: {\r\n          description: 'Group that this main state belongs to',\r\n          type: 'string',\r\n        },\r\n        iconUrl: {\r\n          $ref: '#/definitions/iconUrlObject',\r\n        },\r\n        type: {\r\n          description: 'Type of this state. (\"device\", \"job\", \"content\")',\r\n          type: 'string',\r\n          enum: [\r\n            'device',\r\n            'job',\r\n            'content',\r\n          ],\r\n        },\r\n        order: {\r\n          description: 'Order of this state object in the array',\r\n          type: 'integer',\r\n        },\r\n        label: {\r\n          description: 'Label of this main state',\r\n          $ref: '#/definitions/labelObject',\r\n        },\r\n        visible: {\r\n          $ref: '#/definitions/conditionObject',\r\n        },\r\n        emphasis: {\r\n          description: 'Emphasize this state',\r\n          type: 'boolean',\r\n        },\r\n      },\r\n      required: [\r\n        'type',\r\n        'order',\r\n        'label',\r\n      ],\r\n    },\r\n    mainActionObject: {\r\n      type: 'object',\r\n      properties: {\r\n        name: {\r\n          description: 'Name of the action object',\r\n          type: 'string',\r\n        },\r\n        group: {\r\n          description: 'Group that this main state belongs to',\r\n          type: 'string',\r\n        },\r\n        type: {\r\n          description: 'Type of this state. (\"main\", \"sub\", \"content\")',\r\n          type: 'string',\r\n          enum: [\r\n            'main',\r\n            'sub',\r\n            'content',\r\n          ],\r\n        },\r\n        order: {\r\n          description: 'Order of this state object in the array',\r\n          type: 'integer',\r\n        },\r\n        link: {\r\n          description: 'The resource to control',\r\n          $ref: '#/definitions/linkObject',\r\n        },\r\n        property: {\r\n          description: 'Property name of the target resource',\r\n          type: 'string',\r\n        },\r\n        valueType: {\r\n          $ref: '#/definitions/valueTypeObject',\r\n        },\r\n        controlType: {\r\n          $ref: '#/definitions/controlTypeObject',\r\n        },\r\n        alternatives: {\r\n          description: 'Arguments for the variables',\r\n          type: 'array',\r\n          $ref: '#/definitions/alternativeArray',\r\n        },\r\n        range: {\r\n          description: 'Range of the value. Used only when the property has a numuric value type',\r\n          type: 'array',\r\n          items: {\r\n            type: 'number',\r\n          },\r\n          minItems: 2,\r\n          maxItems: 3,\r\n        },\r\n        step: {\r\n          description: 'Step to increase/decrease a value. Used only when the property has a numuric value type',\r\n          type: 'number',\r\n        },\r\n        iconUrl: {\r\n          $ref: '#/definitions/iconUrlObject',\r\n        },\r\n        label: {\r\n          $ref: '#/definitions/labelObject',\r\n        },\r\n        visible: {\r\n          $ref: '#/definitions/conditionObject',\r\n        },\r\n        emphasis: {\r\n          description: 'Emphasize this state',\r\n          type: 'boolean',\r\n        },\r\n      },\r\n      required: [\r\n        'type',\r\n        'order',\r\n        'link',\r\n        'label',\r\n      ],\r\n    },\r\n    ResourcePresentationObject: {\r\n      type: 'object',\r\n      properties: {\r\n        name: {\r\n          description: 'Name of the action object',\r\n          type: 'string',\r\n        },\r\n        group: {\r\n          description: 'Group that this main state belongs to',\r\n          type: 'string',\r\n        },\r\n        controllable: {\r\n          description: 'Controllable or not',\r\n          type: 'boolean',\r\n        },\r\n        order: {\r\n          description: 'Order of this state object in the array',\r\n          type: 'integer',\r\n        },\r\n        link: {\r\n          description: 'The resource to control',\r\n          $ref: '#/definitions/linkObject',\r\n        },\r\n        property: {\r\n          description: 'Property name of the target resource',\r\n          type: 'string',\r\n        },\r\n        valueType: {\r\n          $ref: '#/definitions/valueTypeObject',\r\n        },\r\n        controlType: {\r\n          $ref: '#/definitions/controlTypeObject',\r\n        },\r\n        alternatives: {\r\n          description: 'Arguments for the variables',\r\n          $ref: '#/definitions/alternativeArray',\r\n        },\r\n        range: {\r\n          description: 'Range of the value. Used only when the property has a numuric value type',\r\n          type: 'array',\r\n          items: {\r\n            type: 'number',\r\n          },\r\n          minItems: 2,\r\n          maxItems: 3,\r\n        },\r\n        step: {\r\n          description: 'Step to increase/decrease a value. Used only when the property has a numuric value type',\r\n          type: 'number',\r\n        },\r\n        iconUrl: {\r\n          $ref: '#/definitions/iconUrlObject',\r\n        },\r\n        label: {\r\n          description: 'Label of this main action',\r\n          $ref: '#/definitions/labelObject',\r\n        },\r\n        visible: {\r\n          $ref: '#/definitions/conditionObject',\r\n        },\r\n        emphasis: {\r\n          description: 'Emphasize this state',\r\n          type: 'boolean',\r\n        },\r\n        ruleEvent: {\r\n          description: 'Use this resource for rule event',\r\n          type: 'boolean',\r\n        },\r\n        ruleAction: {\r\n          description: 'Use this resource for rule/scene action',\r\n          type: 'boolean',\r\n        },\r\n      },\r\n      required: [\r\n        'controllable',\r\n        'order',\r\n        'link',\r\n        'label',\r\n      ],\r\n    },\r\n    languageObject: {\r\n      type: 'object',\r\n      properties: {\r\n        po: {\r\n          description: 'po code',\r\n          type: 'string',\r\n        },\r\n        label: {\r\n          description: 'Translated text',\r\n          type: 'string',\r\n        },\r\n      },\r\n      required: [\r\n        'po',\r\n        'label',\r\n      ],\r\n    },\r\n    LanguageResource: {\r\n      type: 'object',\r\n      properties: {\r\n        locale: {\r\n          description: 'ICU locale',\r\n          type: 'string',\r\n        },\r\n        version: {\r\n          description: 'Version of this resource.',\r\n          type: 'string',\r\n        },\r\n        mnmn: {\r\n          description: 'Manufacturer name',\r\n          type: 'string',\r\n        },\r\n        vid: {\r\n          description: 'Metadata ID',\r\n          type: 'string',\r\n          maxLength: 64,\r\n        },\r\n        poCodes: {\r\n          type: 'array',\r\n          items: {\r\n            $ref: '#/definitions/languageObject',\r\n          },\r\n        },\r\n      },\r\n      required: [\r\n        'locale',\r\n        'poCodes',\r\n      ],\r\n    },\r\n  },\r\n  properties: {\r\n    n: {\r\n      description: 'Human readably name',\r\n      type: 'string',\r\n    },\r\n    version: {\r\n      description: 'Version of this presentation resource.',\r\n      type: 'string',\r\n    },\r\n    mnmn: {\r\n      description: 'Manufacturer name',\r\n      type: 'string',\r\n    },\r\n    vid: {\r\n      description: 'Metadata ID',\r\n      type: 'string',\r\n      maxLength: 64,\r\n    },\r\n    iconUrl: {\r\n      $ref: '#/definitions/iconUrlObject',\r\n    },\r\n    ms: {\r\n      type: 'array',\r\n      items: {\r\n        title: 'Main states',\r\n        $ref: '#/definitions/mainStateObject',\r\n      },\r\n    },\r\n    ma: {\r\n      type: 'array',\r\n      items: {\r\n        title: 'Main states',\r\n        $ref: '#/definitions/mainActionObject',\r\n      },\r\n    },\r\n    dpResources: {\r\n      type: 'array',\r\n      items: {\r\n        title: 'Main states',\r\n        type: 'object',\r\n        $ref: '#/definitions/ResourcePresentationObject',\r\n      },\r\n    },\r\n    dpInfo: {\r\n      type: 'array',\r\n      items: {\r\n        $ref: '#/definitions/detailPageLinkObject',\r\n      },\r\n    },\r\n    language: {\r\n      type: 'array',\r\n      items: {\r\n        $ref: '#/definitions/LanguageResource',\r\n      },\r\n    },\r\n  },\r\n  required: [\r\n    'n',\r\n    'mnmn',\r\n    'vid',\r\n    'ms',\r\n    'ma',\r\n    'dpInfo',\r\n    'language',\r\n  ],\r\n};\r\n\r\nconst voiceSchema = {\r\n  $schema: 'http://json-schema.org/draft-04/schema#',\r\n  title: 'Presentation Resource',\r\n  type: 'object',\r\n  definitions: {\r\n    enumerationObject: {\r\n      type: 'object',\r\n      properties: {\r\n        name: {\r\n          description: 'Predefined action name for each capability.',\r\n          type: 'string',\r\n        },\r\n        payload: {\r\n          description: 'The payload of a POST request to send to IOT Cloud. Mandatory if the mothod is POST method.',\r\n          type: 'object',\r\n        },\r\n      },\r\n      required: [\r\n        'name',\r\n      ],\r\n    },\r\n    voiceActionObject: {\r\n      type: 'object',\r\n      properties: {\r\n        action: {\r\n          description: 'Predefined action name for each capability.',\r\n          type: 'string',\r\n        },\r\n        href: {\r\n          description: 'URI to the target resource',\r\n          type: 'string',\r\n        },\r\n        enumerations: {\r\n          type: 'array',\r\n          items: {\r\n            $ref: '#/definitions/enumerationObject',\r\n          },\r\n        },\r\n      },\r\n    },\r\n    capabilityObject: {\r\n      type: 'object',\r\n      properties: {\r\n        capability: {\r\n          description: 'Predefined capability name',\r\n          type: 'string',\r\n        },\r\n        voiceActions: {\r\n          description: 'Display string. Variables must be expressed as <var1>, <var2>.',\r\n          type: 'array',\r\n          items: {\r\n            $ref: '#/definitions/voiceActionObject',\r\n          },\r\n        },\r\n      },\r\n      required: [\r\n        'capability',\r\n        'voiceActions',\r\n      ],\r\n    },\r\n  },\r\n  properties: {\r\n    n: {\r\n      description: 'Human readably name',\r\n      type: 'string',\r\n    },\r\n    version: {\r\n      description: 'Version of this presentation resource.',\r\n      type: 'string',\r\n    },\r\n    mnmn: {\r\n      description: 'Manufacturer name',\r\n      type: 'string',\r\n    },\r\n    vid: {\r\n      description: 'Metadata ID',\r\n      type: 'string',\r\n      maxLength: 64,\r\n    },\r\n    dalias: {\r\n      description: 'Manufacturer name',\r\n      type: 'string',\r\n    },\r\n    dtype: {\r\n      description: 'Manufacturer name',\r\n      type: 'string',\r\n    },\r\n    cts: {\r\n      description: 'Manufacturer name',\r\n      type: 'string',\r\n      enum: [\r\n        's2s',\r\n        'a2a',\r\n      ],\r\n    },\r\n    sml: {\r\n      type: 'array',\r\n      items: {\r\n        $ref: '#/definitions/capabilityObject',\r\n      },\r\n    },\r\n  },\r\n  required: [\r\n    'n',\r\n    'mnmn',\r\n    'vid',\r\n    'dalias',\r\n    'dtype',\r\n    'sml',\r\n  ],\r\n};\r\nconst languageSchema = {\r\n  $schema: 'http://json-schema.org/draft-04/schema#',\r\n  title: 'Language Resource',\r\n  type: 'object',\r\n  definitions: {\r\n    languageObject: {\r\n      type: 'object',\r\n      properties: {\r\n        po: {\r\n          description: 'po code',\r\n          type: 'string',\r\n        },\r\n        label: {\r\n          description: 'Translated text',\r\n          type: 'string',\r\n        },\r\n      },\r\n      required: [\r\n        'po',\r\n        'label',\r\n      ],\r\n    },\r\n  },\r\n  properties: {\r\n    locale: {\r\n      description: 'ICU locale',\r\n      type: 'string',\r\n    },\r\n    version: {\r\n      description: 'Version of this resource.',\r\n      type: 'string',\r\n    },\r\n    mnmn: {\r\n      description: 'Manufacturer name',\r\n      type: 'string',\r\n    },\r\n    vid: {\r\n      description: 'Metadata ID',\r\n      type: 'string',\r\n      maxLength: 64,\r\n    },\r\n    poCodes: {\r\n      type: 'array',\r\n      items: {\r\n        $ref: '#/definitions/languageObject',\r\n      },\r\n    },\r\n  },\r\n  required: [\r\n    'locale',\r\n    'mnmn',\r\n    'vid',\r\n    'poCodes',\r\n  ],\r\n};\r\n\r\n\r\nconst manifestSchema = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\" targetNamespace=\"http://samsung.com/ns/plugin\" xmlns:packages=\"http://samsung.com/ns/plugin\">\r\n\r\n  <xs:element name=\"manifest\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:choice maxOccurs=\"unbounded\">\r\n          <xs:element ref=\"packages:application\"/>\r\n          <xs:element ref=\"packages:privilege\"/>\r\n          <xs:element ref=\"packages:allowedURL\"/>\r\n          <xs:element ref=\"packages:supportResolution\"/>\r\n          <xs:element ref=\"packages:metadata\"/>\r\n        </xs:choice>\r\n        <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##any\" processContents=\"lax\"/>\r\n      </xs:sequence>\r\n      <xs:attribute name=\"manifestVersionCode\" use=\"required\" type=\"xs:integer\"/>\r\n      <xs:attribute name=\"package\" use=\"required\" type=\"xs:string\"/>\r\n      <xs:attribute name=\"versionCode\" use=\"required\" type=\"xs:integer\"/>\r\n      <xs:attribute name=\"versionName\" use=\"required\" type=\"xs:string\"/>\r\n      <xs:attribute name=\"minPluginSdkVersion\" type=\"xs:integer\"/>\r\n      <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\r\n    </xs:complexType>\r\n  </xs:element>\r\n\r\n  <xs:element name=\"application\">\r\n    <xs:complexType>\r\n      <xs:attribute name=\"label\" use=\"required\" type=\"xs:string\"/>\r\n      <xs:attribute name=\"icon\" use=\"required\" type=\"xs:string\"/>\r\n      <xs:attribute name=\"deviceType\" use=\"required\" type=\"xs:string\"/>\r\n      <xs:attribute name=\"deviceSubType\" use=\"required\" type=\"xs:string\"/>\r\n      <xs:attribute name=\"deviceManufacturer\" use=\"required\" type=\"xs:string\"/>\r\n      <xs:attribute name=\"model\" type=\"xs:string\"/>\r\n      <xs:attribute name=\"firmwareVersion\" type=\"xs:string\"/>\r\n      <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\r\n    </xs:complexType>\r\n  </xs:element>\r\n\r\n  <xs:element name=\"privilege\">\r\n    <xs:complexType>\r\n      <xs:attribute name=\"name\" use=\"required\" type=\"xs:string\"/>\r\n    </xs:complexType>\r\n  </xs:element>\r\n\r\n  <xs:element name=\"allowedURL\">\r\n    <xs:complexType>\r\n      <xs:attribute name=\"URL\" use=\"required\" type=\"xs:string\"/>\r\n    </xs:complexType>\r\n  </xs:element>\r\n\r\n  <xs:element name=\"supportResolution\">\r\n    <xs:complexType>\r\n      <xs:attribute name=\"resolution\" use=\"required\" type=\"xs:string\"/>\r\n    </xs:complexType>\r\n  </xs:element>\r\n\r\n  <xs:element name=\"metadata\">\r\n    <xs:complexType>\r\n      <xs:attribute name=\"name\" use=\"required\" type=\"xs:string\"/>\r\n      <xs:attribute name=\"value\" type=\"xs:string\"/>\r\n      <xs:anyAttribute processContents=\"lax\"/>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>`;\r\n\r\nmodule.exports = {\r\n  uiSchema,\r\n  voiceSchema,\r\n  languageSchema,\r\n  manifestSchema,\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/Schema.js\n// module id = 57\n// module chunks = 0","const { getServerConfig } = require('../common/util');\r\nconst CertManager = require('./CertManager');\r\nconst EventEmitter = require('events');\r\nconst fs = require('./FileSystemHandler');\r\nconst IotCloudAgent = require('./IotCloudAgent');\r\nconst OcfLog = require('../models/OcfLog');\r\nconst os = require('os');\r\nconst path = require('path');\r\nconst Promise = require('bluebird');\r\nconst StError = require('../errors/StError');\r\nconst uuid = require('uuid');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\nfunction getFormattedDate() {\r\n  const date = new Date();\r\n  return `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\r\n}\r\n\r\nconst logDeviceDirPath = path.resolve(os.homedir(), '.iotcloud/log_devices');\r\n\r\n/**\r\n * OCF Log manager. Call init() before use.\r\n */\r\nclass OcfLogManager extends EventEmitter {\r\n  /**\r\n   * Setup config object which contains connection information.\r\n   * @param {Object} config config object\r\n   */\r\n  constructor(config) {\r\n    super();\r\n    this.config = config;\r\n    this.observingResource = [];\r\n    this.intervalId = '';\r\n    this.targetDeviceId = '';\r\n  }\r\n\r\n  static getLogDeviceList(userId) {\r\n    const logDeviceFilePath = path.resolve(logDeviceDirPath, userId, 'logger.json');\r\n    return fs.exists(logDeviceFilePath)\r\n    .then((exist) => {\r\n      if (!exist) return [];\r\n      return fs.readJson(logDeviceFilePath);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize a OCF log manager\r\n   * @param {CloudAgent} agent cloud connector\r\n   */\r\n  init(agent) {\r\n    const serverConfig = getServerConfig(this.config, 'iotCloud');\r\n    const cm = new CertManager(this.config);\r\n    cm.init();\r\n    const { key, cert } = cm.getDeviceKeyCert();\r\n    this.agent = agent || new IotCloudAgent(serverConfig, key, cert);\r\n    this.deviceId = '';\r\n    this.accessToken = '';\r\n  }\r\n\r\n  addLogDeviceToFile() {\r\n    const logDeviceFilePath = path.resolve(logDeviceDirPath, this.config.userId, 'logger.json');\r\n\r\n    return Promise.resolve()\r\n      .then(() => fs.exists(logDeviceFilePath))\r\n      .then((exist) => {\r\n        if (!exist) return fs.ensureDir(path.dirname(logDeviceFilePath)).then(() => []);\r\n        return fs.readFile(logDeviceFilePath);\r\n      })\r\n      .then((buffer) => {\r\n        const loggers = buffer.toString();\r\n        if (!loggers) return [];\r\n        return JSON.parse(loggers);\r\n      })\r\n      .then((loggers) => {\r\n        loggers.push(this.deviceId);\r\n        return fs.writeFile(logDeviceFilePath, JSON.stringify(loggers, null, 2));\r\n      });\r\n  }\r\n\r\n  deleteLogDevice() {\r\n    const deviceId = this.deviceId;\r\n    const accessToken = this.accessToken;\r\n\r\n    return this.agent.deleteDevice(deviceId, accessToken);\r\n  }\r\n\r\n  deleteLogDeviceFromFile() {\r\n    const { userId } = this.config;\r\n    const logDeviceFilePath = path.resolve(logDeviceDirPath, userId, 'logger.json');\r\n\r\n    return Promise.resolve()\r\n      .then(() => fs.exists(logDeviceFilePath))\r\n      .then((exist) => {\r\n        if (!exist) {\r\n          return fs.ensureDir(path.dirname(logDeviceFilePath))\r\n            .then(() => []);\r\n        }\r\n        return fs.readFile(logDeviceFilePath);\r\n      })\r\n      .then((buffer) => {\r\n        const loggers = buffer.toString();\r\n        if (!loggers) return [];\r\n        return JSON.parse(loggers);\r\n      })\r\n      .then((loggers) => {\r\n        if (loggers.length > 0) loggers.splice(loggers.indexOf(this.deviceId), 1);\r\n        let data = JSON.stringify(loggers, null, 2);\r\n        if (loggers.length === 0) data = '[]';\r\n        return fs.writeFile(logDeviceFilePath, data);\r\n      })\r\n      .finally(() => {\r\n        this.agent.disconnect();\r\n      });\r\n  }\r\n\r\n  handleSignal() {\r\n    this.deleteLogDevice()\r\n    .then(() => this.deleteLogDeviceFromFile())\r\n    .then(() => process.exit());\r\n  }\r\n\r\n  signUpLogDevice(authCode, handleSignal = false) {\r\n    const { userId, deviceId } = this.config;\r\n    const authProviderConfig = getServerConfig(this.config, 'authProvider');\r\n    this.deviceId = uuid();\r\n\r\n    return this.agent.connect()\r\n      .then(() =>\r\n          this.agent.getAccessTokenByAuthCode(authCode, authProviderConfig.uri, deviceId))\r\n      .then(({ accesstoken: accessToken }) => {\r\n        this.accessToken = accessToken;\r\n        return this.agent.signUp(accessToken, authProviderConfig.uri, this.deviceId, userId, false);\r\n      })\r\n      .then(() => {\r\n        if (handleSignal) process.on('SIGINT', () => this.handleSignal());\r\n        return this.addLogDeviceToFile();\r\n      })\r\n      .finally(() => this.agent.disconnect());\r\n  }\r\n\r\n  onResourceChangeHandler(href, payload) {\r\n    Object.keys(payload).forEach((key) => {\r\n      this.emit('log', new OcfLog(getFormattedDate(), this.targetDeviceId,\r\n        `${key}: ${JSON.stringify(payload[key], null, 2)}`));\r\n    });\r\n  }\r\n\r\n  onStateChangeHandler(payload) {\r\n    const state = payload.prslist[0].state;\r\n    this.emit('log', new OcfLog(getFormattedDate(), this.targetDeviceId, `state: ${state}`));\r\n    if (state === 'on') {\r\n      this.agent.getDeviceResources(this.targetDeviceId)\r\n        .then((resourcesResponse) => {\r\n          resourcesResponse[0].links.forEach((resource) => {\r\n            const bit = resource.p.bm;\r\n            const observable = (bit >> 1) & 1; // eslint-disable-line no-bitwise\r\n            const href = resource.href;\r\n            if (observable) {\r\n              this.observingResource.push(href);\r\n              this.agent.observeResource(href, pl => this.onResourceChangeHandler(href, pl));\r\n            }\r\n          });\r\n        });\r\n    } else if (state === 'off') {\r\n      this.observingResource = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * retrieves OCF Device's changes(presence, resources) logs as real time\r\n   * @param {string} di The device id of the target device.\r\n   * @param {function} listener The listener function to get log.\r\n   * @param {boolean} [handleSignal=false]\r\n   * The flag to handle Ctrl + C. It deletes log device before exit.\r\n   * @returns {Promise<undefined|Error>}\r\n   * A promise to be resolved or be rejected with an error.\r\n   */\r\n  observeRealtimeLogs(di, listener) {\r\n    if (!di) throw new StError('NO_DEVICE_ID');\r\n\r\n    const { userId, accessToken } = this.config;\r\n\r\n    // NOTE: promise will be resolved after connecting. This promise is for caller.\r\n    const promise = new Promise((resolve, reject) => {\r\n      // NOTE: this.observingPromise will not be resolved. This promise is for logging.\r\n      this.observingPromise = Promise.resolve()\r\n        .then(() => this.clearObservation())\r\n        .then(() => this.on('log', listener))\r\n        .then(() => this.agent.connect())\r\n        .then(() => this.agent.signIn(this.config.deviceId, userId, accessToken))\r\n        .then(() => this.agent.getPing())\r\n        .then(() => this.agent.setPing(8))\r\n        .then(() => {\r\n          this.intervalId = setInterval(() => this.agent.setPing(8), 1000 * 60 * 7);\r\n        })\r\n        .then(() => this.agent.observeDeviceState(di, pl => this.onStateChangeHandler(pl)))\r\n        .then(() => resolve())\r\n        .catch((e) => {\r\n          reject(e);\r\n          throw e;\r\n        });\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n\r\n    /**\r\n   * retrieves OCF Device's changes(presence, resources) logs as real time\r\n   * @param {string} di The device id of the target device.\r\n   * @param {string} authCode AuthCode for sign-up client device.\r\n   * @param {function} listener The listener function to get log.\r\n   * @param {boolean} [handleSignal=false]\r\n   * The flag to handle Ctrl + C. It deletes log device before exit.\r\n   * @returns {Promise<undefined|Error>}\r\n   * A promise to be resolved or be rejected with an error.\r\n   */\r\n  observeDeviceStateChangesByAuthCode(di, authCode, listener, handleSignal = false) {\r\n    if (!di) throw new StError('NO_DEVICE_ID');\r\n    if (!authCode) throw new StError('NO_AUTHCODE');\r\n\r\n    const { userId, accessToken } = this.config;\r\n\r\n    // NOTE: promise will be resolved after connecting. This promise is for caller.\r\n    const promise = new Promise((resolve, reject) => {\r\n      // NOTE: this.observingPromise will not be resolved. This promise is for logging.\r\n      this.observingPromise = Promise.resolve()\r\n        .then(() => this.clearObservation())\r\n        .then(() => this.on('log', listener))\r\n        .then(() => {\r\n          this.targetDeviceId = di;\r\n          return this.signUpLogDevice(authCode, handleSignal);\r\n        })\r\n        .then(() => this.agent.connect())\r\n        .then(() => this.agent.signIn(this.deviceId, userId, accessToken))\r\n        .then(() => this.agent.getPing())\r\n        .then(() => this.agent.setPing(8))\r\n        .then(() => {\r\n          this.intervalId = setInterval(() => this.agent.setPing(8), 1000 * 60 * 7);\r\n        })\r\n        .then(() => this.agent.observeDeviceState(di, pl => this.onStateChangeHandler(pl)))\r\n        .then(() => resolve())\r\n        .catch((e) => {\r\n          reject(e);\r\n          throw e;\r\n        });\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n\r\n /**\r\n   * Clear observation to device.\r\n   * @returns {Promise<undefined|error>}\r\n   * A promise is just resolved or rejected with an error.\r\n   */\r\n  clearObservation() {\r\n    this.removeAllListeners('log');\r\n    let promise = Promise.resolve();\r\n    if (this.targetDeviceId) {\r\n      promise = promise.then(() => this.deleteLogDevice());\r\n    }\r\n    if (this.observingPromise) {\r\n      this.observingPromise.cancel();\r\n      this.observingPromise = null;\r\n    }\r\n    return promise.then(() => {\r\n      this.targetDeviceId = '';\r\n      if (this.intervalId) {\r\n        clearInterval(this.intervalId);\r\n        this.intervalId = '';\r\n        this.agent.disconnect();\r\n      }\r\n      this.observingResource = [];\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(OcfLogManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/OcfLogManager.js\n// module id = 58\n// module chunks = 0","module.exports = require(\"adbkit\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"adbkit\"\n// module id = 59\n// module chunks = 0","const pathUtil = require('path');\r\nconst Emitter = require('events');\r\nconst Promise = require('bluebird');\r\nconst cp = require('child-process-es6-promise');\r\nconst Project = require('../models/Project');\r\nconst TemplateInfo = require('../models/TemplateInfo');\r\nconst fs = require('./FileSystemHandler');\r\nconst PackageBuilder = require('./PackageBuilder');\r\nconst ProjectBuilder = require('./ProjectBuilder');\r\nconst ProjectGenerator = require('./ProjectGenerator');\r\nconst OcfProjectController = require('./OcfProjectController');\r\nconst ServicePluginProjectController = require('./ServicePluginProjectController');\r\nconst AutomationProjectController = require('./AutomationProjectController');\r\nconst C2cProjectController = require('./C2cProjectController');\r\nconst ProjectConfigurator = require('./ProjectConfigurator');\r\nconst IotConsoleAgent = require('./IotConsoleAgent');\r\nconst DeviceProfileManager = require('./DeviceProfileManager');\r\nconst { getRoot, getServerConfig } = require('../common/util');\r\nconst MetaDataGenerator = require('./MetaDataGenerator');\r\nconst CertManager = require('./CertManager');\r\nconst ThingsSdkConverter = require('./ThingsSdkConverter');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\nconst { validLamdaARN, validWebhookUrl } = require('../common/util');\r\n\r\n\r\nfunction isValidArnsOrUrl(arns, url) {\r\n  if (arns && !validLamdaARN(arns)) {\r\n    return Promise.reject(new StError('CREATE_PROJECT_INVALID_LAMBDA_ARN', arns));\r\n  }\r\n\r\n  if (url && !validWebhookUrl(url)) {\r\n    return Promise.reject(new StError('CREATE_PROJECT_INVALID_WEBHOOK_URL', url));\r\n  }\r\n  return Promise.resolve();\r\n}\r\n\r\n/**\r\n * Controller that has a responsibility for manage projects\r\n */\r\nclass ProjectManager extends Emitter {\r\n  /**\r\n   * Setup config object which contains connection information.\r\n   * @param {Object} config config object\r\n   */\r\n  constructor(config) {\r\n    super(); // Emiiter\r\n\r\n    this.config = config || {};\r\n  }\r\n\r\n  /**\r\n   * Initialize a OCF group manager\r\n   * @param {CloudAgent} agent cloud connector\r\n   */\r\n  init(agent) {\r\n    const serverConfig = getServerConfig(this.config, 'iotConsole');\r\n    this.agent = agent || new IotConsoleAgent(this.config, serverConfig);\r\n    this.uiMetaGenerator = new MetaDataGenerator(this.config);\r\n    this.deviceProfileManager = new DeviceProfileManager(this.config);\r\n    this.projectGenerator = new ProjectGenerator(this);\r\n    this.thingsSdkConverter = new ThingsSdkConverter(this);\r\n  }\r\n\r\n  initForOneAppController(projectPath, projConfig) {\r\n    this.projectBuilder = new ProjectBuilder(this, projectPath, projConfig);\r\n  }\r\n\r\n\r\n  /**\r\n   * Creates a new OCF project\r\n   *\r\n   * @param {string} name The name of project.\r\n   * @param {string} path The path of project.\r\n   * @param {string} deviceProfileInfo\r\n   *   Device profile ID or device profile file path or profile model\r\n   * @param {string} mainState\r\n   *   Resource href or capability info for main state. (optional)\r\n   *   Capability should be in the form of '{component-id}:{capability-id}'\r\n   * @param {string} mainAction\r\n   *   Resource href or capability info for main action. (optional)\r\n   *   Capability should be in the form of '{component-id}:{capability-id}'\r\n   * @param {string} vid Vendor ID\r\n   * @param {string} devicePluginId Device Plugin ID\r\n   * @param {boolean} createDevicePlugin Specify device plugin source creation\r\n   * @param {string} setupId Specify catalog's setupId\r\n   * @returns {(Promise.<undefined|Error>)}\r\n   *   A promise to be resolved or rejected with an Error.\r\n   */\r\n  createOcfProject(name, path, deviceProfileInfo, mainState, mainAction, vid,\r\n    devicePluginId, createDevicePlugin, setupId = '001') {\r\n    const projectController = new OcfProjectController(this);\r\n\r\n    return projectController.createProject(name, path, deviceProfileInfo,\r\n      mainState, mainAction, vid, devicePluginId, createDevicePlugin, setupId);\r\n  }\r\n\r\n\r\n  /**\r\n   * Creates a new Automation project\r\n   *\r\n   * @param {string} name The name of project.\r\n   * @param {string} path The path of project.\r\n   * @param {SmartApp} smartAppConfig Smart App Configuration\r\n   * @param {Object} lambdaConfig Lambda config\r\n   * @returns {(Promise.<undefined|Error>)}\r\n   *   A promise to be resolved or rejected with an Error.\r\n   */\r\n  createAutomationProject(name, path, smartAppConfig, lambdaConfig) {\r\n    return this.projectGenerator.generateAutomationProject(name, path,\r\n      smartAppConfig, lambdaConfig);\r\n  }\r\n\r\n\r\n  /**\r\n   * Creates a new C2C project\r\n   *\r\n   * @param {string} name The name of project.\r\n   * @param {string} path The path of project.\r\n   * @param {SmartApp} smartAppConfig Smart App Configuration\r\n   * @param {string} deviceProfileInfo\r\n   *   Device profile ID or device profile file path or profile model\r\n   * @param {string} mainState\r\n   *   Resource href or capability info for main state. (optional)\r\n   *   Capability should be in the form of '{component-id}:{capability-id}'\r\n   * @param {string} mainAction\r\n   *   Resource href or capability info for main action. (optional)\r\n   *   Capability should be in the form of '{component-id}:{capability-id}'\r\n   * @param {string} vid Vendor ID\r\n   * @param {string} devicePluginId Device Plugin ID\r\n   * @param {boolean} createDevicePlugin Specify device plugin source creation\r\n   * @param {Object} lambdaConfig Lambda config\r\n   * @returns {(Promise.<undefined|Error>)}\r\n   *   A promise to be resolved or rejected with an Error.\r\n   */\r\n  createC2cProject(name, path, smartAppConfig, deviceProfileInfo, mainState, mainAction,\r\n    vid, devicePluginId, createDevicePlugin, lambdaConfig) {\r\n    return this.projectGenerator.generateC2cProject(name, path, smartAppConfig,\r\n      deviceProfileInfo, mainState, mainAction, vid,\r\n      devicePluginId, createDevicePlugin, lambdaConfig);\r\n  }\r\n\r\n\r\n  /**\r\n   * Creates a new project by template\r\n   *\r\n   * @param {string} name The name of project.\r\n   * @param {string} path The path of project.\r\n   * @param {string} tid The template id.\r\n   * @returns {(Promise.<undefined|Error>)}\r\n   *   A promise to be resolved or rejected with an Error.\r\n   */\r\n  createProjectByTemplate(name, path, tid) {\r\n    return this.retrieveTemplate(tid)\r\n      .then(template => this.projectGenerator.generateProjectByTemplate(name, path, template));\r\n  }\r\n\r\n\r\n  /**\r\n   * Creates a Automation project with default option\r\n   *\r\n   * @param {string} name The name of project.\r\n   * @param {string} path The path of project.\r\n   * @param {string} appName Smart-App name\r\n   * @param {string} appType Smart-App type\r\n   * @param {string[]} lambdaArns Specify AWS ARNs of existing Lambda functions\r\n   * @param {string} targetUrl Specify target URL of Webhook server\r\n   * @returns {(Promise.<undefined|Error>)}\r\n   *   A promise to be resolved or rejected with an Error.\r\n   */\r\n  createLambdaAutomationProject(name, path, appName, appType, lambdaArns, targetUrl) {\r\n    const projectController = new AutomationProjectController(this);\r\n    return isValidArnsOrUrl(lambdaArns, targetUrl)\r\n      .then(() => projectController.createDefaultProject(name, path, appName, appType,\r\n        lambdaArns, targetUrl));\r\n  }\r\n\r\n  /**\r\n   * Creates a new C2C project\r\n   *\r\n   * @param {string} name The name of project.\r\n   * @param {string} path The path of project.\r\n   * @param {string} deviceProfileInfo\r\n   *   Device profile ID or device profile file path or profile model\r\n   * @param {string} mainState\r\n   *   Resource href or capability info for main state. (optional)\r\n   *   Capability should be in the form of '{component-id}:{capability-id}'\r\n   * @param {string} mainAction\r\n   *   Resource href or capability info for main action. (optional)\r\n   *   Capability should be in the form of '{component-id}:{capability-id}'\r\n   * @param {string} vid Vendor ID\r\n   * @param {string} devicePluginId Device Plugin ID\r\n   * @param {boolean} createDevicePlugin Specify device plugin source creation\r\n   * @param {boolean} createLambda Specify Lambda source creation\r\n   * @param {string[]} lambdaArns Specify AWS ARNs of existing Lambda functions\r\n   * @returns {(Promise.<undefined|Error>)}\r\n   *   A promise to be resolved or rejected with an Error.\r\n   */\r\n  createLambdaC2cProject(name, path, deviceProfileInfo, mainState, mainAction, vid,\r\n    pluginId, generatePlugin, appName, appType, lambdaArns, targetUrl) {\r\n    const projectController = new C2cProjectController(this);\r\n\r\n    return isValidArnsOrUrl(lambdaArns, targetUrl)\r\n    .then(() => projectController.createDefaultProject(name, path, deviceProfileInfo,\r\n      mainState, mainAction, vid, pluginId, generatePlugin,\r\n      appName, appType, lambdaArns, targetUrl));\r\n  }\r\n\r\n\r\n  /**\r\n   * Creates a Service Plugin project with default option\r\n   *\r\n   * @param {string} name The name of project.\r\n   * @param {string} path The path of project.\r\n   * @param {string} appName Smart-App name\r\n   * @param {string} appType Smart-App type\r\n   * @param {string[]} lambdaArns Specify AWS ARNs of existing Lambda functions\r\n   * @param {string} targetUrl Specify target URL of Webhook server\r\n   * @param {string} pluginId Specify existing service plugin ID\r\n   * @param {boolean} generatePlugin Specify Service Plugin source code generation\r\n   * @param {boolean} enableDashboardCard Specify enable dashboard card whether or not\r\n   * @returns {(Promise.<undefined|Error>)}\r\n   *   A promise to be resolved or rejected with an Error.\r\n   */\r\n  createDefaultServicePluginProject(name, path, appName, appType, lambdaArns, targetUrl,\r\n    pluginId, generatePlugin, enableDashboardCard) {\r\n    const projectController = new ServicePluginProjectController(this);\r\n\r\n    return isValidArnsOrUrl(lambdaArns, targetUrl)\r\n    .then(() => projectController.createDefaultProject(name, path, appName, appType,\r\n      lambdaArns, targetUrl, pluginId, generatePlugin, enableDashboardCard));\r\n  }\r\n\r\n\r\n  /**\r\n   * Retrieves the project list on current location\r\n   *\r\n   * @param {string} path The path of project.\r\n   * @returns {(Promise.<Project[]|Error>)}\r\n   *   A promise to be resolved with project list or rejected with an Error.\r\n   */\r\n  retrieveProjectList(path) { // eslint-disable-line class-methods-use-this\r\n    return fs.readDir(path)\r\n    .reduce((projects, fileName) => {\r\n      const dirPath = pathUtil.join(path, fileName);\r\n      return ProjectConfigurator.retrieveConfig(dirPath)\r\n      .then((config) => {\r\n        // TODO: add more config validation\r\n        if (config.name && config.type) {\r\n          const proj = new Project(config.name, config.type);\r\n          if (config.outputPath) proj.outputPath = config.outputPath;\r\n          projects.push(proj);\r\n        }\r\n        return projects;\r\n      })\r\n      .catch(() => projects);\r\n    }, []);\r\n  }\r\n\r\n\r\n  /**\r\n   * Verifies the project and create its plugin package\r\n   *\r\n   * @param {string} [path=process.cwd()] The path of project.\r\n   * @param {obj} option Project build option.(ie. signPpk, passwd)\r\n   * @returns {(Promise.<undefined|string>)}\r\n   *   A promise to be resolved or rejected with an Error.\r\n   */\r\n  buildProject(projPath = process.cwd(), option = {}) {\r\n    let projConfig = null;\r\n    return ProjectConfigurator.retrieveConfig(projPath)\r\n      .then((config) => {\r\n        projConfig = config;\r\n        if (projConfig.type === Project.PROJ_TYPE.OCF) {\r\n          const projectController = new OcfProjectController(this);\r\n          projectController.on('progress', msg => this.emit('progress', msg));\r\n          return projectController.buildProject(projPath, projConfig);\r\n        } else if (projConfig.type === Project.PROJ_TYPE.SERVICE) {\r\n          const projectController = new ServicePluginProjectController(this);\r\n          projectController.on('progress', msg => this.emit('progress', msg));\r\n          return projectController.buildProject(projPath, projConfig);\r\n        } else if (projConfig.type === Project.PROJ_TYPE.AUTOMATION) {\r\n          const projectController = new AutomationProjectController(this);\r\n          projectController.on('progress', msg => this.emit('progress', msg));\r\n          return projectController.buildProject(projPath, projConfig);\r\n        } else if (projConfig.type === Project.PROJ_TYPE.C2C) {\r\n          const projectController = new C2cProjectController(this);\r\n          projectController.on('progress', msg => this.emit('progress', msg));\r\n          return projectController.buildProject(projPath, projConfig);\r\n        }\r\n\r\n        const projBuilder = new ProjectBuilder(this, projPath, projConfig);\r\n        projBuilder.on('progress', msg => this.emit('progress', msg));\r\n\r\n        return projBuilder.build();\r\n      })\r\n      .then(() => {\r\n        const outputPath = pathUtil.join(projPath, projConfig.outputPath);\r\n        const files = fs.readDirSync(outputPath);\r\n        let ppkFile = files.find(file => file.endsWith('.ppk'));\r\n        ppkFile = ppkFile ? pathUtil.join(outputPath, ppkFile) : ppkFile;\r\n        if (!option.signPpk || !option.passwd || !ppkFile) return Promise.resolve();\r\n        this.emit('progress', '> Signing ppk file...');\r\n        return this.signPackage(ppkFile, false, ppkFile, option.passwd);\r\n      })\r\n      .then(() => this.generateIosOutput(projPath, projConfig));\r\n  }\r\n\r\n  isbuiltProject() {\r\n    return this.projectBuilder.isBuilt();\r\n  }\r\n\r\n\r\n  /**\r\n   * Retrieves project template\r\n   *\r\n   * @param {string} tid The template ID\r\n   * @returns {Promise.<string>}\r\n   *   A promise to be resolved with template\r\n   */\r\n  retrieveTemplate(tid) {\r\n    const agent = this.agent;\r\n    return agent.getTemplate(tid)\r\n    .then(({ payload: { values } }) => values)\r\n    .finally(() => this.agent.finish());\r\n  }\r\n\r\n\r\n  /**\r\n   * Retrieves project template list\r\n   *\r\n   * @param {Object} searchCriteria condition for searching templates\r\n   * @returns {Promise.<string[]>}\r\n   *   A promise to be resolved with template list\r\n   */\r\n  retrieveTemplateList(searchCriteria = {}) {\r\n    const agent = this.agent;\r\n    return agent.getTemplateList()\r\n    .then(({ payload: { values: { templates } } }) => {\r\n      const list = templates.filter((template) => {\r\n        if (typeof searchCriteria.deviceProfile === 'boolean') {\r\n          if (searchCriteria.deviceProfile && !template.deviceProfile) {\r\n            return false;\r\n          }\r\n        } else if (searchCriteria.deviceProfile) {\r\n          if (!template.deviceProfile) return false;\r\n          const deviceProfile = searchCriteria.deviceProfile.toString();\r\n          if (template.deviceProfile !== deviceProfile) return false;\r\n        }\r\n        return true;\r\n      }).map(value => new TemplateInfo(\r\n        value.id,\r\n        value.name,\r\n        value.description,\r\n        value.deviceProfile));\r\n      return list;\r\n    })\r\n    .finally(() => this.agent.finish());\r\n  }\r\n\r\n\r\n  /**\r\n   * Sign the plugin package(ppk)\r\n   * @param {string} ppk The path of the source ppk file. (ex: out/com.samsung.helloworld_1.0.0.ppk)\r\n   * @param {boolean} testMode The flag to use test signer.\r\n   * @param {string} [ppkOut=ppk]\r\n   * The path of the signed ppk file path (ex: signed/com.samsung.helloworld_1.0.0.ppk)\r\n   * @param {string} [passwd] The password to access private key.\r\n   * If the testMode is false, passwd must be specified.\r\n   * @returns {(Promise.<Object>|Error)}\r\n   * A promise to be resolved with Object including result code, stdout, or rejected with an Error\r\n   */\r\n  signPackage(ppk, testMode, ppkOut = ppk, passwd) {\r\n    let authKey = pathUtil.resolve(getRoot(), 'assets/security_profiles/author.pri');\r\n    let authCert = pathUtil.resolve(getRoot(), 'assets/security_profiles/author.crt');\r\n    let distKey = pathUtil.resolve(getRoot(), 'assets/security_profiles/distributor.pri');\r\n    let distCert = pathUtil.resolve(getRoot(), 'assets/security_profiles/distributor.crt');\r\n    let authPass = '12345678';\r\n    let distPass = '12345678';\r\n    let promise = Promise.resolve();\r\n\r\n    if (!testMode) {\r\n      if (!passwd) return Promise.reject(new StError('SIGN_PPK_NO_PASSWD'));\r\n      const cm = new CertManager(this.config);\r\n      cm.init();\r\n      authKey = pathUtil.resolve(`${cm.getSecurityProfilesPath()}/${this.config.userId}${this.config.mnid}/author.pri`);\r\n      authCert = pathUtil.resolve(`${cm.getSecurityProfilesPath()}/${this.config.userId}${this.config.mnid}/author.crt`);\r\n      distKey = pathUtil.resolve(`${cm.getSecurityProfilesPath()}/${this.config.userId}${this.config.mnid}/distributor.pri`);\r\n      distCert = pathUtil.resolve(`${cm.getSecurityProfilesPath()}/${this.config.userId}${this.config.mnid}/distributor.crt`);\r\n      authPass = passwd;\r\n      distPass = passwd;\r\n\r\n      promise = cm.checkPpkKeyCert(this.config.userId, this.config.mnid);\r\n    }\r\n\r\n    if (!fs.existsSync(ppk)) return Promise.reject(new StError('SIGN_PPK_FILE_NOTFOUND', ppk));\r\n    if (!fs.existsSync(authKey)) return Promise.reject(new StError('SIGN_PPK_NO_AUTH_KEY'));\r\n    if (!fs.existsSync(authCert)) return Promise.reject(new StError('SIGN_PPK_NO_AUTH_CERT'));\r\n    if (!fs.existsSync(distKey)) return Promise.reject(new StError('SIGN_PPK_NO_DIST_KEY'));\r\n    if (!fs.existsSync(distCert)) return Promise.reject(new StError('SIGN_PPK_NO_DIST_CERT'));\r\n\r\n    if (ppk === ppkOut) {\r\n      promise = promise.then(() => fs.copy(ppk, `${ppk}.orig`));\r\n    }\r\n\r\n    return promise.then(() => cp.spawn('java',\r\n      ['-Dfile.encoding=UTF-8',\r\n        '-jar',\r\n        pathUtil.resolve(getRoot(), 'assets/external_jars/ppksigner.jar'),\r\n        'sign',\r\n        '--author-signer',\r\n        '--key', authKey,\r\n        '--cert', authCert,\r\n        '--key-pass', `pass:${authPass}`,\r\n        '--dist-signer',\r\n        '--key', distKey,\r\n        '--cert', distCert,\r\n        '--key-pass', `pass:${distPass}`,\r\n        '--in', ppk,\r\n        '--out', ppkOut]))\r\n      .catch((e) => {\r\n        if (fs.existsSync(`${ppk}.orig`)) {\r\n          fs.removeSync(ppk);\r\n          fs.renameSync(`${ppk}.orig`, ppk);\r\n        }\r\n        const errmessage = e.stderr;\r\n        if (errmessage && errmessage.includes('InvalidKeyException')) throw new StError('SIGN_PPK_INVALID_KEY');\r\n        throw new StError(errmessage);\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Verify the plugin package (PPK).\r\n   * To use relative path of ppk,\r\n   * the ppk file must be located in the same/under path as the st.js file.\r\n   * And it also support Absoulute path for files (key, cert, ppk)\r\n   *\r\n   * @param {string} path PPK path (ex: com.samsung.helloworld_1.0.0.ppk)\r\n   * @param {boolean} [print=false] print verified certs details\r\n   * @returns {(Promise.<Object>|Error)}\r\n   *   A promise to be resolved with Object including result code, stdout or rejected with an Error\r\n   */\r\n  verifyPackage(path, print) { // eslint-disable-line class-methods-use-this\r\n    if (!path) return Promise.reject(new StError('VERIFY_PPK_NO_IN'));\r\n    let args = ['-jar', '-Dfile.encoding=UTF-8', pathUtil.resolve(getRoot(), 'assets/external_jars/ppksigner.jar'), 'verify'];\r\n    if (print) {\r\n      args = args.concat(['--print-certs', '--verbose']);\r\n    }\r\n    args = args.concat([path]);\r\n    return cp.spawn('java', args)\r\n      .catch((e) => {\r\n        if (e.stderr.includes('Signature not found from package file')) throw new StError('VERIFY_PPK_VERIFY_FAIL');\r\n        if (e.stderr.includes('FileNotFoundException')) throw new StError('VERIFY_PPK_FILE_NOT_FOUND_FAIL');\r\n        if (e.stderr.includes('ZipFormatException')) throw new StError('VERIFY_PPK_ZIP_FORMAT_FAIL');\r\n        throw new StError('VERIFY_PPK_UNKNOWN_FAIL', e.stderr);\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Extract the plugin package (PPK).\r\n   * To use relative path of ppk,\r\n   * the ppk file must be located in the same/under path as the st.js file.\r\n   * And it also support Absoulute path for files (key, cert, ppk)\r\n   *\r\n   * @param {string} ppkPath PPK path (ex: com.samsung.helloworld_1.0.0.ppk)\r\n   * @param {string} outputPath output path\r\n   * @returns {(Promise.<Object>|Error)}\r\n   *   A promise to be resolved with Object including result code, stdout or rejected with an Error\r\n   */\r\n  extractPackage(ppkPath, outputPath) { // eslint-disable-line class-methods-use-this\r\n    const packer = new PackageBuilder();\r\n    const emit = this.emit.bind(this);\r\n    packer.on('progress', msg => emit('progress', msg));\r\n    return packer.unpack(ppkPath, outputPath);\r\n  }\r\n\r\n\r\n  /**\r\n   * Creates a new OCF project from Things SDK device\r\n   *\r\n   * @param {string} name The name of project.\r\n   * @param {string} path The path of project.\r\n   * @param {string|object} deviceInfo Specify importing Things SDK device file or model\r\n   * @param {string} mainState\r\n   *   Resource href or capability info for main state. (optional)\r\n   *   Capability should be in the form of '{component-id}:{capability-id}'\r\n   * @param {string} mainAction\r\n   *   Resource href or capability info for main action. (optional)\r\n   *   Capability should be in the form of '{component-id}:{capability-id}'\r\n   * @param {string} vid Vendor ID\r\n   * @param {string} devicePluginId Device Plugin ID\r\n   * @param {boolean} createDevicePlugin Specify device plugin source creation\r\n   * @returns {(Promise.<undefined|Error>)}\r\n   *   A promise to be resolved or rejected with an Error.\r\n   */\r\n  createProjectFromThingsSDK(name, path, deviceInfo, mainState, mainAction, vid,\r\n    devicePluginId, createDevicePlugin) {\r\n    return Promise.resolve()\r\n      .then(() => {\r\n        if (typeof deviceInfo === 'string') return fs.readJson(deviceInfo);\r\n        return deviceInfo;\r\n      })\r\n      .then(deviceDef => this.thingsSdkConverter.convertToDeviceProfile(deviceDef)\r\n        .then((deviceProfile) => {\r\n          const setupId = deviceDef.configuration.easySetup.connectivity.softAP.setupId;\r\n          return this.createOcfProject(name, path, deviceProfile,\r\n            mainState, mainAction, vid, devicePluginId, createDevicePlugin, setupId);\r\n        }));\r\n  }\r\n\r\n\r\n  /**\r\n   * Export Things SDK device definition file\r\n   *\r\n   * @param {string} [path=process.cwd()] The path of project.\r\n   * @param {string} outputPath output path\r\n   * @returns {(Promise.<Object>|Error)}\r\n   *   A promise to be resolved with output file, stdout or rejected with an Error\r\n   */\r\n  exportToThingsSDK(projPath = process.cwd(), outputPath) {\r\n    const profileFilePath = pathUtil.resolve(projPath, ProjectConfigurator.DEVICE_PROFILE_FILE);\r\n    let catalogFilePath = pathUtil.resolve(projPath, ProjectConfigurator.CATALOG_FILE);\r\n\r\n    if (!fs.existsSync(catalogFilePath)) {\r\n      catalogFilePath = pathUtil.resolve(projPath, ProjectConfigurator.PROD_CATALOG_FILE);\r\n    }\r\n\r\n    return Promise.join(\r\n        fs.readJson(profileFilePath),\r\n        fs.readJson(catalogFilePath),\r\n        (profile, catalog) => this.thingsSdkConverter.convertFromDeviceProfile(profile, catalog))\r\n      .then((deviceDef) => {\r\n        if (outputPath) {\r\n          this.emit('progress', `Generating Things SDK file... ${outputPath}`);\r\n          const deviceDefData = JSON.stringify(deviceDef, null, 2);\r\n          return fs.writeFile(outputPath, deviceDefData)\r\n            .then(() => deviceDef);\r\n        }\r\n\r\n        return deviceDef;\r\n      });\r\n  }\r\n\r\n\r\n  generateIosOutput(projPath, projConfig) {\r\n    const iosOutputDir = pathUtil.join(projPath, ProjectConfigurator.OUT_IOS_DIR);\r\n    const iosOutputDir2 = pathUtil.join(iosOutputDir, ProjectConfigurator.SIDELOADING_DIR);\r\n    const iosPluginDir = pathUtil.join(iosOutputDir2, ProjectConfigurator.PLUGIN_DIR);\r\n    const iosPpksDir = pathUtil.join(iosPluginDir, ProjectConfigurator.PPKS_DIR);\r\n    const iosManifestDir = pathUtil.join(iosOutputDir2, ProjectConfigurator.MANIFEST_DIR);\r\n    this.emit('progress', '> Copying files to iOS output folder...');\r\n\r\n    const outputPath = pathUtil.join(projPath, projConfig.outputPath);\r\n    const files = fs.readDirSync(outputPath);\r\n    let ppkFile = files.find(file => file.endsWith('.ppk'));\r\n    ppkFile = ppkFile ? pathUtil.join(outputPath, ppkFile) : ppkFile;\r\n    let uiManifestFile = files.find(file => file.endsWith(ProjectConfigurator.UI_MANIFEST_FILE));\r\n    uiManifestFile = uiManifestFile ?\r\n      pathUtil.join(outputPath, uiManifestFile) : uiManifestFile;\r\n    let voiceManifestFile = files.find(file =>\r\n      file.endsWith(ProjectConfigurator.VOICE_MANIFEST_FILE));\r\n    voiceManifestFile = voiceManifestFile ?\r\n      pathUtil.join(outputPath, voiceManifestFile) : voiceManifestFile;\r\n    let pluginFile = files.find(file => file.endsWith('.plugin'));\r\n    pluginFile = pluginFile ? pathUtil.join(outputPath, pluginFile) : pluginFile;\r\n\r\n    return Promise.resolve()\r\n      .then(() => fs.remove(iosOutputDir))\r\n      .then(() => {\r\n        if (!ppkFile) return Promise.resolve();\r\n        return fs.ensureDir(iosPpksDir)\r\n          .then(() => fs.copy(ppkFile, pathUtil.join(iosPpksDir, pathUtil.basename(ppkFile))));\r\n      })\r\n      .then(() => {\r\n        if (!pluginFile) return Promise.resolve();\r\n        return fs.ensureDir(iosPluginDir)\r\n          .then(() => fs.copy(pluginFile,\r\n            pathUtil.join(iosPluginDir, pathUtil.basename(pluginFile))));\r\n      })\r\n      .then(() => {\r\n        if (!uiManifestFile) return Promise.resolve();\r\n        return fs.ensureDir(iosManifestDir)\r\n          .then(() => fs.copy(uiManifestFile,\r\n            pathUtil.join(iosManifestDir, pathUtil.basename(uiManifestFile))));\r\n      })\r\n      .then(() => {\r\n        if (!voiceManifestFile) return Promise.resolve();\r\n        return fs.ensureDir(iosManifestDir)\r\n          .then(() => fs.copy(voiceManifestFile,\r\n            pathUtil.join(iosManifestDir, pathUtil.basename(voiceManifestFile))));\r\n      });\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(ProjectManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/ProjectManager.js\n// module id = 60\n// module chunks = 0","const Emitter = require('events');\r\nconst pathUtil = require('path');\r\nconst Promise = require('bluebird');\r\nconst xml = require('xml2js');\r\nconst ProjectConfigurator = require('./ProjectConfigurator');\r\nconst fs = require('./FileSystemHandler');\r\nconst archiveBuilder = require('../common/archiveBuilder');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\nconst pathJoin = pathUtil.join;\r\n\r\nconst PACKAGE_FILE_EXT = 'ppk';\r\n\r\nfunction validateManifest(xmlDoc) {\r\n  const manifestAttrs = xmlDoc.manifest.$;\r\n  const packageName = manifestAttrs.package;\r\n  const versionName = manifestAttrs.versionName;\r\n  if (!packageName) throw Error(`'${ProjectConfigurator.PLUGIN_MANIFEST_FILE}' needs package attribute`);\r\n  if (!versionName) throw Error(`'${ProjectConfigurator.PLUGIN_MANIFEST_FILE}' needs versionName attribute`);\r\n}\r\n\r\nfunction checkFileExists(path) {\r\n  const manifestPath = pathJoin(path, ProjectConfigurator.PLUGIN_MANIFEST_FILE);\r\n  const indexPath = pathJoin(path, ProjectConfigurator.PLUGIN_INDEX_FILE);\r\n  const iconPath = pathJoin(path, ProjectConfigurator.PLUGIN_ICON_FILE);\r\n  const cssPath = pathJoin(path, ProjectConfigurator.PLUGIN_CSS_DIR);\r\n  const jsPath = pathJoin(path, ProjectConfigurator.PLUGIN_JS_DIR);\r\n  return Promise.join(\r\n    fs.exists(manifestPath),\r\n    fs.exists(indexPath),\r\n    fs.exists(iconPath),\r\n    fs.exists(cssPath),\r\n    fs.exists(jsPath),\r\n    (existManifest, existIndex, existIcon, existCss, existJs) => {\r\n      if (!existManifest) throw Error(`'${ProjectConfigurator.PLUGIN_MANIFEST_FILE}' does not exist`);\r\n      if (!existIndex) throw Error(`'${ProjectConfigurator.PLUGIN_INDEX_FILE}' does not exist`);\r\n      if (!existIcon) throw Error(`'${ProjectConfigurator.PLUGIN_ICON_FILE}' does not exist`);\r\n      if (!existCss) throw Error(`'${ProjectConfigurator.PLUGIN_CSS_DIR}' directory does not exist`);\r\n      if (!existJs) throw Error(`'${ProjectConfigurator.PLUGIN_JS_DIR}' directory does not exist`);\r\n    })\r\n    .then(() => Promise.join(\r\n      fs.stat(jsPath).then(stat => stat.isDirectory()),\r\n      fs.stat(cssPath).then(stat => stat.isDirectory()),\r\n      (jsIsDir, cssIsDir) => {\r\n        if (!jsIsDir) throw Error(`'${ProjectConfigurator.PLUGIN_JS_DIR}' is not directory`);\r\n        if (!cssIsDir) throw Error(`'${ProjectConfigurator.PLUGIN_CSS_DIR}' is not directory`);\r\n        return true;\r\n      }));\r\n}\r\n\r\nclass PackageBuilder extends Emitter {\r\n  static readManifestXml(xmlFilePath) { // eslin\r\n    return fs.readFile(xmlFilePath)\r\n      .then((manifest) => {\r\n        const parser = new xml.Parser();\r\n        const parseXmlStr = Promise.promisify(parser.parseString);\r\n        return parseXmlStr(manifest);\r\n      });\r\n  }\r\n\r\n  pack(path, outPath) {\r\n    const manifestXmlFile = pathJoin(path, ProjectConfigurator.PLUGIN_MANIFEST_FILE);\r\n    this.emit('progress', 'Validating plugin...');\r\n    return checkFileExists(path)\r\n      .then(() => PackageBuilder.readManifestXml(manifestXmlFile))\r\n      .then((manifestDoc) => {\r\n        validateManifest(manifestDoc);\r\n\r\n        const manifestAttrs = manifestDoc.manifest.$;\r\n        const packageName = manifestAttrs.package;\r\n        const versionName = manifestAttrs.versionName;\r\n        const packageFileName = `${packageName}_${versionName}.${PACKAGE_FILE_EXT}`;\r\n        this.emit('progress', `Packing plugin... ${packageFileName}`);\r\n        return fs.readDir(path)\r\n          .then(files => archiveBuilder.zip(outPath, packageFileName,\r\n            files.map(file => pathJoin(path, file))));\r\n      });\r\n  }\r\n\r\n  unpack(ppkPath, outputPath) {\r\n    this.emit('progress', 'Extracting plugin...');\r\n    return archiveBuilder.unzip(ppkPath, outputPath);\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = new Proxy(PackageBuilder, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/PackageBuilder.js\n// module id = 61\n// module chunks = 0","module.exports = require(\"lodash/clone\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash/clone\"\n// module id = 62\n// module chunks = 0","const path = require('path');\r\nconst Emitter = require('events');\r\nconst Promise = require('bluebird');\r\n\r\nconst ProjectConfigurator = require('./ProjectConfigurator');\r\nconst ProjectGenerator = require('./ProjectGenerator');\r\nconst ProjectBuilder = require('./ProjectBuilder');\r\nconst PluginPackageController = require('./PluginPackageController');\r\nconst Project = require('../models/Project');\r\nconst WebConsoleProject = require('../models/WebConsoleProject');\r\nconst fs = require('./FileSystemHandler');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\n\r\nfunction getOcfProjectCreateReqBody(project, name, description) {\r\n  const reqBody = {\r\n    pjtNm: name || project.name,\r\n    prodType: 'CPT-OCF',\r\n    pjtDsc: description || '',\r\n    deviceProfile: {\r\n      dvcPrflNm: project.deviceProfile.name,\r\n      dvcPrflDsc: project.deviceProfile.description,\r\n      components: project.deviceProfile.components,\r\n      metadata: project.deviceProfile.metadata,\r\n    },\r\n    catalog: {\r\n      modelCd: project.prodCatalog.modelCd,\r\n      easysetupId: project.prodCatalog.easysetupId,\r\n    },\r\n  };\r\n\r\n  if (project.uiManifest) {\r\n    reqBody.uiManifest = {\r\n      mtdtTypeCd: 'CIT-UI',\r\n      mtdtJson: JSON.stringify(project.uiManifest, null, 2),\r\n    };\r\n  }\r\n\r\n  if (project.voiceManifest) {\r\n    reqBody.voiceManifest = {\r\n      mtdtTypeCd: 'CIT-VOICE',\r\n      mtdtJson: JSON.stringify(project.voiceManifest, null, 2),\r\n    };\r\n  }\r\n\r\n  return reqBody;\r\n}\r\n\r\n\r\nfunction getOcfProjectUpdateReqBody(project) {\r\n  const reqBody = {\r\n    pjtNm: project.name,\r\n    pjtDsc: '',\r\n    deviceProfile: {\r\n      dvcPrflNm: project.deviceProfile.name,\r\n      dvcPrflDsc: project.deviceProfile.description,\r\n      components: project.deviceProfile.components,\r\n      metadata: project.deviceProfile.metadata,\r\n    },\r\n    catalog: {\r\n      modelCd: project.prodCatalog.modelCd,\r\n      easysetupId: project.prodCatalog.easysetupId,\r\n    },\r\n  };\r\n\r\n  if (project.uiManifest) {\r\n    reqBody.uiManifest = {\r\n      mtdtTypeCd: 'CIT-UI',\r\n      mtdtJson: JSON.stringify(project.uiManifest, null, 2),\r\n    };\r\n  }\r\n\r\n  if (project.voiceManifest) {\r\n    reqBody.voiceManifest = {\r\n      mtdtTypeCd: 'CIT-VOICE',\r\n      mtdtJson: JSON.stringify(project.voiceManifest, null, 2),\r\n    };\r\n  }\r\n\r\n  return reqBody;\r\n}\r\n\r\n\r\n/**\r\n * Controller that has a responsibility for creating Service Plugin projects\r\n */\r\nclass OcfProjectController extends Emitter {\r\n\r\n  constructor(parent) {\r\n    super(); // Emiiter\r\n    this.config = parent.config;\r\n    this.projectGenerator = parent.projectGenerator;\r\n    this.agent = parent.agent;\r\n  }\r\n\r\n\r\n  createProject(name, currDir, deviceProfileInfo,\r\n    mainState, mainAction, vid, pluginId, generatePlugin, setupId) {\r\n    const proj = new Project(name, Project.PROJ_TYPE.OCF);\r\n    const projPath = path.join(currDir, name);\r\n\r\n    try {\r\n      this.validateProjectInfo(name, projPath);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return fs.makeDir(projPath)\r\n      .then(() => this.projectGenerator.generateDeviceProfileFile(projPath, deviceProfileInfo, vid))\r\n      .then(deviceProfile => this.projectGenerator.generateManifestFiles(projPath, deviceProfile,\r\n        mainState, mainAction, pluginId))\r\n      .then(() => (generatePlugin ?\r\n        this.projectGenerator.generateDevicePluginFiles(projPath, pluginId) : null))\r\n      .then(() => this.generateCatalogFile(projPath, name, setupId))\r\n      .then(() => ProjectConfigurator.generateConfig(projPath, proj))\r\n      .catch((err) => {\r\n        if (fs.existsSync(projPath)) fs.removeSync(projPath);\r\n        throw err;\r\n      });\r\n  }\r\n\r\n\r\n  buildProject(projPath, projConfig) {\r\n    const emit = this.emit.bind(this);\r\n    const outputPath = path.join(projPath, projConfig.outputPath);\r\n    const prodCatalogPath = path.join(projPath, ProjectConfigurator.PROD_CATALOG_FILE);\r\n\r\n    const projBuilder = new ProjectBuilder(this, projPath, projConfig);\r\n    projBuilder.on('progress', msg => emit('progress', msg));\r\n\r\n    if (!this.config.mnid) throw new Error('Login or Requesting MNID required!');\r\n\r\n    emit('start', projConfig.name);\r\n    if (!projBuilder.isUpdatedDeviceProfile()) emit('progress', 'Warning: device-profile was updated, please generate manifest if you need');\r\n    return fs.remove(outputPath)\r\n      .then(() => fs.ensureDir(outputPath))\r\n      .then(() => projBuilder.buildDeviceProfileFile())\r\n      .then(deviceProfile => projBuilder.buildManifestFiles(deviceProfile.metadata.vid))\r\n      .then(() => fs.exists(path.join(projPath, ProjectConfigurator.PLUGIN_DIR)))\r\n      .then((exists) => {\r\n        if (exists) return projBuilder.buildPluginFiles();\r\n        return Promise.resolve();\r\n      })\r\n      .then(() => {\r\n        if (fs.existsSync(prodCatalogPath)) {\r\n          return projBuilder.buildOcfProdCatalogFile(projPath);\r\n        }\r\n        return projBuilder.buildCatalogFile(projPath, Project.PROJ_TYPE.OCF);\r\n      });\r\n  }\r\n\r\n\r\n  readProject(projPath) { // eslint-disable-line\r\n    let project = null;\r\n\r\n\r\n    return ProjectConfigurator.retrieveConfig(projPath)\r\n      .then((config) => {\r\n        const outputPath = path.join(projPath, config.outputPath);\r\n        const deviceProfilePath = path.join(outputPath, ProjectConfigurator.DEVICE_PROFILE_FILE);\r\n        const catalogPath = path.join(projPath, ProjectConfigurator.CATALOG_FILE);\r\n        const prodCatalogPath = path.join(projPath, ProjectConfigurator.PROD_CATALOG_FILE);\r\n        const manifestXmlPath = path.join(projPath, ProjectConfigurator.PLUGIN_DIR,\r\n          ProjectConfigurator.PLUGIN_MANIFEST_FILE);\r\n\r\n        project = new Project(config.name, config.type);\r\n        return fs.readJson(deviceProfilePath)\r\n          .then((json) => { project.deviceProfile = json; })\r\n          .then(() => this.readUiManifestFile(outputPath))\r\n          .then((json) => { project.uiManifest = json; })\r\n          .then(() => this.readVoiceManifestFile(outputPath))\r\n          .then((json) => { project.voiceManifest = json; })\r\n          .then(() => {\r\n            if (fs.existsSync(prodCatalogPath)) {\r\n              return fs.readJson(prodCatalogPath)\r\n                .then((json) => { project.prodCatalog = json; });\r\n            }\r\n            return fs.readJson(catalogPath)\r\n              .then((json) => {\r\n                project.prodCatalog = {\r\n                  modelCd: json.items[0].name,\r\n                  easysetupId: json.items[0].versions[0].appData.setupAppData.ocf.setupId,\r\n                };\r\n              });\r\n          })\r\n          .then(() => fs.exists(manifestXmlPath))\r\n          .then((exists) => {\r\n            if (!exists) return Promise.resolve();\r\n            return PluginPackageController.readPluginManifestXml(manifestXmlPath)\r\n              .then((plugin) => { project.plugin = plugin; })\r\n              .then(() => {\r\n                const ppkFile = path.resolve(outputPath,\r\n                  `${project.plugin.package}_${project.plugin.versionName}.ppk`);\r\n                if (fs.existsSync(ppkFile)) {\r\n                  project.output = {\r\n                    ppkFile,\r\n                  };\r\n                }\r\n              });\r\n          });\r\n      })\r\n      .then(() => project);\r\n  }\r\n\r\n\r\n  createWebConsoleProject(project, name, description, selfPublish) {\r\n    this.emit('progress', 'Registering project to Web Console...');\r\n    let registeredWebPrj = null;\r\n    const reqBody = getOcfProjectCreateReqBody(project, name, description);\r\n    return this.agent.postCloudConnectedProject(reqBody)\r\n      .then((webPrj) => {\r\n        registeredWebPrj = webPrj;\r\n        if (project.output && project.output.ppkFile) {\r\n          return this.agent.postCloudConnectedPpkFile(webPrj.pjtId, project.output.ppkFile);\r\n        }\r\n        return webPrj;\r\n      })\r\n      .then((webPrj) => {\r\n        if (!selfPublish) return WebConsoleProject.createFromCloudConnectedResp(webPrj);\r\n        return this.publishWebConsoleProject(webPrj.pjtId);\r\n      })\r\n      .catch((err) => {\r\n        if (!registeredWebPrj) throw err;\r\n        return this.deleteWebConsoleProject(registeredWebPrj.pjtId, true)\r\n          .then(() => { throw err; });\r\n      });\r\n  }\r\n\r\n  readWebConsoleProjectList() {\r\n    return this.agent.getCloudConnectedProjectList(999, 1)\r\n      .then(resp => WebConsoleProject.createListFromCloudConnectedResp(resp));\r\n  }\r\n\r\n\r\n  readWebConsoleProject(projectId) {\r\n    return this.agent.getCloudConnectedProject(projectId)\r\n      .then(resp => WebConsoleProject.createFromCloudConnectedResp(resp));\r\n  }\r\n\r\n\r\n  existsWebConsoleProject(projectId) {\r\n    return this.agent.getCloudConnectedProject(projectId)\r\n      .then(() => true)\r\n      .catch((err) => {\r\n        if (err.message.includes('not found...')) {\r\n          return false;\r\n        }\r\n        throw err;\r\n      });\r\n  }\r\n\r\n\r\n  updateWebConsoleProject(pjtId, project) {\r\n    this.emit('progress', 'Updating Web Console project...');\r\n    return this.agent.putCloudConnectedProject(pjtId, getOcfProjectUpdateReqBody(project))\r\n      .then((webPrj) => {\r\n        if (project.output && project.output.ppkFile) {\r\n          return this.agent.postCloudConnectedPpkFile(webPrj.pjtId, project.output.ppkFile);\r\n        }\r\n        return webPrj;\r\n      })\r\n      .then(webPrj => WebConsoleProject.createFromCloudConnectedResp(webPrj));\r\n  }\r\n\r\n\r\n  deleteWebConsoleProject(pjtId, rollback) {\r\n    if (!rollback) {\r\n      this.emit('progress', `Deleting Web Console project... ${pjtId}`);\r\n    }\r\n    return this.agent.deleteCloudConnectedProject(pjtId);\r\n  }\r\n\r\n\r\n  publishWebConsoleProject(pjtId) {\r\n    this.emit('progress', `Publishing project(self-publish)... ${pjtId}`);\r\n    return this.agent.postCloudConnectedSelfPublish(pjtId)\r\n      .then(webPrj => WebConsoleProject.createFromCloudConnectedResp(webPrj));\r\n  }\r\n\r\n\r\n  unpublishWebConsoleProject(pjtId) {\r\n    this.emit('progress', `Unpublishing project... ${pjtId}`);\r\n    return this.agent.postCloudConnectedUnpublish(pjtId)\r\n      .then(webPrj => WebConsoleProject.createFromCloudConnectedResp(webPrj));\r\n  }\r\n\r\n\r\n  validateProjectInfo(name, projPath) { // eslint-disable-line\r\n    ProjectGenerator.validateProjectInput(name, projPath);\r\n  }\r\n\r\n\r\n  generateCatalogFile(projPath, modelCd, easysetupId) { // eslint-disable-line\r\n    const catalogPath = path.join(projPath, ProjectConfigurator.PROD_CATALOG_FILE);\r\n\r\n    const appCatalog = {\r\n      modelCd,\r\n      easysetupId,\r\n    };\r\n\r\n    return fs.writeFile(catalogPath, JSON.stringify(appCatalog, null, 2));\r\n  }\r\n\r\n\r\n  readUiManifestFile(outputPath) { // eslint-disable-line class-methods-use-this\r\n    return fs.readDir(outputPath)\r\n      .then(files => files.find(file => file.endsWith(ProjectConfigurator.UI_MANIFEST_FILE)))\r\n      .then((manifestFileName) => {\r\n        // skip if not exists\r\n        if (!manifestFileName) return null;\r\n        const uiManifestFile = path.join(outputPath, manifestFileName);\r\n        return fs.readJson(uiManifestFile);\r\n      });\r\n  }\r\n\r\n\r\n  readVoiceManifestFile(outputPath) { // eslint-disable-line class-methods-use-this\r\n    return fs.readDir(outputPath)\r\n      .then(files => files.find(file => file.endsWith(ProjectConfigurator.VOICE_MANIFEST_FILE)))\r\n      .then((manifestFileName) => {\r\n        // skip if not exists\r\n        if (!manifestFileName) return null;\r\n        const manifestFile = path.join(outputPath, manifestFileName);\r\n        return fs.readJson(manifestFile);\r\n      });\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(OcfProjectController, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/OcfProjectController.js\n// module id = 63\n// module chunks = 0","const xml = require('xml2js');\r\nconst Promise = require('bluebird');\r\nconst fs = require('./FileSystemHandler');\r\nconst DevicePlugin = require('../models/DevicePlugin');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\nclass PluginPackageController {\r\n\r\n  static readPluginManifestXml(manifestPath) {\r\n    return fs.readFile(manifestPath)\r\n      .then((manifest) => {\r\n        const parser = new xml.Parser();\r\n        const parseXmlStr = Promise.promisify(parser.parseString);\r\n        return parseXmlStr(manifest);\r\n      })\r\n      .then(manifestDoc => DevicePlugin.createFromManifestDoc(manifestDoc));\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(PluginPackageController, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/PluginPackageController.js\n// module id = 64\n// module chunks = 0","/**\r\n * Data model that contains DeviceProfile infomation\r\n *\r\n * @property {string} id device profile's id\r\n * @property {string} name device profile's name\r\n * @property {Object[]} components device profile's resources\r\n * @property {Object} metadata payload of device's plafrom info\r\n */\r\nclass WebConsoleDeviceProfile {\r\n  constructor(id, name) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.components = [];\r\n    this.metadata = {};\r\n  }\r\n\r\n  static createFromCloudConnectedResp(resp) {\r\n    const result = new WebConsoleDeviceProfile(resp.dvcPrflId, resp.dvcPrflNm);\r\n    result.components = resp.components;\r\n    result.metadata = resp.metadata;\r\n\r\n    return result;\r\n  }\r\n\r\n  toCreateRequestBody() {\r\n    return {\r\n      dvcPrflNm: this.name,\r\n      components: this.components,\r\n      vid: this.metadata.vid,\r\n      dvcType: this.metadata.deviceType,\r\n      ocfSpecVer: 'OCF1.1',\r\n      mainAction: this.mainAction ? `${this.mainAction.componentId}:${this.mainAction.id}` : null,\r\n      mainState: this.mainState ? `${this.mainState.componentId}:${this.mainState.id}` : null,\r\n    };\r\n  }\r\n\r\n\r\n  toUpdateRequestBody() {\r\n    return {\r\n      dvcPrflNm: this.name,\r\n      components: this.components,\r\n      vid: this.metadata.vid,\r\n      dvcType: this.metadata.deviceType,\r\n      ocfSpecVer: 'OCF1.1',\r\n      mainAction: this.mainAction ? `${this.mainAction.componentId}:${this.mainAction.id}` : null,\r\n      mainState: this.mainState ? `${this.mainState.componentId}:${this.mainState.id}` : null,\r\n    };\r\n  }\r\n}\r\n\r\nmodule.exports = WebConsoleDeviceProfile;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/WebConsoleDeviceProfile.js\n// module id = 65\n// module chunks = 0","/**\r\n * Data model that contains Device Plugin information\r\n *\r\n * @property {string} id Device Plugin ID\r\n * @property {string} status Device Plugin Status\r\n */\r\nclass WebConsoleDevicePlugin {\r\n  /**\r\n   * @param {string} id Plugin ID\r\n   */\r\n  constructor(id) {\r\n    this.id = id;\r\n  }\r\n\r\n\r\n  static createFromResp(resp) {\r\n    const result = new WebConsoleDevicePlugin(resp.plgnId);\r\n    result.packageName = resp.pkgNm;\r\n    result.version = resp.verNm;\r\n\r\n    return result;\r\n  }\r\n\r\n\r\n  static createFromCloudConnectedResp(resp) {\r\n    const result = new WebConsoleDevicePlugin(resp.plgnId);\r\n    result.status = resp.devStatNm;\r\n\r\n    return result;\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = WebConsoleDevicePlugin;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/WebConsoleDevicePlugin.js\n// module id = 66\n// module chunks = 0","/**\r\n * Data model that contains Catalog information\r\n *\r\n * @property {string} id Catalog id\r\n * @property {string} name Catalog name\r\n * @property {string} setupId Onboarding ID\r\n * @property {string} smartAppId Smart-App ID\r\n * @property {string} countryCode Country code\r\n * @property {string} countryName Country code\r\n * @property {string} mnId Manufacturer ID\r\n * @property {string} mnNm Manufacturer Name\r\n * @property {string} status Catalog status\r\n */\r\nclass WebConsoleCatalog {\r\n  /**\r\n   * @param {string} id Catalog ID\r\n   * @param {string} name Category name\r\n   */\r\n  constructor(id, name) {\r\n    this.id = id;\r\n    this.name = name;\r\n  }\r\n\r\n\r\n  static createFromCloudConnectedResp(resp) {\r\n    const result = new WebConsoleCatalog(resp.ctlgId, resp.modelCd);\r\n    result.setupId = resp.easysetupId;\r\n    result.status = resp.devStatNm;\r\n\r\n    return result;\r\n  }\r\n\r\n  static createFromServicePluginResp(resp) {\r\n    const result = new WebConsoleCatalog(resp.ctlgId, resp.dispNm);\r\n    result.status = resp.devStatNm;\r\n    result.whAppId = resp.whAppId;\r\n    result.whGrpId = resp.whGrpId;\r\n\r\n    return result;\r\n  }\r\n\r\n\r\n  static createFromAutomationResp(resp) {\r\n    const result = new WebConsoleCatalog(resp.ctlgId, resp.dispNm);\r\n    result.status = resp.devStatNm;\r\n    result.whAppId = resp.refAppUuid;\r\n    result.whGrpId = resp.refGrpUuid;\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nmodule.exports = WebConsoleCatalog;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/WebConsoleCatalog.js\n// module id = 67\n// module chunks = 0","const path = require('path');\r\nconst Emitter = require('events');\r\nconst Promise = require('bluebird');\r\n\r\nconst StError = require('../errors/StError');\r\nconst { getRoot } = require('../common/util');\r\nconst ProjectConfigurator = require('./ProjectConfigurator');\r\nconst ProjectGenerator = require('./ProjectGenerator');\r\nconst ProjectBuilder = require('./ProjectBuilder');\r\nconst PluginPackageController = require('./PluginPackageController');\r\nconst Project = require('../models/Project');\r\nconst SmartApp = require('../models/SmartApp');\r\nconst AppCatalog = require('../models/AppCatalog');\r\nconst WebConsoleProject = require('../models/WebConsoleProject');\r\nconst fs = require('./FileSystemHandler');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\n\r\nconst scPluginJsFile = path.join(ProjectConfigurator.PLUGIN_LIB_DIR,\r\n  ProjectConfigurator.SCPLUGINAPI_JS_FILE);\r\nconst DEFAULT_INDEX = `<html>\r\n  <head>\r\n    <!-- SAMSUNG CONNECT API -->\r\n    <script type=\"text/javascript\" src=\"${scPluginJsFile}\"></script>\r\n  </head>\r\n</html>\r\n`;\r\n// TODO: use proper default index.js\r\nconst DEFAULT_JS = '';\r\n// TODO: use proper default index.css\r\nconst DEFAULT_CSS = '';\r\nconst RSRC_BASE_DIR = path.resolve(getRoot(), 'assets', 'project_gen_resources');\r\nconst DEFAULT_MANIFEST = fs.readFileSync(path.resolve(RSRC_BASE_DIR, 'default.manifest.xml'), 'utf8');\r\nconst PLUGIN_ID_REGEXP = /^[a-zA-Z._]{1,99}$/;\r\n\r\n\r\nfunction getSvcPlgnCreateReqBody(project, name, description, plgnId) {\r\n  return {\r\n    pjtNm: name || project.name,\r\n    prodType: 'CPT-SVCPLGN',\r\n    pjtDsc: description || '',\r\n    connectorApp: {\r\n      appInfoTypeCd: 'SAI-SVCENDPOINT',\r\n      appNm: project.smartApp.appName,\r\n      dispNm: project.smartApp.displayName,\r\n      appDsc: project.smartApp.description,\r\n      appTypeCd: project.smartApp.appType === SmartApp.APP_TYPE.LAMBDA ? 'SAT-LAMBDA' : 'SAT-WEBHOOK',\r\n      multInstanceTypeCd: project.smartApp.singleInstance ? 'SAM-SINGLE' : 'SAM-MULTI',\r\n      tgtUrl: project.smartApp.appType === SmartApp.APP_TYPE.WEBHOOK ?\r\n        project.smartApp.webhookSmartApp.targetUrl : null,\r\n      tgtArnList: project.smartApp.appType === SmartApp.APP_TYPE.LAMBDA ?\r\n        project.smartApp.lambdaSmartApp.functions.map(arn => ({ tgtArn: arn })) : null,\r\n      appScopeList: project.smartApp.oauth.scope.map(scope => ({ scopeNm: scope })),\r\n      appSettingList: Object.keys(project.smartApp.settings || []).map(key => ({\r\n        settingKey: key,\r\n        settingValue: project.smartApp.settings[key],\r\n      })),\r\n      appUi: {\r\n        plgnId: project.smartApp.ui.pluginId,\r\n        dasbdCardYn: project.smartApp.ui.dashboardCardsEnabled ? 'Y' : 'N',\r\n      },\r\n    },\r\n    appCatalog: {\r\n      dispNm: project.appCatalog.appInternalName,\r\n    },\r\n    plgnId,\r\n  };\r\n}\r\n\r\n\r\nfunction getSvcPlgnUpdateReqBody(project, name, description, plgnId) {\r\n  return {\r\n    pjtNm: name || project.name,\r\n    pjtDsc: description || '',\r\n    connectorApp: {\r\n      appTypeCd: project.smartApp.appType === SmartApp.APP_TYPE.LAMBDA ? 'SAT-LAMBDA' : 'SAT-WEBHOOK',\r\n      appNm: project.smartApp.appName,\r\n      dispNm: project.smartApp.displayName,\r\n      appDsc: project.smartApp.description,\r\n      tgtUrl: project.smartApp.appType === SmartApp.APP_TYPE.WEBHOOK ?\r\n        project.smartApp.webhookSmartApp.targetUrl : null,\r\n      tgtArnList: project.smartApp.appType === SmartApp.APP_TYPE.LAMBDA ?\r\n        project.smartApp.lambdaSmartApp.functions.map(arn => ({ tgtArn: arn })) : null,\r\n      appScopeList: project.smartApp.oauth.scope.map(scope => ({ scopeNm: scope })),\r\n      appSettingList: Object.keys(project.smartApp.settings || []).map(key => ({\r\n        settingKey: key,\r\n        settingValue: project.smartApp.settings[key],\r\n      })),\r\n      appUi: {\r\n        plgnId: project.smartApp.ui.pluginId,\r\n        dasbdCardYn: project.smartApp.ui.dashboardCardsEnabled ? 'Y' : 'N',\r\n      },\r\n    },\r\n    appCatalog: {\r\n      dispNm: project.appCatalog.appInternalName,\r\n    },\r\n    plgnId,\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * Controller that has a responsibility for creating Service Plugin projects\r\n */\r\nclass ServicePluginProjectController extends Emitter {\r\n\r\n  constructor(parent) {\r\n    super(); // Emiiter\r\n    this.config = parent.config;\r\n    this.uiMetaGenerator = parent.uiMetaGenerator;\r\n    this.deviceProfileManager = parent.deviceProfileManager;\r\n    this.agent = parent.agent;\r\n  }\r\n\r\n\r\n  createProject(name, currDir, smartAppConfig, pluginId, generatePlugin) {\r\n    const proj = new Project(name, Project.PROJ_TYPE.SERVICE);\r\n    const projPath = path.join(currDir, name);\r\n\r\n    try {\r\n      this.validateProjectInfo(name, projPath, smartAppConfig, pluginId);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return fs.makeDir(projPath)\r\n      .then(() => this.generateSmartAppFile(projPath, smartAppConfig))\r\n      .then(() => this.generateCatalogFile(projPath, smartAppConfig.appName))\r\n      .then(() => (generatePlugin ?\r\n        ServicePluginProjectController.generateServicePluginFiles(projPath, pluginId)\r\n        : null))\r\n      .then(() => ProjectConfigurator.generateConfig(projPath, proj))\r\n      .catch((err) => {\r\n        if (fs.existsSync(projPath)) fs.removeSync(projPath);\r\n        throw err;\r\n      });\r\n  }\r\n\r\n\r\n  createDefaultProject(name, currDir, appName, appType, lambdaArns, targetUrl,\r\n    pluginId, generatePlugin, dashboardCardsEnabled = false) {\r\n    // check options\r\n    ServicePluginProjectController.validateProjectOptions(appName, appType, lambdaArns, targetUrl,\r\n      pluginId, generatePlugin);\r\n\r\n    let smartAppConfig = null;\r\n    if (appType === SmartApp.APP_TYPE.LAMBDA) {\r\n      smartAppConfig = new SmartApp({\r\n        appName,\r\n        displayName: appName,\r\n        description: appName,\r\n        singleInstance: false,\r\n        appType,\r\n        lambdaSmartApp: { functions: lambdaArns },\r\n        ui: {\r\n          pluginId: pluginId || '',\r\n          dashboardCardsEnabled,\r\n        },\r\n        oauth: {\r\n          clientName: 'none',\r\n          scope: [\r\n            'r:locations:*', 'w:schedules', 'w:installedapps:*', 'r:installedapps:*',\r\n            'r:schedules', 'x:devices:*', 'l:devices', 'r:devices:*', 'w:devices:*',\r\n            'i:deviceprofiles',\r\n          ],\r\n        },\r\n      });\r\n    } else if (appType === SmartApp.APP_TYPE.WEBHOOK) {\r\n      smartAppConfig = new SmartApp({\r\n        appName,\r\n        displayName: appName,\r\n        description: appName,\r\n        singleInstance: false,\r\n        appType: SmartApp.APP_TYPE.WEBHOOK,\r\n        webhookSmartApp: { targetUrl },\r\n        ui: {\r\n          pluginId: pluginId || '',\r\n          dashboardCardsEnabled,\r\n        },\r\n        oauth: {\r\n          clientName: 'none',\r\n          scope: [\r\n            'r:locations:*', 'w:schedules', 'w:installedapps:*', 'r:installedapps:*',\r\n            'r:schedules', 'x:devices:*', 'l:devices', 'r:devices:*', 'w:devices:*',\r\n            'i:deviceprofiles',\r\n          ],\r\n        },\r\n      });\r\n    } else {\r\n      throw new StError('INVALID_APP_TYPE', appType);\r\n    }\r\n\r\n    return this.createProject(name, currDir, smartAppConfig, pluginId, generatePlugin);\r\n  }\r\n\r\n\r\n  buildProject(projPath, projConfig) {\r\n    const emit = this.emit.bind(this);\r\n    const outputPath = path.join(projPath, projConfig.outputPath);\r\n\r\n    const projBuilder = new ProjectBuilder(this, projPath, projConfig);\r\n    projBuilder.on('progress', msg => emit('progress', msg));\r\n\r\n    if (!this.config.mnid) throw new Error('Login or Requesting MNID required!');\r\n\r\n    emit('start', projConfig.name);\r\n    return fs.remove(outputPath)\r\n      .then(() => fs.makeDir(outputPath))\r\n      .then(() => fs.exists(path.join(projPath, ProjectConfigurator.PLUGIN_DIR)))\r\n      .then((exists) => {\r\n        if (exists) return projBuilder.buildPluginFiles();\r\n        return Promise.resolve();\r\n      });\r\n  }\r\n\r\n\r\n  readProject(projPath) { // eslint-disable-line\r\n    let project = null;\r\n    const smartAppPath = path.join(projPath, ProjectConfigurator.SMART_APP_FILE);\r\n    const appCatalogPath = path.join(projPath, ProjectConfigurator.APP_CATALOG_FILE);\r\n    const manifestXmlPath = path.join(projPath, ProjectConfigurator.PLUGIN_DIR,\r\n      ProjectConfigurator.PLUGIN_MANIFEST_FILE);\r\n\r\n\r\n    return ProjectConfigurator.retrieveConfig(projPath)\r\n      .then((config) => {\r\n        project = new Project(config.name, config.type);\r\n        return fs.readJson(smartAppPath)\r\n          .then((json) => { project.smartApp = json; })\r\n          .then(() => fs.readJson(appCatalogPath))\r\n          .then((json) => { project.appCatalog = json; })\r\n          .then(() => fs.exists(manifestXmlPath))\r\n          .then((exists) => {\r\n            if (!exists) return Promise.resolve();\r\n            return PluginPackageController.readPluginManifestXml(manifestXmlPath)\r\n              .then((plugin) => { project.plugin = plugin; })\r\n              .then(() => {\r\n                const ppkFile = path.resolve(projPath, 'out',\r\n                  `${project.plugin.package}_${project.plugin.versionName}.ppk`);\r\n                if (fs.existsSync(ppkFile)) {\r\n                  project.output = {\r\n                    ppkFile,\r\n                  };\r\n                }\r\n              });\r\n          });\r\n      })\r\n      .then(() => project);\r\n  }\r\n\r\n\r\n  createWebConsoleProject(project, name, description, selfPublish) {\r\n    this.emit('progress', 'Registering project to Web Console...');\r\n    let registeredWebPrj = null;\r\n    return Promise.resolve()\r\n    .then(() => {\r\n      if (project.output && project.output.ppkFile) {\r\n        return this.agent.createPlugin(project.output.ppkFile, 'PTC-SERVICE', 'CDS-DRAFT');\r\n      }\r\n      return null;\r\n    })\r\n    .then(resp =>\r\n        this.agent.postServicePluginProject(\r\n        getSvcPlgnCreateReqBody(project, name, description, resp ? resp.plgnId : null)))\r\n    .then((webPrj) => {\r\n      registeredWebPrj = webPrj;\r\n      return webPrj;\r\n    })\r\n    .then((webPrj) => {\r\n      if (!selfPublish) return WebConsoleProject.createFromSvcPlgnResp(webPrj);\r\n      return this.publishWebConsoleProject(webPrj.pjtId);\r\n    })\r\n    .catch((err) => {\r\n      if (!registeredWebPrj) throw err;\r\n      return this.deleteWebConsoleProject(registeredWebPrj.pjtId, true)\r\n        .then(() => { throw err; });\r\n    });\r\n  }\r\n\r\n  readWebConsoleProjectList() {\r\n    return this.agent.getServicePluginProjectList(999, 1)\r\n      .then(resp => WebConsoleProject.createListFromSvcPlgnResp(resp));\r\n  }\r\n\r\n\r\n  readWebConsoleProject(projectId) {\r\n    return this.agent.getServicePluginProject(projectId)\r\n      .then(resp => WebConsoleProject.createFromSvcPlgnResp(resp));\r\n  }\r\n\r\n\r\n  existsWebConsoleProject(projectId) {\r\n    return this.agent.getServicePluginProject(projectId)\r\n      .then(() => true)\r\n      .catch((err) => {\r\n        if (err.message.includes('not found...')) {\r\n          return false;\r\n        }\r\n        throw err;\r\n      });\r\n  }\r\n\r\n\r\n  updateWebConsoleProject(pjtId, project, name, description) {\r\n    this.emit('progress', 'Updating Web Console project...');\r\n    return Promise.resolve()\r\n    .then(() => {\r\n      if (project.output && project.output.ppkFile) {\r\n        return this.agent.createPlugin(project.output.ppkFile, 'PTC-SERVICE', 'CDS-DRAFT');\r\n      }\r\n      return null;\r\n    })\r\n    .then(resp => this.agent.putServicePluginProject(pjtId,\r\n        getSvcPlgnUpdateReqBody(project, name, description, resp ? resp.plgnId : null)))\r\n    .then(webPrj => WebConsoleProject.createFromSvcPlgnResp(webPrj));\r\n  }\r\n\r\n\r\n  deleteWebConsoleProject(pjtId, rollback) {\r\n    if (!rollback) {\r\n      this.emit('progress', `Deleting Web Console project... ${pjtId}`);\r\n    }\r\n    return this.agent.deleteServicePluginProject(pjtId);\r\n  }\r\n\r\n\r\n  publishWebConsoleProject(pjtId) {\r\n    this.emit('progress', `Publishing project(self-publish)... ${pjtId}`);\r\n    return this.agent.postServicePluginSelfPublish(pjtId)\r\n      .then(webPrj => WebConsoleProject.createFromSvcPlgnResp(webPrj, true));\r\n  }\r\n\r\n\r\n  unpublishWebConsoleProject(pjtId) {\r\n    this.emit('progress', `Unpublishing project... ${pjtId}`);\r\n    return this.agent.postServicePluginUnpublish(pjtId)\r\n      .then(webPrj => WebConsoleProject.createFromSvcPlgnResp(webPrj));\r\n  }\r\n\r\n\r\n  generateSmartAppFile(projPath, smartAppConfig) { // eslint-disable-line\r\n    const filePath = path.join(projPath, ProjectConfigurator.SMART_APP_FILE);\r\n\r\n    return fs.writeFile(filePath, JSON.stringify(smartAppConfig, null, 2));\r\n  }\r\n\r\n\r\n  generateCatalogFile(projPath, name) { // eslint-disable-line\r\n    const catalogPath = path.join(projPath, ProjectConfigurator.APP_CATALOG_FILE);\r\n\r\n    const appCatalog = new AppCatalog({\r\n      appInternalName: name,\r\n      appType: AppCatalog.APP_TYPE.SERVICE,\r\n      localizations: {\r\n        'en-US': {\r\n          metadataDisplayName: name,\r\n        },\r\n      },\r\n    });\r\n\r\n    return fs.writeFile(catalogPath, JSON.stringify(appCatalog, null, 2));\r\n  }\r\n\r\n\r\n  static validateProjectOptions(appName, appType, lambdaArns, targetUrl, pluginId, generatePlugin) {\r\n    if (!appName) {\r\n      throw new StError('CREATE_PROJECT_APP_NAME_OPT_REQUIRED');\r\n    }\r\n    if (!appType) {\r\n      throw new StError('CREATE_PROJECT_APP_TYPE_OPT_REQUIRED');\r\n    }\r\n    if (!SmartApp.isValidAppType(appType)) {\r\n      throw new StError('INVALID_APP_TYPE', appType);\r\n    }\r\n    if (appType === SmartApp.APP_TYPE.LAMBDA && !lambdaArns) {\r\n      throw new StError('CREATE_PROJECT_LAMBDA_ARN_OPT_REQUIRED');\r\n    }\r\n    if (appType === SmartApp.APP_TYPE.WEBHOOK && !targetUrl) {\r\n      throw new StError('CREATE_PROJECT_TARGET_URL_OPT_REQUIRED');\r\n    }\r\n    if (generatePlugin && !pluginId) {\r\n      throw new StError('CREATE_PROJECT_PLUGIN_ID_OPT_REQUIRED');\r\n    }\r\n  }\r\n\r\n\r\n  validateProjectInfo(name, projPath, smartAppConfig, pluginId) { // eslint-disable-line\r\n    ProjectGenerator.validateProjectInput(name, projPath);\r\n\r\n    if (pluginId && !PLUGIN_ID_REGEXP.test(pluginId)) {\r\n      throw new StError('INVALID_PLUGIN_ID_REGEX', pluginId);\r\n    }\r\n  }\r\n\r\n\r\n  static generateServicePluginFiles(projPath, pluginId) {\r\n    const pluginPath = path.join(projPath, ProjectConfigurator.PLUGIN_DIR);\r\n    const libPath = path.join(pluginPath, ProjectConfigurator.PLUGIN_LIB_DIR);\r\n    const jsDirPath = path.join(pluginPath, ProjectConfigurator.PLUGIN_JS_DIR);\r\n    const cssDirPath = path.join(pluginPath, ProjectConfigurator.PLUGIN_CSS_DIR);\r\n\r\n    return fs.makeDir(pluginPath)\r\n      .then(() => Promise.all([fs.makeDir(jsDirPath), fs.makeDir(cssDirPath), fs.makeDir(libPath)]))\r\n      .then(() => {\r\n        let defaultManifest = DEFAULT_MANIFEST;\r\n        if (pluginId) {\r\n          defaultManifest = defaultManifest.replace('default.plugin', pluginId);\r\n        }\r\n\r\n        return Promise.all([\r\n          fs.writeFile(path.join(pluginPath, ProjectConfigurator.PLUGIN_INDEX_FILE),\r\n            DEFAULT_INDEX),\r\n          fs.writeFile(path.join(pluginPath, ProjectConfigurator.PLUGIN_MANIFEST_FILE),\r\n            defaultManifest),\r\n          fs.writeFile(path.join(jsDirPath, ProjectConfigurator.PLUGIN_JS_FILE), DEFAULT_JS),\r\n          fs.writeFile(path.join(cssDirPath, ProjectConfigurator.PLUGIN_CSS_FILE), DEFAULT_CSS),\r\n          fs.writeFile(path.join(pluginPath, ProjectConfigurator.PLUGIN_ICON_FILE), ''),\r\n        ]);\r\n      });\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = new Proxy(ServicePluginProjectController, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/ServicePluginProjectController.js\n// module id = 68\n// module chunks = 0","const path = require('path');\r\nconst Emitter = require('events');\r\nconst Promise = require('bluebird');\r\n\r\nconst StError = require('../errors/StError');\r\nconst ProjectConfigurator = require('./ProjectConfigurator');\r\nconst ProjectGenerator = require('./ProjectGenerator');\r\nconst ProjectBuilder = require('./ProjectBuilder');\r\nconst Project = require('../models/Project');\r\nconst SmartApp = require('../models/SmartApp');\r\nconst AppCatalog = require('../models/AppCatalog');\r\nconst WebConsoleProject = require('../models/WebConsoleProject');\r\nconst fs = require('./FileSystemHandler');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\n\r\nfunction getAutomationCreateReqBody(project) {\r\n  return {\r\n    pjtNm: project.name,\r\n    prodType: 'CPT-AUTOMATION',\r\n    pjtDsc: '',\r\n    connectorApp: {\r\n      appInfoTypeCd: 'SAI-AUTOMATION',\r\n      appNm: project.smartApp.appName,\r\n      dispNm: project.smartApp.displayName,\r\n      appDsc: project.smartApp.description,\r\n      appTypeCd: project.smartApp.appType === SmartApp.APP_TYPE.LAMBDA ? 'SAT-LAMBDA' : 'SAT-WEBHOOK',\r\n      multInstanceTypeCd: project.smartApp.singleInstance ? 'SAM-SINGLE' : 'SAM-MULTI',\r\n      tgtUrl: project.smartApp.appType === SmartApp.APP_TYPE.WEBHOOK ?\r\n        project.smartApp.webhookSmartApp.targetUrl : null,\r\n      tgtArnList: project.smartApp.appType === SmartApp.APP_TYPE.LAMBDA ?\r\n        project.smartApp.lambdaSmartApp.functions.map(arn => ({ tgtArn: arn })) : null,\r\n      appScopeList: project.smartApp.oauth.scope.map(scope => ({ scopeNm: scope })),\r\n      appSettingList: Object.keys(project.smartApp.settings || []).map(key => ({\r\n        settingKey: key,\r\n        settingValue: project.smartApp.settings[key],\r\n      })),\r\n    },\r\n    appCatalog: {\r\n      dispNm: project.appCatalog.appInternalName,\r\n    },\r\n  };\r\n}\r\n\r\n\r\nfunction getAutomationUpdateReqBody(project) {\r\n  return {\r\n    pjtNm: project.name,\r\n    pjtDsc: '',\r\n    connectorApp: {\r\n      appNm: project.smartApp.appName,\r\n      dispNm: project.smartApp.displayName,\r\n      appDsc: project.smartApp.description,\r\n      tgtUrl: project.smartApp.appType === SmartApp.APP_TYPE.WEBHOOK ?\r\n        project.smartApp.webhookSmartApp.targetUrl : null,\r\n      tgtArnList: project.smartApp.appType === SmartApp.APP_TYPE.LAMBDA ?\r\n        project.smartApp.lambdaSmartApp.functions.map(arn => ({ tgtArn: arn })) : null,\r\n      appScopeList: project.smartApp.oauth.scope.map(scope => ({ scopeNm: scope })),\r\n      appSettingList: Object.keys(project.smartApp.settings || []).map(key => ({\r\n        settingKey: key,\r\n        settingValue: project.smartApp.settings[key],\r\n      })),\r\n    },\r\n    appCatalog: {\r\n      dispNm: project.appCatalog.appInternalName,\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * Controller that has a responsibility for creating Automation projects\r\n */\r\nclass AutomationProjectController extends Emitter {\r\n\r\n  constructor(parent) {\r\n    super(); // Emiiter\r\n    this.config = parent.config;\r\n    this.agent = parent.agent;\r\n  }\r\n\r\n  createProject(name, currDir, smartAppConfig) {\r\n    const proj = new Project(name, Project.PROJ_TYPE.AUTOMATION);\r\n    const projPath = path.join(currDir, name);\r\n\r\n    try {\r\n      this.validateProjectInfo(name, projPath, smartAppConfig);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return fs.makeDir(projPath)\r\n      .then(() => this.generateSmartAppFile(projPath, smartAppConfig))\r\n      .then(() => this.generateCatalogFile(projPath, smartAppConfig.appName))\r\n      .then(() => ProjectConfigurator.generateConfig(projPath, proj))\r\n      .catch((err) => {\r\n        if (fs.existsSync(projPath)) fs.removeSync(projPath);\r\n        throw err;\r\n      });\r\n  }\r\n\r\n\r\n  createDefaultProject(name, currDir, appName, appType, lambdaArns, targetUrl) {\r\n    // check options\r\n    AutomationProjectController.validateProjectOptions(appName, appType, lambdaArns, targetUrl);\r\n\r\n    let smartAppConfig = null;\r\n    if (appType === SmartApp.APP_TYPE.LAMBDA) {\r\n      smartAppConfig = new SmartApp({\r\n        appName,\r\n        displayName: appName,\r\n        description: appName,\r\n        singleInstance: false,\r\n        appType,\r\n        lambdaSmartApp: { functions: lambdaArns },\r\n      });\r\n    } else if (appType === SmartApp.APP_TYPE.WEBHOOK) {\r\n      smartAppConfig = new SmartApp({\r\n        appName,\r\n        displayName: appName,\r\n        description: appName,\r\n        singleInstance: false,\r\n        appType: SmartApp.APP_TYPE.WEBHOOK,\r\n        webhookSmartApp: { targetUrl },\r\n      });\r\n    } else {\r\n      throw new StError('INVALID_APP_TYPE', appType);\r\n    }\r\n\r\n    return this.createProject(name, currDir, smartAppConfig);\r\n  }\r\n\r\n\r\n  buildProject(projPath, projConfig) {\r\n    const emit = this.emit.bind(this);\r\n    const outputPath = path.join(projPath, projConfig.outputPath);\r\n\r\n    const projBuilder = new ProjectBuilder(this, projPath, projConfig);\r\n    projBuilder.on('progress', msg => emit('progress', msg));\r\n\r\n    if (!this.config.mnid) throw new Error('Login or Requesting MNID required!');\r\n\r\n    emit('start', projConfig.name);\r\n    return fs.remove(outputPath)\r\n      .then(() => fs.makeDir(outputPath));\r\n      // .then(() => projBuilder.buildAutomationCatalogFile());\r\n  }\r\n\r\n\r\n  readProject(projPath) { // eslint-disable-line\r\n    let project = null;\r\n    const smartAppPath = path.join(projPath, ProjectConfigurator.SMART_APP_FILE);\r\n    const appCatalogPath = path.join(projPath, ProjectConfigurator.APP_CATALOG_FILE);\r\n\r\n    return ProjectConfigurator.retrieveConfig(projPath)\r\n      .then((config) => {\r\n        project = new Project(config.name, config.type);\r\n        return fs.readJson(smartAppPath)\r\n          .then((json) => { project.smartApp = json; })\r\n          .then(() => fs.readJson(appCatalogPath))\r\n          .then((json) => { project.appCatalog = json; });\r\n      })\r\n      .then(() => project);\r\n  }\r\n\r\n\r\n  createWebConsoleProject(project, selfPublish) {\r\n    this.emit('progress', 'Registering project to Web Console...');\r\n    let registeredWebPrj = null;\r\n    return this.agent.postAutomationProject(getAutomationCreateReqBody(project))\r\n      .then((webPrj) => {\r\n        registeredWebPrj = webPrj;\r\n        return webPrj;\r\n      })\r\n      .then((webPrj) => {\r\n        if (!selfPublish) return WebConsoleProject.createFromAutomationResp(webPrj);\r\n        return this.publishWebConsoleProject(webPrj.pjtId);\r\n      })\r\n      .catch((err) => {\r\n        if (!registeredWebPrj) throw err;\r\n        return this.deleteWebConsoleProject(registeredWebPrj.pjtId, true)\r\n          .then(() => { throw err; });\r\n      });\r\n  }\r\n\r\n\r\n  readWebConsoleProjectList() {\r\n    return this.agent.getAutomationProjectList(999, 1)\r\n      .then(resp => WebConsoleProject.createListFromAutomationResp(resp));\r\n  }\r\n\r\n\r\n  readWebConsoleProject(projectId) {\r\n    return this.agent.getAutomationProject(projectId)\r\n      .then(resp => WebConsoleProject.createFromAutomationResp(resp));\r\n  }\r\n\r\n\r\n  existsWebConsoleProject(projectId) {\r\n    return this.agent.getAutomationProject(projectId)\r\n      .then(() => true)\r\n      .catch(() => false);\r\n  }\r\n\r\n\r\n  updateWebConsoleProject(pjtId, project) {\r\n    this.emit('progress', 'Updating Web Console project...');\r\n    return this.agent.putAutomationProject(pjtId, getAutomationUpdateReqBody(project))\r\n      .then(webPrj => WebConsoleProject.createFromAutomationResp(webPrj));\r\n  }\r\n\r\n\r\n  deleteWebConsoleProject(pjtId, rollback) {\r\n    if (!rollback) {\r\n      this.emit('progress', `Deleting Web Console project... ${pjtId}`);\r\n    }\r\n    return this.agent.deleteAutomationProject(pjtId);\r\n  }\r\n\r\n\r\n  publishWebConsoleProject(pjtId) {\r\n    this.emit('progress', `Publishing project(self-publish)... ${pjtId}`);\r\n    return this.agent.postAutomationSelfPublish(pjtId)\r\n      .then(webPrj => WebConsoleProject.createFromAutomationResp(webPrj));\r\n  }\r\n\r\n\r\n  unpublishWebConsoleProject(pjtId) {\r\n    this.emit('progress', `Unpublishing project... ${pjtId}`);\r\n    return this.agent.postAutomationUnpublish(pjtId)\r\n      .then(webPrj => WebConsoleProject.createFromAutomationResp(webPrj));\r\n  }\r\n\r\n\r\n  generateSmartAppFile(projPath, smartAppConfig) { // eslint-disable-line\r\n    const filePath = path.join(projPath, ProjectConfigurator.SMART_APP_FILE);\r\n\r\n    return fs.writeFile(filePath, JSON.stringify(smartAppConfig, null, 2));\r\n  }\r\n\r\n\r\n  generateCatalogFile(projPath, name) { // eslint-disable-line\r\n    const catalogPath = path.join(projPath, ProjectConfigurator.APP_CATALOG_FILE);\r\n\r\n    const appCatalog = new AppCatalog({\r\n      appInternalName: name,\r\n      appType: AppCatalog.APP_TYPE.AUTOMATION,\r\n      localizations: {\r\n        'en-US': {\r\n          metadataDisplayName: name,\r\n        },\r\n      },\r\n    });\r\n\r\n    return fs.writeFile(catalogPath, JSON.stringify(appCatalog, null, 2));\r\n  }\r\n\r\n\r\n  static validateProjectOptions(appName, appType, lambdaArns, targetUrl) {\r\n    if (!appName) {\r\n      throw new StError('CREATE_PROJECT_APP_NAME_OPT_REQUIRED');\r\n    }\r\n    if (!appType) {\r\n      throw new StError('CREATE_PROJECT_APP_TYPE_OPT_REQUIRED');\r\n    }\r\n    if (!SmartApp.isValidAppType(appType)) {\r\n      throw new StError('INVALID_APP_TYPE', appType);\r\n    }\r\n    if (appType === SmartApp.APP_TYPE.LAMBDA && !lambdaArns) {\r\n      throw new StError('CREATE_PROJECT_LAMBDA_ARN_OPT_REQUIRED');\r\n    }\r\n    if (appType === SmartApp.APP_TYPE.WEBHOOK && !targetUrl) {\r\n      throw new StError('CREATE_PROJECT_TARGET_URL_OPT_REQUIRED');\r\n    }\r\n  }\r\n\r\n\r\n  validateProjectInfo(name, projPath, smartAppConfig) { // eslint-disable-line\r\n    ProjectGenerator.validateProjectInput(name, projPath);\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = new Proxy(AutomationProjectController, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/AutomationProjectController.js\n// module id = 69\n// module chunks = 0","const Promise = require('bluebird');\r\nconst getClassLogger = require('../common/getClassLogger');\r\nconst StError = require('../errors/StError');\r\nconst ResourceTypeManager = require('./ResourceTypeManager');\r\nconst DeviceResourceManager = require('./DeviceResourceManager');\r\nconst DeviceProfile = require('../models/DeviceProfile');\r\nconst OcfDeviceResource = require('../models/OcfDeviceResource');\r\n\r\nfunction getPropertyType(ramlProperty) {\r\n  switch (ramlProperty.type) {\r\n    case 'boolean':\r\n      return 0;\r\n    case 'integer':\r\n      return 1;\r\n    case 'double':\r\n    case 'number':\r\n      return 2;\r\n    case 'string':\r\n      return 3;\r\n    case 'object':\r\n      return 4;\r\n    case 'bytes':\r\n      return 5;\r\n    case 'array':\r\n      {\r\n        const subType = ramlProperty.items ? ramlProperty.items.type : 'none';\r\n        if (subType === 'integer') return 6;\r\n        if (subType === 'double' || subType === 'number') return 7;\r\n        if (subType === 'string') return 8;\r\n        if (subType === 'string') return 9;\r\n        throw new StError('THINGS_SDK_PROPERTY_TYPE_MAPPING_NOT_FOUND', `array:${subType}`);\r\n      }\r\n    default:\r\n      throw new StError('THINGS_SDK_PROPERTY_TYPE_MAPPING_NOT_FOUND', ramlProperty.type);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n *  Model converter for Things SDK\r\n */\r\nclass ThingsSdkConverter {\r\n  /**\r\n   * Setup config object\r\n   * @param {Object} config config object\r\n   */\r\n  constructor(parent) {\r\n    this.config = parent.config;\r\n    this.deviceProfileMgr = parent.deviceProfileManager;\r\n    this.resourceTypeMgr = new ResourceTypeManager();\r\n    this.resourceTypeMgr.init();\r\n  }\r\n\r\n\r\n  /**\r\n   * Covert Things SDK device model to Device Profile model\r\n   *\r\n   * @param {object} deviceDef Source Things SDK device model\r\n   * @returns {(Promise.<DeviceProfile|Error>)}\r\n   *   A promise to be resolved with converted Device Profile model or rejected with an Error.\r\n   */\r\n  convertToDeviceProfile(deviceDef) {\r\n    const profile = new DeviceProfile();\r\n    const deviceSpec = deviceDef.device[0].specification;\r\n    const deviceResources = deviceDef.device[0].resources;\r\n\r\n    profile.name = deviceSpec.device.deviceName;\r\n\r\n    // extract 'components/capabilities' from resources\r\n    profile.components = [];\r\n    deviceResources.single.map(resource => this.mapToOcfResourceFromResource(resource))\r\n      .forEach((ocfResource) => {\r\n        const capability = this.deviceProfileMgr.mapResourceToCapability(ocfResource);\r\n        if (!capability) {\r\n          throw new StError('CAPABILITY_MAPPING_NOT_FOUND',\r\n            `[${ocfResource.rt.join(', ')}]:${ocfResource.href}`);\r\n        }\r\n\r\n        const componentId = capability.component;\r\n        let component = profile.components.find(comp => comp.id === componentId);\r\n        if (!component) { // if not foud, create new component\r\n          component = {\r\n            id: componentId,\r\n            capabilities: [],\r\n          };\r\n          profile.components.push(component);\r\n        } else if (component.capabilities.find(c => c.id === capability.id)) {\r\n          throw new StError('CAPABILITY_MAPPING_ALREADY_EXISTS', `${capability.component}:${capability.id}`);\r\n        }\r\n        component.capabilities.push({\r\n          id: capability.id,\r\n        });\r\n      });\r\n\r\n    const ocfResourceType = deviceSpec.device.deviceType;\r\n    const deviceType = DeviceResourceManager.retrieveDeviceTypeFromResourceType(ocfResourceType);\r\n    if (!deviceType) throw new StError('DEVICE_TYPE_MAPPING_NOT_FOUND', ocfResourceType);\r\n\r\n    profile.metadata = {\r\n      deviceType: deviceType.id,\r\n      vid: deviceSpec.platform.vendorId,\r\n    };\r\n\r\n    delete profile.id;\r\n\r\n    return Promise.resolve(profile);\r\n  }\r\n\r\n\r\n  /**\r\n   * Covert Device Profile model to Things SDK device model\r\n   *\r\n   * @param {object} deviceProfile Source Device Profile model\r\n   * @param {object} catalog Source Catalog information\r\n   * @returns {(Promise.<object|Error>)}\r\n   *   A promise to be resolved with converted Things SDK model or rejected with an Error.\r\n   */\r\n  convertFromDeviceProfile(deviceProfile, catalog) {\r\n    const ocfDeviceType =\r\n      this.deviceProfileMgr.convertToResourceModelByDeviceProfile(deviceProfile, true);\r\n    const covertedResources = this.mapToResourcesFromOcfResources(ocfDeviceType.resources);\r\n\r\n    return this.generateResourceTypesFromOcfResources(ocfDeviceType.resources)\r\n      .then((resourceTypes) => {\r\n        const deviceType = ocfDeviceType.device.rt.find(rt => rt !== 'oic.wk.d');\r\n        let setupId = '001';\r\n        if (catalog) {\r\n          if (!catalog.items) setupId = catalog.easysetupId;\r\n          else setupId = catalog.items[0].versions[0].appData.setupAppData.ocf.setupId;\r\n        }\r\n\r\n        return {\r\n          device: [{\r\n            specification: {\r\n              device: {\r\n                deviceType,\r\n                deviceName: ocfDeviceType.device.n,\r\n                specVersion: ocfDeviceType.device.icv,\r\n                dataModelVersion: ocfDeviceType.device.dmv,\r\n              },\r\n              platform: {\r\n                manufactuererName: this.config.mnid || ocfDeviceType.platform.mnmn,\r\n                manufacturerUrl: ocfDeviceType.platform.mnml,\r\n                manufacturingDate: ocfDeviceType.platform.mndt, // \"2017-01-01\"\r\n                modelNumber: ocfDeviceType.platform.mnmo, // \"VD-NetworkAudio\"\r\n                platformVersion: ocfDeviceType.platform.mnpv, // \"3.0\"\r\n                osVersion: ocfDeviceType.platform.mnos, // \"tizen\"\r\n                hardwareVersion: ocfDeviceType.platform.mnhw, // \"TS01\"\r\n                firmwareVersion: ocfDeviceType.platform.mnfv, // \"Virtual Device_0824\"\r\n                vendorId: ocfDeviceType.platform.vid, // \"ABC\"\r\n              },\r\n            },\r\n            resources: {\r\n              single: covertedResources,\r\n            },\r\n          }],\r\n          resourceTypes,\r\n          configuration: {\r\n            easySetup: {\r\n              connectivity: {\r\n                type: 1,\r\n                softAP: {\r\n                  setupId,\r\n                  artik: false,\r\n                },\r\n              },\r\n              ownershipTransferMethod: 2,\r\n            },\r\n            wifi: {\r\n              interfaces: 15,\r\n              frequency: 1,\r\n            },\r\n            filePath: {\r\n              svrdb: 'artikserversecured.dat',\r\n              provisioning: 'provisioning.dat',\r\n              certificate: 'certificate.pem',\r\n              privateKey: 'privateKey.der',\r\n            },\r\n          },\r\n        };\r\n      });\r\n  }\r\n\r\n\r\n  mapToResourcesFromOcfResources(ocfResources) { // eslint-disable-line\r\n    return ocfResources.filter(res => res.href !== '/oic/d' && res.href !== '/oic/p')\r\n      .map(res => ({\r\n        uri: res.href,\r\n        types: res.rt,\r\n        interfaces: res.if,\r\n        policy: res.p.bm,\r\n      }));\r\n  }\r\n\r\n\r\n  mapToOcfResourceFromResource(resource) { // eslint-disable-line\r\n    const ocfResource = new OcfDeviceResource(resource.uri);\r\n    ocfResource.rt = resource.types;\r\n    ocfResource.if = resource.interfaces;\r\n    ocfResource.type = ['application/json'];\r\n    // ocfResource.title = null;\r\n    ocfResource.p = { bm: resource.policy };\r\n\r\n    return ocfResource;\r\n  }\r\n\r\n\r\n  generateResourceTypesFromOcfResources(ocfResources) {\r\n    const usedResourceTypes = [];\r\n\r\n    ocfResources.filter(res => res.href !== '/oic/d' && res.href !== '/oic/p')\r\n      .forEach((res) => {\r\n        const usedResourceType = res.rt.find(rt => rt !== 'oic.wk.d');\r\n        if (usedResourceType && usedResourceTypes.indexOf(usedResourceType) < 0) {\r\n          usedResourceTypes.push(usedResourceType);\r\n        }\r\n      });\r\n\r\n    return Promise.map(usedResourceTypes,\r\n        ocfResourceType => this.resourceTypeMgr.retrieveResourceType(ocfResourceType))\r\n      .then(ocfResourceTypes => ocfResourceTypes.map((rt) => {\r\n        const properties = [];\r\n        if (rt.methods && rt.methods.get && rt.methods.get.response) {\r\n          Object.keys(rt.methods.get.response).forEach((key) => {\r\n            const resp = rt.methods.get.response[key];\r\n            let convertedProp = properties.find(prop => prop.key === key);\r\n            if (!convertedProp) {\r\n              convertedProp = {\r\n                key,\r\n                type: getPropertyType(resp),\r\n                rw: 1,\r\n                mandatory: false,\r\n              };\r\n              properties.push(convertedProp);\r\n            }\r\n            convertedProp.rw |= 1; // eslint-disable-line no-bitwise\r\n          });\r\n        }\r\n        if (rt.methods && rt.methods.post && rt.methods.post.body) {\r\n          Object.keys(rt.methods.post.body).forEach((key) => {\r\n            const body = rt.methods.post.body[key];\r\n            let convertedProp = properties.find(prop => prop.key === key);\r\n            if (!convertedProp) {\r\n              convertedProp = {\r\n                key,\r\n                type: getPropertyType(body),\r\n                rw: 2,\r\n                mandatory: false,\r\n              };\r\n              properties.push(convertedProp);\r\n            }\r\n            convertedProp.rw |= 2; // eslint-disable-line no-bitwise\r\n            if (rt.methods.post.required && rt.methods.post.required.indexOf(key) >= 0) {\r\n              convertedProp.mandatory = true;\r\n            }\r\n          });\r\n        }\r\n\r\n        return {\r\n          type: rt.rt,\r\n          properties,\r\n        };\r\n      }));\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(ThingsSdkConverter, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/ThingsSdkConverter.js\n// module id = 70\n// module chunks = 0","const StError = require('../errors/StError');\r\n\r\n/**\r\n * Configuration status\r\n *\r\n * @static\r\n * @memberof InstalledSmartAppConfig\r\n * @property {string} STAGED 'STAGED'\r\n * @property {string} DONE 'DONE'\r\n * @property {string} AUTHORIZED 'AUTHORIZED'\r\n * @property {string} REVOKED 'REVOKED'\r\n */\r\nconst CONFIG_STATUS = Object.freeze({\r\n  STAGED: 'STAGED',\r\n  DONE: 'DONE',\r\n  AUTHORIZED: 'AUTHORIZED',\r\n  REVOKED: 'REVOKED',\r\n});\r\n\r\n\r\n/**\r\n * Check installed app status validity\r\n *\r\n * @static\r\n * @memberof InstalledSmartAppConfig\r\n * @param {string} status Installed app status\r\n * @returns {boolean} Status validity\r\n */\r\nfunction isValidConfigStatus(status) {\r\n  return status === CONFIG_STATUS.STAGED ||\r\n    status === CONFIG_STATUS.DONE ||\r\n    status === CONFIG_STATUS.AUTHORIZED ||\r\n    status === CONFIG_STATUS.REVOKED;\r\n}\r\n\r\n\r\n/**\r\n * Data model for install configuration\r\n *\r\n * @property {string} installedAppId Installed app Id\r\n * @property {string} configurationId Configuration Id\r\n * @property {string} configurationStatus Installed app configuration status\r\n * @property {Object} config Configuration\r\n * @property {string} createdDate Created date\r\n * @property {string} lastUpdatedDate Updatd Date\r\n */\r\nclass InstalledSmartAppConfig {\r\n  /**\r\n   * @param {Object} response Response object\r\n   */\r\n  constructor({ installedAppId, configurationId, configurationStatus,\r\n    config, createdDate, lastUpdatedDate }) {\r\n    if (configurationStatus && !isValidConfigStatus(configurationStatus)) {\r\n      throw new StError('INVALID_CONFIGURATION_STATUS', configurationStatus);\r\n    }\r\n    this.installedAppId = installedAppId;\r\n    this.configurationId = configurationId;\r\n    this.configurationStatus = configurationStatus;\r\n    this.config = config;\r\n    this.createdDate = createdDate;\r\n    this.lastUpdatedDate = lastUpdatedDate;\r\n  }\r\n}\r\nInstalledSmartAppConfig.CONFIG_STATUS = CONFIG_STATUS;\r\nInstalledSmartAppConfig.isValidConfigStatus = isValidConfigStatus;\r\n\r\nmodule.exports = InstalledSmartAppConfig;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/InstalledSmartAppConfig.js\n// module id = 71\n// module chunks = 0","const StError = require('../errors/StError');\r\n\r\n/**\r\n * Source type\r\n *\r\n * @static\r\n * @memberof SmartAppSubscription\r\n * @property {string} DEVICE 'DEVICE'\r\n * @property {string} CAPABILITY 'CAPABILITY'\r\n */\r\nconst SOURCE_TYPE = Object.freeze({\r\n  DEVICE: 'DEVICE',\r\n  CAPABILITY: 'CAPABILITY',\r\n});\r\n\r\n/**\r\n * Check source type\r\n *\r\n * @static\r\n * @memberof SmartAppSubscription\r\n * @param {string} sourceType Source type\r\n * @returns {boolean} Source type validity\r\n */\r\nfunction isValidSourceType(sourceType) {\r\n  return sourceType === SOURCE_TYPE.DEVICE ||\r\n    sourceType === SOURCE_TYPE.CAPABILITY;\r\n}\r\n\r\n/**\r\n * Data model for subscription\r\n *\r\n * @property {string} id Subscription Id\r\n * @property {string} installedAppId Installed app Id\r\n * @property {string} sourceType Type of subscription, one of 'DEVICE', 'CAPABILITY'\r\n * @property {Object} device Details of device subscription\r\n * @property {string} capability Details of capability subscription\r\n */\r\nclass SmartAppSubscription {\r\n  /**\r\n   * @param {Object} response Response object\r\n   */\r\n  constructor({ id, installedAppId, sourceType, device, capability, details }) {\r\n    if (sourceType && !isValidSourceType(sourceType)) {\r\n      throw new StError('INVALID_SOURCE_TYPE', sourceType);\r\n    }\r\n    this.installedAppId = installedAppId;\r\n    this.sourceType = sourceType;\r\n    if (id) this.id = id;\r\n    switch (sourceType) {\r\n      case SOURCE_TYPE.DEVICE:\r\n        if (device) this.device = device;\r\n        else if (details) this.device = details;\r\n        else throw new StError('NO_SUBSCRIPTION_DETAIL');\r\n        break;\r\n      case SOURCE_TYPE.CAPABILITY:\r\n        if (capability) this.capability = capability;\r\n        else if (details) this.capability = details;\r\n        else throw new StError('NO_SUBSCRIPTION_DETAIL');\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make request body for 'create subscription'\r\n   *\r\n   * @returns {Object} Request body object for create subscription\r\n   */\r\n  toCreateRequestBody() {\r\n    const body = {\r\n      sourceType: this.sourceType,\r\n    };\r\n    switch (this.sourceType) {\r\n      case SOURCE_TYPE.DEVICE:\r\n        body.device = this.device;\r\n        break;\r\n      case SOURCE_TYPE.CAPABILITY:\r\n        body.capability = this.capability;\r\n        break;\r\n      default:\r\n    }\r\n    return body;\r\n  }\r\n}\r\nSmartAppSubscription.SOURCE_TYPE = SOURCE_TYPE;\r\nSmartAppSubscription.isValidSourceType = isValidSourceType;\r\n\r\nmodule.exports = SmartAppSubscription;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/SmartAppSubscription.js\n// module id = 72\n// module chunks = 0","const AuthManager = require('./controllers/AuthManager');\r\nconst AwsManager = require('./controllers/AwsManager');\r\nconst C2cDeviceProfileManager = require('./controllers/C2cDeviceProfileManager');\r\nconst CapabilityManager = require('./controllers/CapabilityManager');\r\nconst CertManager = require('./controllers/CertManager');\r\nconst CoapMessage = require('./models/CoapMessage');\r\nconst CoapOptions = require('./models/CoapOptions');\r\nconst Configurator = require('./controllers/Configurator');\r\nconst DeviceManager = require('./controllers/DeviceManager');\r\nconst DeviceProfile = require('./models/DeviceProfile');\r\nconst DeviceProfileManager = require('./controllers/DeviceProfileManager');\r\nconst DeviceResourceManager = require('./controllers/DeviceResourceManager');\r\nconst DevPortalManager = require('./controllers/DevPortalManager');\r\nconst FileSystemHandler = require('./controllers/FileSystemHandler');\r\nconst GroupManager = require('./controllers/OcfGroupManager');\r\nconst IotCloudAgent = require('./controllers/IotCloudAgent');\r\nconst IotCloudClient = require('./controllers/IotCloudClient');\r\nconst IotCloudServer = require('./controllers/IotCloudServer');\r\nconst LocationManager = require('./controllers/LocationManager');\r\nconst ManifestManager = require('./controllers/ManifestManager');\r\nconst MetaDataGenerator = require('./controllers/MetaDataGenerator');\r\nconst OcfDeviceManager = require('./controllers/OcfDeviceManager');\r\nconst OcfGroupManager = require('./controllers/OcfGroupManager');\r\nconst OcfLogManager = require('./controllers/OcfLogManager');\r\nconst OneAppController = require('./controllers/OneAppController');\r\nconst Project = require('./models/Project');\r\nconst ProjectManager = require('./controllers/ProjectManager');\r\nconst ResourceTypeManager = require('./controllers/ResourceTypeManager');\r\nconst SmartApp = require('./models/SmartApp');\r\nconst SmartAppInstManager = require('./controllers/SmartAppInstManager');\r\nconst SmartAppManager = require('./controllers/SmartAppManager');\r\nconst SmartAppSchManager = require('./controllers/SmartAppSchManager');\r\nconst SmartAppSubManager = require('./controllers/SmartAppSubManager');\r\nconst PluginManager = require('./controllers/PluginManager');\r\nconst SmartAppSubscription = require('./models/SmartAppSubscription');\r\nconst StError = require('./errors/StError');\r\nconst StLogger = require('./common/StLogger');\r\nconst StLogManager = require('./controllers/StLogManager');\r\nconst TextHandler = require('./common/TextHandler');\r\nconst util = require('./common/util');\r\nconst WebConsoleProjectManager = require('./controllers/WebConsoleProjectManager');\r\nconst ThingsSdkConverter = require('./controllers/ThingsSdkConverter');\r\n\r\n\r\nconst library = {\r\n  /* COMMON */\r\n  StLogger,\r\n  TextHandler,\r\n  util,\r\n  /* ERROR */\r\n  StError,\r\n  /* CONTROLLER */\r\n  AuthManager,\r\n  AwsManager,\r\n  C2cDeviceProfileManager,\r\n  CapabilityManager,\r\n  CertManager,\r\n  Configurator,\r\n  DeviceManager,\r\n  DeviceProfileManager,\r\n  DeviceResourceManager,\r\n  DevPortalManager,\r\n  FileSystemHandler,\r\n  GroupManager,\r\n  IotCloudAgent,\r\n  IotCloudClient,\r\n  IotCloudServer,\r\n  LocationManager,\r\n  ManifestManager,\r\n  MetaDataGenerator,\r\n  OcfDeviceManager,\r\n  OcfGroupManager,\r\n  OcfLogManager,\r\n  OneAppController,\r\n  ProjectManager,\r\n  ResourceTypeManager,\r\n  SmartAppInstManager,\r\n  SmartAppManager,\r\n  SmartAppSchManager,\r\n  SmartAppSubManager,\r\n  StLogManager,\r\n  WebConsoleProjectManager,\r\n  ThingsSdkConverter,\r\n  PluginManager,\r\n  /* MODEL */\r\n  CoapMessage,\r\n  CoapOptions,\r\n  Project,\r\n  SmartApp,\r\n  SmartAppSubscription,\r\n  DeviceProfile,\r\n};\r\n\r\nmodule.exports = library;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 73\n// module chunks = 0","const EventEmitter = require('events');\r\nconst Promise = require('bluebird');\r\n\r\nconst IotCloudAgent = require('./IotCloudAgent');\r\nconst IotConsoleAgent = require('./IotConsoleAgent');\r\nconst AuthProviderAgent = require('./AuthProviderAgent');\r\nconst DevPortalManager = require('./DevPortalManager');\r\nconst { getServerConfig } = require('../common/util');\r\nconst { getText } = require('../common/TextHandler');\r\nconst CertManager = require('./CertManager');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\n/**\r\n * Authentification and Authorization Manager. Call init() before use.\r\n */\r\nclass AuthManager extends EventEmitter {\r\n  /**\r\n   * Create an AuthManager.\r\n   * @param {Configurator} configurator A Configurator to manipulate configuration.\r\n   */\r\n  constructor(configurator) {\r\n    super();\r\n    this.configurator = configurator;\r\n  }\r\n\r\n  /**\r\n   * Set private field from configuration. And create agent for cloud\r\n   * @param {IotCloudAgent} [iotCloudAgent] IotCloudAgent to use.\r\n   * @param {AuthProviderAgent} [authProviderAgent] AuthProviderAgent to use.\r\n   * @param {IotConsoleAgent} [iotConsoleAgent] AuthProviderAgent to use.\r\n   * If not specified, create default agent from configuration.\r\n   * @returns {undefined}\r\n   */\r\n  init(iotCloudAgent, authProviderAgent, iotConsoleAgent) {\r\n    const config = this.configurator.getConfig();\r\n    const iotCloudServerConfig = getServerConfig(config, 'iotCloud');\r\n    const authProviderServerConfig = getServerConfig(config, 'authProvider');\r\n    const iotConsoleServerConfig = getServerConfig(config, 'iotConsole');\r\n    const cm = new CertManager(config);\r\n    cm.init();\r\n    const { key, cert } = cm.getDeviceKeyCert(config);\r\n    this.iotCloudAgent = iotCloudAgent || new IotCloudAgent(iotCloudServerConfig, key, cert);\r\n    this.iotCloudAgent.on('debug', msg => this.emit('debug', msg));\r\n    this.authProviderAgent = authProviderAgent || new AuthProviderAgent(authProviderServerConfig);\r\n    this.authProviderAgent.on('debug', msg => this.emit('debug', msg));\r\n    this.authProviderUri = authProviderServerConfig.uri;\r\n    this.iotConsoleAgent = iotConsoleAgent || new IotConsoleAgent(config, iotConsoleServerConfig);\r\n    this.iotConsoleAgent.on('debug', msg => this.emit('debug', msg));\r\n  }\r\n\r\n  /**\r\n   * Request access token using auth code.\r\n   * @param {string} authCode The auth code to get authorization.\r\n   * @returns {(Promise<string|error>)}\r\n   * A promise is resolved with access token or is rejected with an error.\r\n   */\r\n  requestToken(authCode) {\r\n    const deviceId = this.configurator.get('deviceId');\r\n    return this.signUpDeviceWithProgress(authCode, deviceId)\r\n      .then(() => this.loginDoneFromIotConsole())\r\n      .then(() => this.ensureDeviceKeyCertWithProgress())\r\n      .then(() => {\r\n        this.configurator.del('authCode');\r\n        this.configurator.del('authState');\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Request access token for Server using auth code.\r\n   * (No need to get user information)\r\n   * @param {string} authCode The auth code to get authorization.\r\n   * @returns {(Promise<string|error>)}\r\n   * A promise is resolved with access token or is rejected with an error.\r\n   */\r\n  requestTokenForServer(authCode) {\r\n    const deviceId = this.configurator.get('deviceId');\r\n    return this.signUpDeviceWithProgress(authCode, deviceId)\r\n      .then(() => {\r\n        this.configurator.del('authCode');\r\n        this.configurator.del('authState');\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Request access token using { ssoToken, authProvider, deviceId, proxy } from configurator.\r\n   * @returns {(Promise<undefined|error>)} A promise is resolved after save configuration file\r\n   * within authorization data or is rejected with an error.\r\n   */\r\n  requestTokenBySsoToken() {\r\n    const ssoToken = this.configurator.get('ssoToken');\r\n    const deviceId = this.configurator.get('deviceId');\r\n    return this.getAuthenticationByIotConsole(ssoToken, null, deviceId)\r\n      .catch(() => this.issueAccessTokenFromIotCloud(ssoToken, null, deviceId)\r\n        .then(() => this.loginDoneFromIotConsole()))\r\n      .then(() => this.ensureDeviceKeyCertWithProgress())\r\n      .then(() => this.signUpWithProgress());\r\n  }\r\n\r\n  /**\r\n   * Request access token by auth code.\r\n   * @returns {(Promise<undefined|error>)} A promise is resolved after save configuration file\r\n   * within authorization data or is rejected with an error.\r\n   */\r\n  requestTokenByAuthCode() {\r\n    const authCode = this.configurator.get('authCode');\r\n    return this.requestToken(authCode);\r\n  }\r\n\r\n  /**\r\n   * Request access token using { ssoToken, authProvider, deviceId, proxy } from configurator.\r\n   * @returns {(Promise<undefined|error>)} A promise is resolved after save configuration file\r\n   * within authorization data or is rejected with an error.\r\n   */\r\n  requestTokenBySsoTokenWithoutSignUp() {\r\n    return authCode => this.requestTokenWithoutSignUp(authCode);\r\n  }\r\n\r\n  /**\r\n   * Request access token using auth code.\r\n   * @param {string} authCode The auth code to get authorization.\r\n   * @returns {(Promise<string|error>)}\r\n   * A promise is resolved with access token or is rejected with an error.\r\n   */\r\n  requestTokenWithoutSignUp(authCode) {\r\n    const deviceId = this.configurator.get('deviceId');\r\n    return this.getAuthenticationByIotConsole(null, authCode, deviceId)\r\n      .catch(() => this.issueAccessTokenFromIotCloud(null, authCode, deviceId)\r\n        .then(() => this.loginDoneFromIotConsole()));\r\n  }\r\n\r\n\r\n  /**\r\n   * Sign-up client device for SDK to connect IoT Cloud\r\n   * @returns {(Promise<string|error>)}\r\n   * A promise is resolved or is rejected with an error.\r\n   */\r\n  signUpClientDevice() {\r\n    this.emit('progress', getText('REQUEST_TOKEN.SIGNING_UP_TO_IOT_CLOUD'));\r\n    const config = this.configurator.getConfig();\r\n    const { accessToken, deviceId, userId } = config;\r\n\r\n    if (!accessToken) return Promise.reject(new StError('SIGN_UP_NO_LOGIN', 'accessToken'));\r\n    if (!deviceId) return Promise.reject(new StError('SIGN_UP_NO_LOGIN', 'deviceId'));\r\n    if (!userId) return Promise.reject(new StError('SIGN_UP_NO_LOGIN', 'userId'));\r\n\r\n    const signUpConfig = getServerConfig(config, 'iotCloud');\r\n    signUpConfig.redirecturi = null;\r\n    signUpConfig.serverCert = null;\r\n    signUpConfig.useRedirection = false;\r\n    const iotCloudAgent = new IotCloudAgent(signUpConfig, null, null);\r\n    iotCloudAgent.on('debug', msg => this.emit('debug', msg));\r\n\r\n    return iotCloudAgent.connect()\r\n      .then(() => iotCloudAgent.signUp(accessToken, this.authProviderUri, deviceId, userId))\r\n      .then((resp) => {\r\n        this.configurator.set('iotCloud.redirecturi', resp.redirecturi);\r\n        this.configurator.set('iotCloud.serverCert', resp.certificate);\r\n        this.configurator.save();\r\n      })\r\n      .finally(() => {\r\n        if (iotCloudAgent) iotCloudAgent.disconnect();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Sign-up for SDK to connect IoT Cloud\r\n   * @returns {(Promise<string|error>)}\r\n   * A promise is resolved or is rejected with an error.\r\n   */\r\n  signUp() {\r\n    const config = this.configurator.getConfig();\r\n    const { accessToken, deviceId, userId } = config;\r\n\r\n    if (!accessToken) return Promise.reject(new StError('SIGN_UP_NO_LOGIN', 'accessToken'));\r\n    if (!deviceId) return Promise.reject(new StError('SIGN_UP_NO_LOGIN', 'deviceId'));\r\n    if (!userId) return Promise.reject(new StError('SIGN_UP_NO_LOGIN', 'userId'));\r\n\r\n    const signUpConfig = getServerConfig(config, 'iotCloud');\r\n    signUpConfig.redirecturi = null;\r\n    signUpConfig.serverCert = null;\r\n    signUpConfig.useRedirection = false;\r\n    const cm = new CertManager(config);\r\n    cm.init();\r\n    const { key, cert } = cm.getDeviceKeyCert(config);\r\n    const iotCloudAgent = new IotCloudAgent(signUpConfig, key, cert);\r\n    iotCloudAgent.on('debug', msg => this.emit('debug', msg));\r\n\r\n    return cm.checkDeviceKeyCert()\r\n      .then(() => iotCloudAgent.connect())\r\n      .then(() => iotCloudAgent.signUp(accessToken, this.authProviderUri, deviceId, userId))\r\n      .then((resp) => {\r\n        this.configurator.set('iotCloud.redirecturi', resp.redirecturi);\r\n        this.configurator.set('iotCloud.serverCert', resp.certificate);\r\n        this.configurator.save();\r\n      })\r\n      .finally(() => {\r\n        if (iotCloudAgent) iotCloudAgent.disconnect();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Sign-in for SDK to validate configuration.\r\n   * @returns {(Promise<string|error>)}\r\n   * A promise is resolved or is rejected with an error.\r\n   */\r\n  signIn() {\r\n    const config = this.configurator.getConfig();\r\n    const { accessToken, deviceId, userId } = config;\r\n\r\n    if (!accessToken) return Promise.reject(new StError('SIGN_IN_NO_LOGIN', 'accessToken'));\r\n    if (!deviceId) return Promise.reject(new StError('SIGN_IN_NO_LOGIN', 'deviceId'));\r\n    if (!userId) return Promise.reject(new StError('SIGN_IN_NO_LOGIN', 'userId'));\r\n\r\n    const signUpConfig = getServerConfig(config, 'iotCloud');\r\n    if (!signUpConfig.redirecturi) return Promise.reject(new StError('SIGN_IN_NO_SIGN_UP', 'redirecturi'));\r\n    if (!signUpConfig.serverCert) return Promise.reject(new StError('SIGN_IN_NO_SIGN_UP', 'serverCert'));\r\n\r\n    const cm = new CertManager(config);\r\n    cm.init();\r\n    const { key, cert } = cm.getDeviceKeyCert(config);\r\n    const iotCloudAgent = new IotCloudAgent(signUpConfig, key, cert);\r\n    iotCloudAgent.on('debug', msg => this.emit('debug', msg));\r\n\r\n    return cm.checkDeviceKeyCert()\r\n      .then(() => iotCloudAgent.connect())\r\n      .then(() => iotCloudAgent.signIn(deviceId, userId, accessToken))\r\n      .catch((err) => {\r\n        if (err instanceof StError && err.code === 'IOT_CLOUD_DEVICE_NOT_FOUND') {\r\n          throw new StError('IOT_CLOUD_CLIENT_DEVICE_NOT_FOUND', err);\r\n        }\r\n        throw err;\r\n      })\r\n      .finally(() => iotCloudAgent.disconnect());\r\n  }\r\n\r\n  /**\r\n   * This method loads data for refresh access token from configurator.\r\n   * Then it sends a request to get access token to the IoT Cloud through the agent.\r\n   * @param {boolean} refreshOnlyWhenExpired\r\n   * Indicates to refresh access token only when it is expired.\r\n   * @returns {(Promise<undefined|error>)} A promise is resolved after save configuration file\r\n   * within new authorization data or is rejected with an error.\r\n   */\r\n  refreshToken(refreshOnlyWhenExpired = false) {\r\n    const deviceId = this.configurator.get('deviceId');\r\n    const userId = this.configurator.get('userId');\r\n    const refreshToken = this.configurator.get('refreshToken');\r\n\r\n    if (refreshOnlyWhenExpired) {\r\n      const expireDate = Date.parse(this.configurator.get('accessTokenExpireDate'));\r\n      if (expireDate && Date.now() <= expireDate - AuthManager.EXPIRE_DATE_THRESHOLD) {\r\n        return Promise.resolve();\r\n      }\r\n    }\r\n\r\n    const refreshTokenExpireDate = Date.parse(this.configurator.get('refreshTokenExpireDate'));\r\n    if (refreshTokenExpireDate && Date.now()\r\n      > refreshTokenExpireDate - AuthManager.EXPIRE_DATE_THRESHOLD) {\r\n      return Promise.reject(new StError('REFRESH_TOKEN_EXPIRED'));\r\n    }\r\n\r\n    return this.iotCloudAgent.connect()\r\n      .then(() => this.iotCloudAgent.refreshToken(deviceId, userId, refreshToken))\r\n      .then((resp) => {\r\n        const {\r\n          accesstoken,\r\n          expiresin,\r\n          refreshtoken,\r\n          refreshtoken_expiresin: refreshTokenExpiresin,\r\n        } = resp;\r\n\r\n        this.configurator.set('accessToken', accesstoken);\r\n        this.configurator.set('refreshToken', refreshtoken);\r\n        this.configurator.set('accessTokenExpireDate', new Date(Date.now() + (expiresin * 1000)));\r\n        this.configurator.set('refreshTokenExpireDate',\r\n          new Date(Date.now() + (refreshTokenExpiresin * 1000)));\r\n\r\n        this.configurator.save();\r\n      })\r\n      .finally(() => this.iotCloudAgent.disconnect());\r\n  }\r\n\r\n  getAuthCodeBySsoToken(ssoToken, deviceId) {\r\n    return this.iotConsoleAgent.getAuthCodeBySsoToken(ssoToken, deviceId)\r\n      .catch((err) => { throw new StError('REQUESTING_AUTH_CODE_FAILED', err); });\r\n  }\r\n\r\n  getAuthenticationByIotConsole(ssoToken, authCode, deviceId) {\r\n    return this.iotConsoleAgent.getAuthentication(ssoToken, authCode, deviceId)\r\n      .then(({ userId, email, accessToken, accessTokenExpiresIn, refreshToken,\r\n        refreshTokenExpiresIn, mnid, mnnm, companyMnid, companyMnnm, individualMnid,\r\n        individualMnnm }) => {\r\n        this.configurator.set('userId', userId);\r\n        this.configurator.set('email', email);\r\n        this.configurator.set('accessToken', accessToken);\r\n        this.configurator.set('accessTokenExpireDate', new Date(Date.now() + (accessTokenExpiresIn * 1000)));\r\n        this.configurator.set('refreshToken', refreshToken);\r\n        this.configurator.set('refreshTokenExpireDate', new Date(Date.now() + (refreshTokenExpiresIn * 1000)));\r\n        this.configurator.set('mnid', mnid);\r\n        this.configurator.set('mnnm', mnnm);\r\n        this.configurator.set('companyMnid', companyMnid);\r\n        this.configurator.set('companyMnnm', companyMnnm);\r\n        this.configurator.set('individualMnid', individualMnid);\r\n        this.configurator.set('individualMnnm', individualMnnm);\r\n      });\r\n  }\r\n\r\n  signUpDeviceWithProgress(authCode, deviceId) {\r\n    this.emit('progress', getText('REQUEST_TOKEN.REQUESTING_ACCESS_TOKEN'));\r\n\r\n    const config = this.configurator.getConfig();\r\n\r\n    const signUpConfig = getServerConfig(config, 'iotCloud');\r\n    signUpConfig.redirecturi = null;\r\n    signUpConfig.serverCert = null;\r\n    signUpConfig.useRedirection = false;\r\n\r\n    const iotCloudAgent = new IotCloudAgent(signUpConfig);\r\n\r\n    iotCloudAgent.on('debug', msg => this.emit('debug', msg));\r\n    return Promise.resolve()\r\n    .then(() => iotCloudAgent.connect())\r\n    .then(() => iotCloudAgent.getAccessTokenByAuthCode(authCode, this.authProviderUri, deviceId))\r\n    .catch((err) => { throw new StError('REQUESTING_ACCESS_TOKEN_FAILED', err); })\r\n    .then((resp) => {\r\n      const {\r\n        accesstoken,\r\n        expiresin,\r\n        refreshtoken,\r\n        refreshtoken_expiresin: refreshTokenExpiresin,\r\n        uid,\r\n      } = resp;\r\n\r\n      this.configurator.set('accessToken', accesstoken);\r\n      this.configurator.set('refreshToken', refreshtoken);\r\n      this.configurator.set('accessTokenExpireDate', new Date(Date.now() + (expiresin * 1000)));\r\n      this.configurator.set('refreshTokenExpireDate',\r\n        new Date(Date.now() + (refreshTokenExpiresin * 1000)));\r\n\r\n      if (this.configurator.get('userId') !== uid) {\r\n        this.configurator.del('mnid');\r\n        this.configurator.del('mnnm');\r\n        this.configurator.del('individualMnid');\r\n        this.configurator.del('individualMnnm');\r\n        this.configurator.del('companyMnid');\r\n        this.configurator.del('companyMnnm');\r\n      }\r\n      this.configurator.set('userId', uid);\r\n    })\r\n    .then(() => {\r\n      this.emit('progress', getText('REQUEST_TOKEN.SIGNING_UP_TO_IOT_CLOUD'));\r\n      const config = this.configurator.getConfig();\r\n      const { accessToken, userId } = config;\r\n      return iotCloudAgent.signUp(accessToken, this.authProviderUri, deviceId, userId);\r\n    })\r\n    .then((resp) => {\r\n      this.configurator.set('iotCloud.redirecturi', resp.redirecturi);\r\n      this.configurator.set('iotCloud.serverCert', resp.certificate);\r\n      this.configurator.save();\r\n    })\r\n    .finally(() => iotCloudAgent.disconnect());\r\n  }\r\n\r\n  issueAccessTokenFromIotCloud(ssoToken, authCode, deviceId) {\r\n    let receivedAuthCode = authCode;\r\n    const promise = authCode\r\n      ? Promise.resolve()\r\n      : this.getAuthCodeBySsoToken(ssoToken, deviceId).then((code) => { receivedAuthCode = code; });\r\n    this.emit('progress', getText('REQUEST_TOKEN.REQUESTING_ACCESS_TOKEN'));\r\n    return promise\r\n      .then(() => this.iotCloudAgent.connect())\r\n      .then(() => this.iotCloudAgent.getAccessTokenByAuthCode(receivedAuthCode,\r\n        this.authProviderUri, deviceId))\r\n      .catch((err) => { throw new StError('REQUESTING_ACCESS_TOKEN_FAILED', err); })\r\n      .then((resp) => {\r\n        const {\r\n          accesstoken,\r\n          expiresin,\r\n          refreshtoken,\r\n          refreshtoken_expiresin: refreshTokenExpiresin,\r\n          uid,\r\n        } = resp;\r\n\r\n        this.configurator.set('accessToken', accesstoken);\r\n        this.configurator.set('refreshToken', refreshtoken);\r\n        this.configurator.set('accessTokenExpireDate', new Date(Date.now() + (expiresin * 1000)));\r\n        this.configurator.set('refreshTokenExpireDate',\r\n          new Date(Date.now() + (refreshTokenExpiresin * 1000)));\r\n\r\n        if (this.configurator.get('userId') !== uid) {\r\n          this.configurator.del('mnid');\r\n          this.configurator.del('mnnm');\r\n          this.configurator.del('individualMnid');\r\n          this.configurator.del('individualMnnm');\r\n          this.configurator.del('companyMnid');\r\n          this.configurator.del('companyMnnm');\r\n        }\r\n        this.configurator.set('userId', uid);\r\n      })\r\n      .finally(() => this.iotCloudAgent.disconnect());\r\n  }\r\n\r\n  loginDoneFromIotConsole() {\r\n    this.emit('progress', getText('REQUEST_TOKEN.GETTING_MNID'));\r\n    const config = this.configurator.getConfig();\r\n    const iotConsoleServerConfig = getServerConfig(config, 'iotConsole');\r\n    const iotConsoleAgent = new IotConsoleAgent(config, iotConsoleServerConfig);\r\n    iotConsoleAgent.on('debug', msg => this.emit('debug', msg));\r\n\r\n    return iotConsoleAgent.getLoginDone(this.configurator.get('authState'))\r\n    .then((resp) => {\r\n      this.configurator.set('email', resp.email);\r\n      this.configurator.set('mnid', resp.mnid);\r\n      this.configurator.set('mnnm', resp.mnnm);\r\n      this.configurator.set('companyMnid', resp.companyMnid);\r\n      this.configurator.set('companyMnnm', resp.companyMnnm);\r\n      this.configurator.set('individualMnid', resp.individualMnid);\r\n      this.configurator.set('individualMnnm', resp.individualMnnm);\r\n    })\r\n    .catch((err) => { throw new StError('GETTING_MNID_FAILED', err); });\r\n  }\r\n\r\n  getMnidWithProgress() {\r\n    this.emit('progress', getText('REQUEST_TOKEN.GETTING_MNID'));\r\n    const devPortalManager = new DevPortalManager(this.configurator);\r\n    devPortalManager.init();\r\n    return devPortalManager.requestEnrollmentData()\r\n      .catch((err) => { throw new StError('GETTING_MNID_FAILED', err); });\r\n  }\r\n\r\n  ensureDeviceKeyCertWithProgress() {\r\n    this.emit('progress', getText('REQUEST_TOKEN.REQUESTING_DEVICE_CERT'));\r\n    const cm = new CertManager(this.configurator.getConfig());\r\n    cm.init();\r\n    return cm.checkDeviceKeyCert()\r\n      .then(() => {}, () => cm.createDeviceCert())\r\n      .catch((err) => { throw new StError('REQUESTING_DEVICE_CERT_FAILED', err); });\r\n  }\r\n\r\n  signUpWithProgress() {\r\n    this.emit('progress', getText('REQUEST_TOKEN.SIGNING_UP_TO_IOT_CLOUD'));\r\n    return this.signUp()\r\n      .catch((err) => { throw new StError('SIGNING_UP_TO_IOT_CLOUD_FAILED', err); });\r\n  }\r\n}\r\n\r\nAuthManager.EXPIRE_DATE_THRESHOLD = 60 * 1000;\r\n\r\nmodule.exports = new Proxy(AuthManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/AuthManager.js\n// module id = 74\n// module chunks = 0","const EventEmitter = require('events').EventEmitter;\r\nconst http = require('http');\r\nconst tls = require('tls');\r\nconst net = require('net');\r\nconst Promise = require('bluebird');\r\nconst CoapOptions = require('../models/CoapOptions');\r\nconst CoapMessage = require('../models/CoapMessage');\r\nconst { removeProxyEnv } = require('../common/util');\r\nconst debug = require('debug');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\nconst stLog = require('../common/StLogger');\r\n\r\nconst log = debug('CoapTcpConnector');\r\n\r\nconst METHOD = {\r\n  GET: 1,\r\n  POST: 2,\r\n  PUT: 3,\r\n  DELETE: 4,\r\n  OBSERVE: 1,\r\n  UNOBSERVE: 1,\r\n};\r\n\r\nfunction createMessage({ code, path, query, payload, token, observe }) {\r\n  const format = payload ? CoapOptions.CONTENT_FORMAT.CBOR : undefined;\r\n  const options = new CoapOptions({ path, query, format, observe });\r\n  const message = new CoapMessage({ code, token, options, payload });\r\n  return message;\r\n}\r\n\r\nclass CoapTcpConnector extends EventEmitter {\r\n  constructor(serverUrl, proxy, rejectUnauthorized, serverCert, clientKey, clientCert) {\r\n    super();\r\n    if (serverUrl.startsWith('coaps+tcp://')) {\r\n      this.tlsMode = true;\r\n      this.serverAddr = serverUrl.substring('coaps+tcp://'.length);\r\n      this.rejectUnauthorized = rejectUnauthorized;\r\n    } else if (serverUrl.startsWith('coap+tcp://')) {\r\n      this.tlsMode = false;\r\n      this.serverAddr = serverUrl.substring('coap+tcp://'.length);\r\n    } else {\r\n      throw new StError('UNSUPPORTED_PROTOCOL', serverUrl);\r\n    }\r\n    this.proxy = proxy || null;\r\n    this.socket = null;\r\n    // map from observe uri to token\r\n    this.observeTokenMap = {};\r\n    // map from token to success callback\r\n    this.callbackMap = {};\r\n    // map from token to error callback\r\n    this.errorCallbackMap = {};\r\n    // map from token to isObserve\r\n    this.isObserveMap = {};\r\n    // trusted cert to connect serverUrl\r\n    this.serverCert = serverCert;\r\n    // client cert authentication\r\n    this.clientKey = clientKey;\r\n    this.clientCert = clientCert;\r\n  }\r\n\r\n  setRequestHandler(handler) {\r\n    this.requestHandler = handler;\r\n  }\r\n\r\n  resetSocket() {\r\n    this.socket = null;\r\n    this.observeTokenMap = {};\r\n    this.callbackMap = {};\r\n    this.errorCallbackMap = {};\r\n    this.isObserveMap = {};\r\n  }\r\n\r\n  connect() {\r\n    return new Promise((resolve, reject) => {\r\n      if (this.proxy) {\r\n        const idx = this.proxy.split('://').length - 1;\r\n        const proxy = this.proxy.split('://')[idx].split(':');\r\n        this.proxyOptions = {\r\n          host: proxy[0],\r\n          port: proxy[1],\r\n          method: 'CONNECT',\r\n          path: this.serverAddr,\r\n        };\r\n        log(`COAP REQUEST PROXY SOCKET ${JSON.stringify(this.proxyOptions, null, 2)}`);\r\n\r\n        // NOTE: only support http proxy\r\n        const request = http.request(this.proxyOptions);\r\n\r\n        request.on('error', error => reject(error));\r\n        request.on('connect', (_, proxySocket) => {\r\n          log('COAP RECEIVE PROXY SOCKET');\r\n          resolve(proxySocket);\r\n        });\r\n        request.end();\r\n      } else {\r\n        // non-proxy\r\n        removeProxyEnv();\r\n        resolve(null);\r\n      }\r\n    })\r\n    .then((proxySocket) => {\r\n      const serverAddrs = this.serverAddr.split(':');\r\n      const options = {\r\n        host: serverAddrs[0],\r\n        port: serverAddrs[1],\r\n      };\r\n\r\n      // for verifying self-signed server cert\r\n      if (this.serverCert) options.ca = this.serverCert;\r\n\r\n      // for mutual certificate\r\n      if (this.clientKey) options.key = this.clientKey;\r\n      if (this.clientCert) options.cert = this.clientCert;\r\n\r\n      log(`COAP CONNECT OPTION: ${JSON.stringify(options)}`);\r\n\r\n      let socket;\r\n      if (proxySocket && this.tlsMode) {\r\n        options.socket = proxySocket;\r\n        log('COAP CONNECT PROXY SECURE');\r\n        if (this.rejectUnauthorized === false) {\r\n          options.rejectUnauthorized = false;\r\n          log(`IGNORE SECURE ERROR(rejectUnauthorized:${options.rejectUnauthorized})`);\r\n        }\r\n        socket = tls.connect(options);\r\n      } else if (proxySocket) {\r\n        log('COAP CONNECT PROXY INSECURE');\r\n        socket = proxySocket;\r\n      } else if (this.tlsMode) {\r\n        log(`COAP CONNECT SECURE ${JSON.stringify(options, null, 2)}`);\r\n        if (this.rejectUnauthorized === false) {\r\n          options.rejectUnauthorized = false;\r\n          log(`IGNORE SECURE ERROR(rejectUnauthorized:${options.rejectUnauthorized})`);\r\n        }\r\n        socket = tls.connect(options);\r\n      } else {\r\n        log(`COAP CONNECT INSECURE ${JSON.stringify(options, null, 2)}`);\r\n        socket = net.connect(options);\r\n      }\r\n      return new Promise((resolve, reject) => {\r\n        const connectType = this.tlsMode ? 'secureConnect' : 'connect';\r\n        socket.on(connectType, () => {\r\n          log(`COAP CONNECTED ${socket.remoteAddress}:${socket.remotePort}`);\r\n          if (connectType === 'secureConnect') {\r\n            log(`authorized: ${socket.authorized}`);\r\n            log(`encrypted: ${socket.encrypted}`);\r\n            const cipher = socket.getCipher();\r\n            log(`cipher name: ${cipher.name}, version: ${cipher.version}`);\r\n            log('server certificate');\r\n            log(socket.getPeerCertificate());\r\n          }\r\n          this.resetSocket();\r\n          this.socket = socket;\r\n          resolve();\r\n        });\r\n\r\n        // NOTE: tlsSocket's max length is 16384 bytes. prevData is for payload over 16384 bytes.\r\n        let prevData = null;\r\n        socket.on('data', (data) => {\r\n          // decode response\r\n          let response;\r\n          let msg = data;\r\n          if (prevData) {\r\n            msg = Buffer.concat([prevData, data]);\r\n            prevData = null;\r\n          }\r\n\r\n          try {\r\n            response = CoapMessage.decodeTcpMessage(msg);\r\n          } catch (e) {\r\n            if (e.message === 'sliced packet') prevData = Buffer.from(msg);\r\n            return;\r\n          }\r\n\r\n          const code = response.code;\r\n          const token = response.token.toString('hex');\r\n          const payload = response.payload;\r\n\r\n          log(`COAP RECEIVE ${socket.remoteAddress}:${socket.remotePort}`);\r\n          log(`${response.toString()}\\n`);\r\n          this.emit('debug', `COAP RECEIVE: ${response.toString()}`);\r\n\r\n          // get callback functions\r\n          const errorCallback = this.errorCallbackMap[token];\r\n          const callback = this.callbackMap[token];\r\n          if (!this.isObserveMap[token]) {\r\n            // clear callback functions\r\n            delete this.callbackMap[token];\r\n            delete this.errorCallbackMap[token];\r\n          }\r\n\r\n          // if error code is 4.xx or 5.xx\r\n          if (errorCallback && (code >= 128 && code < 192)) {\r\n            // invoke error callback\r\n            const message = payload\r\n              ? (payload.message || JSON.stringify(payload, null, 2))\r\n              : response;\r\n            const error = new StError('COAP_API_FAILED', message);\r\n            error.coapCode = code;\r\n            error.coapPayload = payload;\r\n            errorCallback(error);\r\n          } else if (callback) {\r\n            // invoke callback\r\n            callback(payload);\r\n          } else if (this.requestHandler && code < 5) {\r\n            this.requestHandler(response);\r\n          }\r\n        });\r\n        socket.on('error', (error) => {\r\n          log(`COAP ERROR ${JSON.stringify(error, null, 2)}`);\r\n          stLog.error(`COAP ERROR ${JSON.stringify(error, null, 2)}`);\r\n          const errorCallbacks =\r\n            Object.keys(this.errorCallbackMap).map(key => this.errorCallbackMap[key]);\r\n          errorCallbacks.forEach(errorCallback => errorCallback(error));\r\n          this.errorCallbackMap = {};\r\n          reject(error);\r\n        });\r\n        socket.on('close', () => {\r\n          stLog.info('COAP TCP/IP SOCKET CLOSED');\r\n          this.emit('close');\r\n          this.resetSocket();\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.socket) {\r\n      stLog.info('COAP TCP/IP SOCKET DESTROYED');\r\n      this.socket.destroy();\r\n      this.resetSocket();\r\n    }\r\n  }\r\n\r\n  send(message, callback) {\r\n    if (!this.socket) throw new StError('NOT_CONNECTED');\r\n    return new Promise((resolve, reject) => {\r\n      const token = message.token.toString('hex');\r\n      // save token callback\r\n      this.callbackMap[token] = callback || resolve;\r\n      this.errorCallbackMap[token] = reject;\r\n      // send\r\n      log(`COAP SEND ${this.socket.remoteAddress}:${this.socket.remotePort}`);\r\n      log(`${message.toString()}\\n`);\r\n      this.emit('debug', `COAP SEND: ${message.toString()}`);\r\n      this.socket.write(message.toTcpMessage());\r\n      if (callback) resolve();\r\n    });\r\n  }\r\n\r\n  sendResponse(message) {\r\n    return this.send(message);\r\n  }\r\n\r\n  sendRequest(code, path, query, payload) {\r\n    return this.send(createMessage({ code, path, query, payload }));\r\n  }\r\n\r\n  observe(path, query, callback) {\r\n    const observe = Buffer.alloc(0);\r\n    const message = createMessage({ code: METHOD.OBSERVE, path, query, observe });\r\n    const href = `${path}${query || ''}`;\r\n    const token = message.token.toString('hex');\r\n    this.observeTokenMap[href] = token;\r\n    this.isObserveMap[token] = true;\r\n    return this.send(message, callback);\r\n  }\r\n\r\n  cancelObserve(path, query) {\r\n    const observe = Buffer.alloc(1, 1);\r\n    const href = `${path}${query || ''}`;\r\n    const token = this.observeTokenMap[href];\r\n    if (token) {\r\n      delete this.observeTokenMap[href];\r\n      delete this.callbackMap[token];\r\n      delete this.errorCallbackMap[token];\r\n      delete this.isObserveMap[token];\r\n      const message = createMessage({ code: METHOD.UNOBSERVE, path, query, observe, token: Buffer.from(token, 'hex') });\r\n      return this.send(message);\r\n    }\r\n    return Promise.resolve(); // ignore canceling unobserved\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(CoapTcpConnector, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/CoapTcpConnector.js\n// module id = 75\n// module chunks = 0","module.exports = require(\"http\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"http\"\n// module id = 76\n// module chunks = 0","module.exports = require(\"tls\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"tls\"\n// module id = 77\n// module chunks = 0","module.exports = require(\"net\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"net\"\n// module id = 78\n// module chunks = 0","module.exports = require(\"i18next\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"i18next\"\n// module id = 79\n// module chunks = 0","module.exports = require(\"i18next-sync-fs-backend\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"i18next-sync-fs-backend\"\n// module id = 80\n// module chunks = 0","\r\nconst errorCode = {\r\n  ADB_CONTROLLER_NO_DEVICE: {\r\n    MSG_KEY: 'ADB_CONTROLLER.NO_DEVICE',\r\n  },\r\n  ADB_CONTROLLER_NO_DEVICE_SERIAL: {\r\n    MSG_KEY: 'ADB_CONTROLLER.NO_DEVICE_SERIAL',\r\n  },\r\n  ADB_CONTROLLER_MANY_DEVICE: {\r\n    MSG_KEY: 'ADB_CONTROLLER.MANY_DEVICE',\r\n  },\r\n  CERT_NO_KEY: {\r\n    MSG_KEY: 'CERT.NO_KEY',\r\n  },\r\n  CERT_NO_CERT: {\r\n    MSG_KEY: 'CERT.NO_CERT',\r\n  },\r\n  CERT_NO_AUTHOR_KEY: {\r\n    MSG_KEY: 'CERT.NO_AUTHOR_KEY',\r\n  },\r\n  CERT_NO_AUTHOR_CERT: {\r\n    MSG_KEY: 'CERT.NO_AUTHOR_CERT',\r\n  },\r\n  CERT_NO_DISTRIBUTOR_KEY: {\r\n    MSG_KEY: 'CERT.NO_DISTRIBUTOR_KEY',\r\n  },\r\n  CERT_NO_DISTRIBUTOR_CERT: {\r\n    MSG_KEY: 'CERT.NO_DISTRIBUTOR_CERT',\r\n  },\r\n  CERT_NO_DEVICE_KEY: {\r\n    MSG_KEY: 'CERT.NO_DEVICE_KEY',\r\n  },\r\n  CERT_NO_DEVICE_CERT: {\r\n    MSG_KEY: 'CERT.NO_DEVICE_CERT',\r\n  },\r\n  CERT_NO_PASSWORD: {\r\n    MSG_KEY: 'CERT.NO_PASSWORD',\r\n  },\r\n  CERT_INVALID_PASSWORD: {\r\n    MSG_KEY: 'CERT.INVALID_PASSWORD',\r\n  },\r\n  CERT_NO_LOGIN: {\r\n    MSG_KEY: 'CERT.NO_LOGIN',\r\n  },\r\n  CERT_NO_DEVICE_NAME: {\r\n    MSG_KEY: 'CERT.NO_DEVICE_NAME',\r\n  },\r\n  DEVICE_TURNED_OFF: {\r\n    MSG_KEY: 'DEVICE.TURNED_OFF',\r\n  },\r\n  IOT_CONSOLE_DEVICE_CRT_API_FAILED: {\r\n    MSG_KEY: 'IOT_CONSOLE.DEVICE_CRT_API_FAILED',\r\n  },\r\n  IOT_CONSOLE_PPK_AUTH_CRT_API_FAILED: {\r\n    MSG_KEY: 'IOT_CONSOLE.PPK_AUTH_CRT_API_FAILED',\r\n  },\r\n  IOT_CONSOLE_PPK_DIST_CRT_API_FAILED: {\r\n    MSG_KEY: 'IOT_CONSOLE.PPK_DIST_CRT_API_FAILED',\r\n  },\r\n  IOT_CONSOLE_PRJ_API_FAILED: {\r\n    MSG_KEY: 'IOT_CONSOLE.PRJ_API_FAILED',\r\n  },\r\n  IOT_CONSOLE_AUTH_API_FAILED: {\r\n    MSG_KEY: 'IOT_CONSOLE.AUTH_API_FAILED',\r\n  },\r\n  IOT_CONSOLE_SDK_LOGIN_API_FAILED: {\r\n    MSG_KEY: 'IOT_CONSOLE.SDK_LOGIN_API_FAILED',\r\n  },\r\n  IOT_CONSOLE_SDK_AUTHCODE_API_FAILED: {\r\n    MSG_KEY: 'IOT_CONSOLE.SDK_AUTHCODE_API_FAILED',\r\n  },\r\n  IOT_CONSOLE_PLUGIN_API_FAILED: {\r\n    MSG_KEY: 'IOT_CONSOLE.PLUGIN_API_FAILED',\r\n  },\r\n  SIGN_UP_NO_LOGIN: {\r\n    MSG_KEY: 'SIGN_UP.NO_LOGIN',\r\n  },\r\n  SIGN_IN_NO_LOGIN: {\r\n    MSG_KEY: 'SIGN_IN.NO_LOGIN',\r\n  },\r\n  SIGN_IN_EXPIRED_TOKEN: {\r\n    MSG_KEY: 'SIGN_IN.EXPIRED_TOKEN',\r\n  },\r\n  SIGN_IN_NO_SIGN_UP: {\r\n    MSG_KEY: 'SIGN_IN.NO_SIGN_UP',\r\n  },\r\n  CREATE_PROJECT_PRJ_ALREADY_EXISTS: {\r\n    MSG_KEY: 'CREATE_PROJECT.PRJ_ALREADY_EXISTS',\r\n  },\r\n  CREATE_PROJECT_INVAID_VID: {\r\n    MSG_KEY: 'CREATE_PROJECT.INVAID_VID',\r\n  },\r\n  CREATE_PROJECT_INVALID_LAMBDA_ARN: {\r\n    MSG_KEY: 'CREATE_PROJECT.INVALID_LAMBDA_ARN',\r\n  },\r\n  CREATE_PROJECT_INVALID_WEBHOOK_URL: {\r\n    MSG_KEY: 'CREATE_PROJECT.INVALID_WEBHOOK_URL',\r\n  },\r\n  CREATE_PROJECT_VID_EXCEEDS_MAX_LENGTH: {\r\n    MSG_KEY: 'CREATE_PROJECT.VID_EXCEEDS_MAX_LENGTH',\r\n  },\r\n  CREATE_PROJECT_DEVICE_PLUGIN_OPTION_REQUIRED: {\r\n    MSG_KEY: 'CREATE_PROJECT.DEVICE_PLUGIN_OPTION_REQUIRED',\r\n  },\r\n  CREATE_PROJECT_UNSUPPORTED_DEVICE_MODEL: {\r\n    MSG_KEY: 'CREATE_PROJECT.UNSUPPORTED_DEVICE_MODEL',\r\n  },\r\n  CREATE_PROJECT_APP_NAME_OPT_REQUIRED: {\r\n    MSG_KEY: 'CREATE_PROJECT.APP_NAME_OPT_REQUIRED',\r\n  },\r\n  CREATE_PROJECT_APP_TYPE_OPT_REQUIRED: {\r\n    MSG_KEY: 'CREATE_PROJECT.APP_TYPE_OPT_REQUIRED',\r\n  },\r\n  CREATE_PROJECT_LAMBDA_ARN_OPT_REQUIRED: {\r\n    MSG_KEY: 'CREATE_PROJECT.LAMBDA_ARN_OPT_REQUIRED',\r\n  },\r\n  CREATE_PROJECT_TARGET_URL_OPT_REQUIRED: {\r\n    MSG_KEY: 'CREATE_PROJECT.TARGET_URL_OPT_REQUIRED',\r\n  },\r\n  CREATE_PROJECT_PLUGIN_ID_OPT_REQUIRED: {\r\n    MSG_KEY: 'CREATE_PROJECT.PLUGIN_ID_OPT_REQUIRED',\r\n  },\r\n  PROJECT_NAME_EMPTY: {\r\n    MSG_KEY: 'CREATE_PROJECT.PROJECT_NAME_EMPTY',\r\n  },\r\n  PROJECT_NAME_LENGTH_EXCEEDS_MAX_LENGTH: {\r\n    MSG_KEY: 'CREATE_PROJECT.PROJECT_NAME_LENGTH_EXCEEDS_MAX_LENGTH',\r\n  },\r\n  PROJECT_NAME_INVALID_CHAR: {\r\n    MSG_KEY: 'CREATE_PROJECT.PROJECT_NAME_INVALID_CHAR',\r\n  },\r\n  PROJECT_NAME_START_WITH_INVALID_CHAR: {\r\n    MSG_KEY: 'CREATE_PROJECT.PROJECT_NAME_START_WITH_INVALID_CHAR',\r\n  },\r\n  PROJECT_NAME_END_WITH_INVALID_CHAR: {\r\n    MSG_KEY: 'CREATE_PROJECT.PROJECT_NAME_END_WITH_INVALID_CHAR',\r\n  },\r\n  THINGS_SDK_PROPERTY_TYPE_MAPPING_NOT_FOUND: {\r\n    MSG_KEY: 'EXPORT_PROJECT.THINGS_SDK_PROPERTY_TYPE_MAPPING_NOT_FOUND',\r\n  },\r\n  INVALID_PLUGIN_ID_REGEX: {\r\n    MSG_KEY: 'PROJECT.INVALID_PLUGIN_ID_REGEX',\r\n  },\r\n  DEVICE_PLUGIN_PACKAGE_NAME_NOT_MATCHED: {\r\n    MSG_KEY: 'PROJECT.DEVICE_PLUGIN_PACKAGE_NAME_NOT_MATCHED',\r\n  },\r\n  PLUGIN_PACKAGE_NAME_NOT_MATCHED_SMART_APP_PLUGIN_ID: {\r\n    MSG_KEY: 'PROJECT.PLUGIN_PACKAGE_NAME_NOT_MATCHED_SMART_APP_PLUGIN_ID',\r\n  },\r\n  VERIFY_PPK_NO_IN: {\r\n    MSG_KEY: 'VERIFY_PPK.NO_IN_OPTION',\r\n  },\r\n  VERIFY_PPK_FAIL: {\r\n    MSG_KEY: 'VERIFY_PPK.FAIL',\r\n  },\r\n  VERIFY_PPK_UNKNOWN_FAIL: {\r\n    MSG_KEY: 'VERIFY_PPK.UNKNOWN_FAIL',\r\n  },\r\n  VERIFY_PPK_VERIFY_FAIL: {\r\n    MSG_KEY: 'VERIFY_PPK.VERIFY_FAIL',\r\n  },\r\n  VERIFY_PPK_FILE_NOT_FOUND_FAIL: {\r\n    MSG_KEY: 'VERIFY_PPK.FILE_NOT_FOUND_FAIL',\r\n  },\r\n  VERIFY_PPK_ZIP_FORMAT_FAIL: {\r\n    MSG_KEY: 'VERIFY_PPK.ZIP_FORMAT_FAIL',\r\n  },\r\n  SIGN_PPK_NO_AUTH_KEY: {\r\n    MSG_KEY: 'SIGN_PPK.NO_AUTH_KEY',\r\n  },\r\n  SIGN_PPK_NO_AUTH_CERT: {\r\n    MSG_KEY: 'SIGN_PPK.NO_AUTH_CERT',\r\n  },\r\n  SIGN_PPK_NO_DIST_KEY: {\r\n    MSG_KEY: 'SIGN_PPK.NO_DIST_KEY',\r\n  },\r\n  SIGN_PPK_NO_DIST_CERT: {\r\n    MSG_KEY: 'SIGN_PPK.NO_DIST_CERT',\r\n  },\r\n  SIGN_PPK_NO_AUTH_PASS: {\r\n    MSG_KEY: 'SIGN_PPK.NO_AUTH_PASS',\r\n  },\r\n  SIGN_PPK_NO_DIST_PASS: {\r\n    MSG_KEY: 'SIGN_PPK.NO_DIST_PASS',\r\n  },\r\n  SIGN_PPK_NO_PASSWD: {\r\n    MSG_KEY: 'SIGN_PPK.NO_PASSWD',\r\n  },\r\n  SIGN_PPK_INVALID_KEY: {\r\n    MSG_KEY: 'SIGN_PPK.INVALID_KEY',\r\n  },\r\n  SIGN_PPK_FILE_NOTFOUND: {\r\n    MSG_KEY: 'ONEAPP.CANNOT_FIND_PPK_FILE',\r\n  },\r\n  SIGN_PPK_FAIL: {\r\n    MSG_KEY: 'SIGN_PPK.FAIL',\r\n  },\r\n  SIGN_PPK_NO_REQUIRED: {\r\n    MSG_KEY: 'SIGN_PPK.NO_REQUIRED',\r\n  },\r\n  EXTRACT_PPK_NO_OUT: {\r\n    MSG_KEY: 'EXTRACT_PPK.NO_OUT',\r\n  },\r\n  INSTALL_APP_FAIL: {\r\n    MSG_KEY: 'INSTALL_APP.FAIL',\r\n  },\r\n  INSTALL_APP_FAIL_ON_SIM: {\r\n    MSG_KEY: 'INSTALL_APP.FAIL_ON_SIM',\r\n  },\r\n  INSTALL_APP_NO_OPT: {\r\n    MSG_KEY: 'INSTALL_APP.NO_OPT',\r\n  },\r\n  INSTALL_APP_FAIL_PUSH: {\r\n    MSG_KEY: 'INSTALL_APP.FAIL_PUSH',\r\n  },\r\n  INSTALL_APP_FAIL_CMD: {\r\n    MSG_KEY: 'INSTALL_APP.FAIL_CMD',\r\n  },\r\n  LAUNCH_ONEAPP_SIM_FAIL: {\r\n    MSG_KEY: 'LAUNCH_ONEAPP_SIMULATOR.FAIL',\r\n  },\r\n  LAUNCH_ONEAPP_SIM_FAIL_BY_MEMORY: {\r\n    MSG_KEY: 'LAUNCH_ONEAPP_SIMULATOR.MEMORYFAIL',\r\n  },\r\n  KILL_ONEAPP_SIM_FAIL: {\r\n    MSG_KEY: 'KILL_ONEAPP_SIMULATOR.FAIL',\r\n  },\r\n  LAUNCH_VD_FAIL: {\r\n    MSG_KEY: 'LAUNCH_VIRTUAL_DEVICE.FAIL',\r\n  },\r\n  CANNOT_FIND_VIRTUAL_DEVICE: {\r\n    MSG_KEY: 'ONEAPP.CANNOT_FIND_VIRTUAL_DEVICE',\r\n  },\r\n  DESCRIBE_MANIFEST_FAIL: {\r\n    MSG_KEY: 'DESCRIBE_MANIFEST.FAIL',\r\n  },\r\n  REGISTER_MANIFEST_FAIL: {\r\n    MSG_KEY: 'REGISTER_MANIFEST.FAIL',\r\n  },\r\n  DELETE_MANIFEST_FAIL: {\r\n    MSG_KEY: 'DELETE_MANIFEST.FAIL',\r\n  },\r\n  UPDATE_MANIFEST_FAIL: {\r\n    MSG_KEY: 'UPDATE_MANIFEST.FAIL',\r\n  },\r\n  PUBLISH_DEVICE_NO_TOKEN: {\r\n    MSG_KEY: 'PUBLISH_DEVICE.NO_TOKEN',\r\n  },\r\n  CREATE_LOCATION_NO_LATITUDE: {\r\n    MSG_KEY: 'CREATE_LOCATION.NO_LATITUDE',\r\n  },\r\n  CREATE_LOCATION_NO_LONGITUDE: {\r\n    MSG_KEY: 'CREATE_LOCATION.NO_LONGITUDE',\r\n  },\r\n  CREATE_LOCATION_NO_RADIUS: {\r\n    MSG_KEY: 'CREATE_LOCATION.NO_RADIUS',\r\n  },\r\n  CREATE_LOCATION_NO_RADIUS_FLOAT: {\r\n    MSG_KEY: 'CREATE_LOCATION.NO_RADIUS_FLOAT',\r\n  },\r\n  UPDATE_LOCATION_NO_LATITUDE: {\r\n    MSG_KEY: 'UPDATE_LOCATION.NO_LATITUDE',\r\n  },\r\n  UPDATE_LOCATION_NO_LONGITUDE: {\r\n    MSG_KEY: 'UPDATE_LOCATION.NO_LONGITUDE',\r\n  },\r\n  UPDATE_LOCATION_NO_RADIUS: {\r\n    MSG_KEY: 'UPDATE_LOCATION.NO_RADIUS',\r\n  },\r\n  UPDATE_LOCATION_NO_RADIUS_FLOAT: {\r\n    MSG_KEY: 'UPDATE_LOCATION.NO_RADIUS_FLOAT',\r\n  },\r\n  DELETE_LOCATION_NO_ID: {\r\n    MSG_KEY: 'DELETE_LOCATION.NO_ID',\r\n  },\r\n  REGISTER_ENDPOINT_APP_NO_CONFIG: {\r\n    MSG_KEY: 'REGISTER_ENDPOINT_APP.NO_CONFIG',\r\n  },\r\n  REGISTER_ENDPOINT_APP_NO_LAMBDA: {\r\n    MSG_KEY: 'REGISTER_ENDPOINT_APP.NO_LAMBDA',\r\n  },\r\n  UPDATE_ENDPOINT_APP_FAIL: {\r\n    MSG_KEY: 'UPDATE_ENDPOINT_APP.FAIL',\r\n  },\r\n  CREATE_SUBSCRIPTION_NO_NAME: {\r\n    MSG_KEY: 'CREATE_SUBSCRIPTION.NO_NAME',\r\n  },\r\n  CREATE_SUBSCRIPTION_NO_LOCATION: {\r\n    MSG_KEY: 'CREATE_SUBSCRIPTION.NO_LOCATION',\r\n  },\r\n  CREATE_SUBSCRIPTION_NO_DEVICE: {\r\n    MSG_KEY: 'CREATE_SUBSCRIPTION.NO_DEVICE',\r\n  },\r\n  CREATE_SUBSCRIPTION_NO_SOURCE: {\r\n    MSG_KEY: 'CREATE_SUBSCRIPTION.NO_SOURCE',\r\n  },\r\n  CREATE_DEVICE_PROFILE_NO_INPUT: {\r\n    MSG_KEY: 'CREATE_DEVICE_PROFILE.NO_INPUT',\r\n  },\r\n  UPDATE_DEVICE_PROFILE_NO_INPUT: {\r\n    MSG_KEY: 'UPDATE_DEVICE_PROFILE.NO_INPUT',\r\n  },\r\n  SET_CONFIG_NO_KEY: {\r\n    MSG_KEY: 'SET_CONFIG.NO_KEY',\r\n  },\r\n  CAPABILITY_OR_DEVICE_PROFILE_PATH_REQUIRED: {\r\n    MSG_KEY: 'GENERATE_MANIFEST.CAPABILITY_OR_DEVICE_PROFILE_PATH_REQUIRED',\r\n  },\r\n  ONLY_ONE_OF_CAPABILITY_AND_DEVICE_PROFILE_PATH_REQUIRED: {\r\n    MSG_KEY: 'GENERATE_MANIFEST.ONLY_ONE_OF_CAPABILITY_AND_DEVICE_PROFILE_PATH_REQUIRED',\r\n  },\r\n  NOT_IN_PROJECT_DIRECTORY: {\r\n    MSG_KEY: 'GENERATE_MANIFEST.NOT_IN_PROJECT_DIRECTORY',\r\n  },\r\n  NO_WEB_CONSOLE_PROJECT_CONFIG: {\r\n    MSG_KEY: 'DESCRIBE_WEB_CONSOLE_PROJECT.NO_WEB_CONSOLE_PROJECT_CONFIG',\r\n  },\r\n  WEB_CONSOLE_PROJECT_NOT_FOUND: {\r\n    MSG_KEY: 'DESCRIBE_WEB_CONSOLE_PROJECT.WEB_CONSOLE_PROJECT_NOT_FOUND',\r\n  },\r\n  WEB_CONSOLE_URI_NOT_MATCHED: {\r\n    MSG_KEY: 'DESCRIBE_WEB_CONSOLE_PROJECT.WEB_CONSOLE_URI_NOT_MATCHED',\r\n  },\r\n  WEB_CONSOLE_PROJECT_CONFIG_NOT_FOUND: {\r\n    MSG_KEY: 'DESCRIBE_WEB_CONSOLE_PROJECT.WEB_CONSOLE_PROJECT_CONFIG_NOT_FOUND',\r\n  },\r\n  WEB_CONSOLE_PROJECT_MNNM_MISMATCH: {\r\n    MSG_KEY: 'REGISTER_WEB_CONSOLE_PROJECT.MNNM_MISMATCH',\r\n  },\r\n  UI_CLOSED: {\r\n    MSG_KEY: 'UI.CLOSED',\r\n  },\r\n  CANNOT_REFRESH_ACCESS_TOKEN: {\r\n    MSG_KEY: 'AUTH.CANNOT_REFRESH_ACCESS_TOKEN',\r\n  },\r\n  CANNOT_GET_AUTH_CODE: {\r\n    MSG_KEY: 'AUTH.CANNOT_GET_AUTH_CODE',\r\n  },\r\n  CANNOT_GET_ACCESS_TOKEN: {\r\n    MSG_KEY: 'AUTH.CANNOT_GET_ACCESS_TOKEN',\r\n  },\r\n  REFRESH_TOKEN_EXPIRED: {\r\n    MSG_KEY: 'AUTH.REFRESH_TOKEN_EXPIRED',\r\n  },\r\n  INVALID_SSO_TOKEN: {\r\n    MSG_KEY: 'AUTH.INVALID_SSO_TOKEN',\r\n  },\r\n  LOGIN_ERROR: {\r\n    MSG_KEY: 'AUTH.LOGIN_ERROR',\r\n  },\r\n  NO_LOGIN: {\r\n    MSG_KEY: 'AUTH.NO_LOGIN',\r\n  },\r\n  UNSUPPORTED_REGION: {\r\n    MSG_KEY: 'AWS.UNSUPPORTED_REGION',\r\n  },\r\n  NO_LAMBDA_NAME: {\r\n    MSG_KEY: 'AWS.NO_LAMBDA_NAME',\r\n  },\r\n  NO_LAMBDA_RUNTIME: {\r\n    MSG_KEY: 'AWS.NO_LAMBDA_RUNTIME',\r\n  },\r\n  NO_LAMBDA_ROLE: {\r\n    MSG_KEY: 'AWS.NO_LAMBDA_ROLE',\r\n  },\r\n  NO_LAMBDA_HANDLER: {\r\n    MSG_KEY: 'AWS.NO_LAMBDA_HANDLER',\r\n  },\r\n  NO_APP_NAME: {\r\n    MSG_KEY: 'SMART_APP.NO_APP_NAME',\r\n  },\r\n  NO_APP_TYPE: {\r\n    MSG_KEY: 'SMART_APP.NO_APP_TYPE',\r\n  },\r\n  NO_APP_IMPLEMENTATION: {\r\n    MSG_KEY: 'SMART_APP.NO_APP_IMPLEMENTATION',\r\n  },\r\n  NO_APP_DISPLAY_NAME: {\r\n    MSG_KEY: 'SMART_APP.NO_APP_DISPLAY_NAME',\r\n  },\r\n  NO_APP_DESCRIPTION: {\r\n    MSG_KEY: 'SMART_APP.NO_APP_DESCRIPTION',\r\n  },\r\n  INVALID_APP_TYPE: {\r\n    MSG_KEY: 'SMART_APP.INVALID_APP_TYPE',\r\n  },\r\n  NO_APP_NAME_OR_NO_APP_ID: {\r\n    MSG_KEY: 'SMART_APP.NO_APP_NAME_OR_NO_APP_ID',\r\n  },\r\n  INVALID_SCOPE: {\r\n    MSG_KEY: 'SMART_APP.INVALID_SCOPE',\r\n  },\r\n  INVALID_SETTINGS: {\r\n    MSG_KEY: 'SMART_APP.INVALID_SETTINGS',\r\n  },\r\n  APP_NOT_FOUND: {\r\n    MSG_KEY: 'SMART_APP.APP_NOT_FOUND',\r\n  },\r\n  NO_DEVICE_PROFILE_ID: {\r\n    MSG_KEY: 'C2C.NO_DEVICE_PROFILE_ID',\r\n  },\r\n  NO_DEVICE_PROFILE_NAME: {\r\n    MSG_KEY: 'C2C.NO_NAME',\r\n  },\r\n  NO_COMPONENTS: {\r\n    MSG_KEY: 'C2C.NO_COMPONENTS',\r\n  },\r\n  NO_META_DATA: {\r\n    MSG_KEY: 'C2C.NO_META_DATA',\r\n  },\r\n  TOO_MANY_COMPONENTS: {\r\n    MSG_KEY: 'C2C.TOO_MANY_COMPONENTS',\r\n  },\r\n  TOO_MANY_CAPABILITIES: {\r\n    MSG_KEY: 'C2C.TOO_MANY_CAPABILITIES',\r\n  },\r\n  AT_LEAST_ONE_MAIN_COMPONENT_REQUIRED: {\r\n    MSG_KEY: 'C2C.AT_LEAST_ONE_MAIN_COMPONENT_REQUIRED',\r\n  },\r\n  CANNOT_FIND_INPUT_PATH: {\r\n    MSG_KEY: 'C2C.CANNOT_FIND_INPUT_PATH',\r\n  },\r\n  NO_APP_ID: {\r\n    MSG_KEY: 'C2C.NO_APP_ID',\r\n  },\r\n  NO_LOCATION_ID: {\r\n    MSG_KEY: 'C2C.NO_LOCATION_ID',\r\n  },\r\n  NO_CONFIGURATION_STATUS: {\r\n    MSG_KEY: 'C2C.NO_CONFIGURATION_STATUS',\r\n  },\r\n  NO_INSTALLED_APP_ID: {\r\n    MSG_KEY: 'C2C.NO_INSTALLED_APP_ID',\r\n  },\r\n  NO_APP_CONFIGURATION_ID: {\r\n    MSG_KEY: 'C2C.NO_APP_CONFIGURATION_ID',\r\n  },\r\n  NO_SCHEDULE_NAME: {\r\n    MSG_KEY: 'C2C.NO_SCHEDULE_NAME',\r\n  },\r\n  NO_SCHEDULE: {\r\n    MSG_KEY: 'C2C.NO_SCHEDULE',\r\n  },\r\n  NO_SOURCE_TYPE: {\r\n    MSG_KEY: 'C2C.NO_SOURCE_TYPE',\r\n  },\r\n  NO_SUBSCRIPTION_ID: {\r\n    MSG_KEY: 'C2C.NO_SUBSCRIPTION_ID',\r\n  },\r\n  CANNOT_FIND_MAP_TO_RESOURCES: {\r\n    MSG_KEY: 'CAPABILITY.CANNOT_FIND_MAP_TO_RESOURCES',\r\n  },\r\n  CANNOT_FIND_COMPONENTS: {\r\n    MSG_KEY: 'CAPABILITY.CANNOT_FIND_COMPONENTS',\r\n  },\r\n  CANNOT_FIND_CAPABILITY: {\r\n    MSG_KEY: 'CAPABILITY.CANNOT_FIND_CAPABILITY',\r\n  },\r\n  UNSUPPORTED_PROTOCOL: {\r\n    MSG_KEY: 'COAP.UNSUPPORTED_PROTOCOL',\r\n  },\r\n  COAP_API_FAILED: {\r\n    MSG_KEY: 'COAP.API_FAILED',\r\n  },\r\n  NOT_CONNECTED: {\r\n    MSG_KEY: 'COAP.NOT_CONNECTED',\r\n  },\r\n  NO_COMMAND: {\r\n    MSG_KEY: 'COMMAND.NO_COMMAND',\r\n  },\r\n  NO_COMMAND_OPTION: {\r\n    MSG_KEY: 'COMMAND.NO_COMMAND_OPTION',\r\n  },\r\n  NO_COMMAND_DESCRIPTION: {\r\n    MSG_KEY: 'COMMAND.NO_COMMAND_DESCRIPTION',\r\n  },\r\n  NO_COMMAND_RUNNER: {\r\n    MSG_KEY: 'COMMAND.NO_COMMAND_RUNNER',\r\n  },\r\n  COMMAND_ALREADY_ADDED: {\r\n    MSG_KEY: 'COMMAND.COMMAND_ALREADY_ADDED',\r\n  },\r\n  CANNOT_LOAD_CONFIGURATION_FILE: {\r\n    MSG_KEY: 'CONFIGURATOR.CANNOT_LOAD_CONFIGURATION_FILE',\r\n  },\r\n  NO_DEVICE_ID: {\r\n    MSG_KEY: 'DEVICE.NO_DEVICE_ID',\r\n  },\r\n  NO_DEVICE_COMMAND: {\r\n    MSG_KEY: 'DEVICE.NO_DEVICE_COMMAND',\r\n  },\r\n  NO_RESOURCE_HREF: {\r\n    MSG_KEY: 'DEVICE.NO_RESOURCE_HREF',\r\n  },\r\n  DEVICE_NOT_FOUND: {\r\n    MSG_KEY: 'DEVICE.DEVICE_NOT_FOUND',\r\n  },\r\n  CANNOT_FIND_CUSTOM_DEVICE_PROFILE: {\r\n    MSG_KEY: 'DEVICE_PROFILE.CANNOT_FIND_CUSTOM_DEVICE_PROFILE',\r\n  },\r\n  UNSUPPORTED_CAPABILITY: {\r\n    MSG_KEY: 'DEVICE_PROFILE.UNSUPPORTED_CAPABILITY',\r\n  },\r\n  INVALID_DEVICE_PROFILE: {\r\n    MSG_KEY: 'DEVICE_PROFILE.INVALID_DEVICE_PROFILE',\r\n  },\r\n  EXCEEDED_DEVICE_NAME: {\r\n    MSG_KEY: 'DEVICE_PROFILE.EXCEEDED_DEVICE_NAME',\r\n  },\r\n  EXCEEDED_VID: {\r\n    MSG_KEY: 'DEVICE_PROFILE.EXCEEDED_VID',\r\n  },\r\n  INVALID_VID: {\r\n    MSG_KEY: 'DEVICE_PROFILE.INVALID_VID',\r\n  },\r\n  EXCEEDED_META_VID: {\r\n    MSG_KEY: 'DEVICE_PROFILE.EXCEEDED_META_VID',\r\n  },\r\n  INVALID_VID_REGEX: {\r\n    MSG_KEY: 'DEVICE_PROFILE.INVALID_VID_REGEX',\r\n  },\r\n  INVALID_META_VID: {\r\n    MSG_KEY: 'DEVICE_PROFILE.INVALID_META_VID',\r\n  },\r\n  INVALID_META_VID_REGEX: {\r\n    MSG_KEY: 'DEVICE_PROFILE.INVALID_META_VID_REGEX',\r\n  },\r\n  UNSUPPORTED_DEVICE_PROFILE_MODEL: {\r\n    MSG_KEY: 'DEVICE_PROFILE.UNSUPPORTED_DEVICE_PROFILE_MODEL',\r\n  },\r\n  UNSUPPORTED_METADATA_DEVICE_TYPE: {\r\n    MSG_KEY: 'DEVICE_PROFILE.UNSUPPORTED_METADATA_DEVICE_TYPE',\r\n  },\r\n  CANNOT_FIND_DEVICE_PROFILE: {\r\n    MSG_KEY: 'DEVICE_PROFILE.CANNOT_FIND_DEVICE_PROFILE',\r\n  },\r\n  NOT_CAPABILITY_MODEL: {\r\n    MSG_KEY: 'DEVICE_PROFILE.NOT_CAPABILITY_MODEL',\r\n  },\r\n  CANNOT_MAP_CAPABILITY: {\r\n    MSG_KEY: 'DEVICE_PROFILE.CANNOT_MAP_CAPABILITY',\r\n  },\r\n  NO_RESOURCES_TO_MAP: {\r\n    MSG_KEY: 'DEVICE_PROFILE.NO_RESOURCES_TO_MAP',\r\n  },\r\n  UNSUPPORTED_DEVICE_PROFILE_TYPE: {\r\n    MSG_KEY: 'DEVICE_PROFILE.UNSUPPORTED_DEVICE_PROFILE_TYPE',\r\n  },\r\n  NO_MNMN_OR_NO_MNID: {\r\n    MSG_KEY: 'DEVICE_PROFILE.NO_MNMN_OR_NO_MNID',\r\n  },\r\n  CAPABILITY_MAPPING_NOT_FOUND: {\r\n    MSG_KEY: 'DEVICE_PROFILE.CAPABILITY_MAPPING_NOT_FOUND',\r\n  },\r\n  CAPABILITY_MAPPING_ALREADY_EXISTS: {\r\n    MSG_KEY: 'DEVICE_PROFILE.CAPABILITY_MAPPING_ALREADY_EXISTS',\r\n  },\r\n  DEVICE_TYPE_MAPPING_NOT_FOUND: {\r\n    MSG_KEY: 'DEVICE_PROFILE.DEVICE_TYPE_MAPPING_NOT_FOUND',\r\n  },\r\n  CANNOT_FIND_MNID: {\r\n    MSG_KEY: 'DEV_PORTAL.CANNOT_FIND_MNID',\r\n  },\r\n  NO_DEV_PORTAL: {\r\n    MSG_KEY: 'DEV_PORTAL.NO_DEV_PORTAL',\r\n  },\r\n  NO_PROGRAM_ID: {\r\n    MSG_KEY: 'DEV_PORTAL.NO_PROGRAM_ID',\r\n  },\r\n  CANNOT_PARSE_JSON: {\r\n    MSG_KEY: 'IOT_CLOUD.CANNOT_PARSE_JSON',\r\n  },\r\n  IOT_CLOUD_DEVICE_NOT_FOUND: {\r\n    MSG_KEY: 'IOT_CLOUD.DEVICE_NOT_FOUND',\r\n  },\r\n  IOT_CLOUD_CLIENT_DEVICE_NOT_FOUND: {\r\n    MSG_KEY: 'IOT_CLOUD.CLIENT_DEVICE_NOT_FOUND',\r\n  },\r\n  INVALID_EVENT_TYPES: {\r\n    MSG_KEY: 'IOT_CLOUD.INVALID_EVENT_TYPES',\r\n  },\r\n  CANNOT_FIND_TEMPLATE: {\r\n    MSG_KEY: 'IOT_CONSOLE.CANNOT_FIND_TEMPLATE',\r\n  },\r\n  NO_LOCATION_NAME: {\r\n    MSG_KEY: 'LOCATION.NO_LOCATION_NAME',\r\n  },\r\n  NO_COUNTRY_CODE: {\r\n    MSG_KEY: 'LOCATION.NO_COUNTRY_CODE',\r\n  },\r\n  INVALID_LATITUDE: {\r\n    MSG_KEY: 'LOCATION.INVALID_LATITUDE',\r\n  },\r\n  INVALID_LATITUDE_NUMBER: {\r\n    MSG_KEY: 'LOCATION.INVALID_LATITUDE_NUMBER',\r\n  },\r\n  INVALID_LONGITUDE: {\r\n    MSG_KEY: 'LOCATION.INVALID_LONGITUDE',\r\n  },\r\n  INVALID_LONGITUDE_NUMBER: {\r\n    MSG_KEY: 'LOCATION.INVALID_LONGITUDE_NUMBER',\r\n  },\r\n  INVALID_REGION_RADIUS: {\r\n    MSG_KEY: 'LOCATION.INVALID_REGION_RADIUS',\r\n  },\r\n  INVALID_TEMPERATURE_SCALE: {\r\n    MSG_KEY: 'LOCATION.INVALID_TEMPERATURE_SCALE',\r\n  },\r\n  INVALID_LOCATION_ID: {\r\n    MSG_KEY: 'LOCATION.INVALID_LOCATION_ID',\r\n  },\r\n  EMPTY_PARAMETER: {\r\n    MSG_KEY: 'LOCATION.EMPTY_PARAMETER',\r\n  },\r\n  CANNOT_DELETE_DEFAULT_LOCATION: {\r\n    MSG_KEY: 'LOCATION.CANNOT_DELETE_DEFAULT_LOCATION',\r\n  },\r\n  INVALID_RESPONSE: {\r\n    MSG_KEY: 'MANIFEST.INVALID_RESPONSE',\r\n  },\r\n  INVALID_STATUS: {\r\n    MSG_KEY: 'MANIFEST.INVALID_STATUS',\r\n  },\r\n  FAILED_TO_RETRIEVE_MANIFEST: {\r\n    MSG_KEY: 'MANIFEST.FAILED_TO_RETRIEVE_MANIFEST',\r\n  },\r\n  FAILED_TO_RETRIEVE_MANIFEST_LIST: {\r\n    MSG_KEY: 'MANIFEST.FAILED_TO_RETRIEVE_MANIFEST_LIST',\r\n  },\r\n  CANNOT_FIND_MANIFEST: {\r\n    MSG_KEY: 'MANIFEST.CANNOT_FIND_MANIFEST',\r\n  },\r\n  NO_READABLE_PROPERTY: {\r\n    MSG_KEY: 'METADATA.NO_READABLE_PROPERTY',\r\n  },\r\n  NO_WRITABLE_PROPERTY: {\r\n    MSG_KEY: 'METADATA.NO_WRITABLE_PROPERTY',\r\n  },\r\n  INVALID_COMPONENT_ID: {\r\n    MSG_KEY: 'METADATA.INVALID_COMPONENT_ID',\r\n  },\r\n  CANNOT_FIND_RESOURCE_IN_DEVICE_PROFILE: {\r\n    MSG_KEY: 'METADATA.CANNOT_FIND_RESOURCE_IN_DEVICE_PROFILE',\r\n  },\r\n  INVALID_CAPABILITY: {\r\n    MSG_KEY: 'METADATA.INVALID_CAPABILITY',\r\n  },\r\n  INVALID_MAIN_STATE_CAPABILITY: {\r\n    MSG_KEY: 'METADATA.INVALID_MAIN_STATE_CAPABILITY',\r\n  },\r\n  INVALID_MAIN_ACTION_CAPABILITY: {\r\n    MSG_KEY: 'METADATA.INVALID_MAIN_ACTION_CAPABILITY',\r\n  },\r\n  CANNOT_FIND_MAPPER_FILE: {\r\n    MSG_KEY: 'METADATA.CANNOT_FIND_MAPPER_FILE',\r\n  },\r\n  CANNOT_FIND_CAPABILITY_MAPPER_FILE: {\r\n    MSG_KEY: 'METADATA.CANNOT_FIND_CAPABILITY_MAPPER_FILE',\r\n  },\r\n  CANNOT_FIND_RESOURCE: {\r\n    MSG_KEY: 'DEVICE.CANNOT_FIND_RESOURCE',\r\n  },\r\n  TOO_MANY_RESOURCES: {\r\n    MSG_KEY: 'DEVICE.TOO_MANY_RESOURCES',\r\n  },\r\n  NO_GROUP_NAME: {\r\n    MSG_KEY: 'GROUP.NO_GROUP_NAME',\r\n  },\r\n  INVALID_MEMBERS_TYPE: {\r\n    MSG_KEY: 'GROUP.INVALID_MEMBERS_TYPE',\r\n  },\r\n  NO_GROUP_ID: {\r\n    MSG_KEY: 'GROUP.NO_GROUP_ID',\r\n  },\r\n  INVALID_OPERATION: {\r\n    MSG_KEY: 'GROUP.INVALID_OPERATION',\r\n  },\r\n  CANNOT_DELETE_DEVICE_FROM_GROUP: {\r\n    MSG_KEY: 'GROUP.CANNOT_DELETE_DEVICE_FROM_GROUP',\r\n  },\r\n  CANNOT_DELETE_DEFAULT_GROUP: {\r\n    MSG_KEY: 'GROUP.CANNOT_DELETE_DEFAULT_GROUP',\r\n  },\r\n  CANNOT_FIND_UI_MANIFEST_FILE: {\r\n    MSG_KEY: 'ONEAPP.CANNOT_FIND_UI_MANIFEST_FILE',\r\n  },\r\n  CANNOT_FIND_UI_MANIFEST_FILE_BY_PATH: {\r\n    MSG_KEY_: 'ONEAPP.CANNOT_FIND_UI_MANIFEST_FILE_BY_PATH',\r\n  },\r\n  CANNOT_FIND_UI_MANIFEST_FILE_BY_NAME: {\r\n    MSG_KEY_: 'ONEAPP.CANNOT_FIND_UI_MANIFEST_FILE_BY_NAME',\r\n  },\r\n  CANNOT_FIND_SIMULATOR: {\r\n    MSG_KEY: 'ONEAPP.CANNOT_FIND_SIMULATOR',\r\n  },\r\n  CANNOT_FIND_PLUGINFOLDER: {\r\n    MSG_KEY: 'ONEAPP.CANNOT_FIND_PLUGINFOLDER',\r\n  },\r\n  NO_USER_ID: {\r\n    MSG_KEY: 'ONEAPP.NO_USER_ID',\r\n  },\r\n  NO_SSO_TOKEN: {\r\n    MSG_KEY: 'ONEAPP.NO_SSO_TOKEN',\r\n  },\r\n  NO_AUTH_PROVIDER_URI: {\r\n    MSG_KEY: 'ONEAPP.NO_AUTH_PROVIDER_URI',\r\n  },\r\n  NO_MNID: {\r\n    MSG_KEY: 'ONEAPP.NO_MNID',\r\n  },\r\n  NO_ADB_PATH: {\r\n    MSG_KEY: 'ONEAPP.NO_ADB_PATH',\r\n  },\r\n  UNMATCHED_MNID: {\r\n    MSG_KEY: 'ONEAPP.UNMATCHED_MNID',\r\n  },\r\n  UNMATCHED_VID: {\r\n    MSG_KEY: 'ONEAPP.UNMATCHED_VID',\r\n  },\r\n  NO_VID_IN_MANIFEST: {\r\n    MSG_KEY: 'ONEAPP.NO_VID_IN_MANIFEST',\r\n  },\r\n  CANNOT_FIND_MANIFEST_XML: {\r\n    MSG_KEY: 'ONEAPP.CANNOT_FIND_MANIFEST_XML',\r\n  },\r\n  INVALID_MANIFEST_XML: {\r\n    MSG_KEY: 'ONEAPP.INVALID_MANIFEST_XML',\r\n  },\r\n  CANNOT_FIND_PPK_FILE: {\r\n    MSG_KEY: 'ONEAPP.CANNOT_FIND_PPK_FILE',\r\n  },\r\n  CANNOT_FIND_CATALOG_FILE: {\r\n    MSG_KEY: 'ONEAPP.CANNOT_FIND_CATALOG_FILE',\r\n  },\r\n  CANNOT_FIND_ADB_FILE: {\r\n    MSG_KEY: 'ONEAPP.CANNOT_FIND_ADB_FILE',\r\n  },\r\n  NO_DEVICE_PROFILE_OR_IN: {\r\n    MSG_KEY: 'C2C.NO_DEVICE_PROFILE_OR_IN',\r\n  },\r\n  CANNOT_PARSE_SCHEMA: {\r\n    MSG_KEY: 'RESOURCE_TYPE.CANNOT_PARSE_SCHEMA',\r\n  },\r\n  CANNOT_PARSE_EXAMPLE: {\r\n    MSG_KEY: 'RESOURCE_TYPE.CANNOT_PARSE_EXAMPLE',\r\n  },\r\n  AVOID_TIME_OUT: {\r\n    MSG_KEY: 'RESOURCE_TYPE.AVOID_TIME_OUT',\r\n  },\r\n  CANNOT_PARSE_RAML: {\r\n    MSG_KEY: 'RESOURCE_TYPE.CANNOT_PARSE_RAML',\r\n  },\r\n  INVALID_CONFIGURATION_STATUS: {\r\n    MSG_KEY: 'C2C.INVALID_CONFIGURATION_STATUS',\r\n  },\r\n  INVALID_INSTALLED_APP_TYPE: {\r\n    MSG_KEY: 'SMART_APP.INVALID_INSTALLED_APP_TYPE',\r\n  },\r\n  INVALID_SOURCE_TYPE: {\r\n    MSG_KEY: 'SMART_APP.INVALID_SOURCE_TYPE',\r\n  },\r\n  NO_SUBSCRIPTION_DETAIL: {\r\n    MSG_KEY: 'SMART_APP.NO_SUBSCRIPTION_DETAIL',\r\n  },\r\n  NO_COMPANY_INFORMATION: {\r\n    MSG_KEY: 'SET_MNID.NO_COMPANY_INFORMATION',\r\n  },\r\n  NO_INDIVIDUAL_INFORMATION: {\r\n    MSG_KEY: 'SET_MNID.NO_INDIVIDUAL_INFORMATION',\r\n  },\r\n  UNSUPPORTED_MNID_TYPE: {\r\n    MSG_KEY: 'SET_MNID.UNSUPPORTED_MNID_TYPE',\r\n  },\r\n  CANNOT_CHANGE_COMPANY_MNID: {\r\n    MSG_KEY: 'SET_MNID.CANNOT_CHANGE_COMPANY_MNID',\r\n  },\r\n  UNSUPPORTED_CONTENT_FORMAT: {\r\n    MSG_KEY: 'COAP.UNSUPPORTED_CONTENT_FORMAT',\r\n  },\r\n  UNSUPPORTED_OPTION_NUMBER: {\r\n    MSG_KEY: 'COAP.UNSUPPORTED_OPTION_NUMBER',\r\n  },\r\n  TOO_LARGE_TCP_BODY: {\r\n    MSG_KEY: 'COAP.TOO_LARGE_TCP_BODY',\r\n  },\r\n  INVALID_OPTION_DELTA: {\r\n    MSG_KEY: 'COAP.INVALID_OPTION_DELTA',\r\n  },\r\n  INVALID_OPTION_LENGTH: {\r\n    MSG_KEY: 'COAP.INVALID_OPTION_LENGTH',\r\n  },\r\n  INVALID_PAYLOAD: {\r\n    MSG_KEY: 'COAP.INVALID_PAYLOAD',\r\n  },\r\n  INVALID_OBSERVE_OPTION: {\r\n    MSG_KEY: 'COAP.INVALID_OBSERVE_OPTION',\r\n  },\r\n  INVALID_URI_PATH: {\r\n    MSG_KEY: 'COAP.INVALID_URI_PATH',\r\n  },\r\n  INVALID_URI_QUERY: {\r\n    MSG_KEY: 'COAP.INVALID_URI_QUERY',\r\n  },\r\n  INVALID_CATALOG_SETUPID: {\r\n    MSG_KEY: 'PROJECT.INVALID_CATALOG_SETUP_ID',\r\n  },\r\n  CANNOT_FIND_RESOURCE_IN_DEVICE: {\r\n    MSG_KEY: 'OCF.CANNOT_FIND_RESOURCE_IN_DEVICE',\r\n  },\r\n  CANNOT_FIND_TYPE_OF_RESOURCE: {\r\n    MSG_KEY: 'OCF.CANNOT_FIND_TYPE_OF_RESOURCE',\r\n  },\r\n  CANNOT_FIND_PROPERTY_DEFINITION: {\r\n    MSG_KEY: 'OCF.CANNOT_FIND_PROPERTY_DEFINITION',\r\n  },\r\n  INVALID_PROPERTY: {\r\n    MSG_KEY: 'OCF.INVALID_PROPERTY',\r\n  },\r\n  INVALID_DEVICE_PLUGIN_ID_LONG: {\r\n    MSG_KEY: 'PROJECT.INVALID_DEVICE_PLUGIN_ID_LONG',\r\n  },\r\n  INVALID_DEVICE_PLUGIN_ID_URI: {\r\n    MSG_KEY: 'PROJECT.INVALID_DEVICE_PLUGIN_ID_URI',\r\n  },\r\n  UNDEFINED_PO_CODE: {\r\n    MSG_KEY: 'PROJECT.UNDEFINED_PO_CODE',\r\n  },\r\n  BAD_REQUEST: {\r\n    MSG_KEY: 'STCLOUD.BAD_REQUEST',\r\n  },\r\n  NOT_AUTHENTICATED: {\r\n    MSG_KEY: 'STCLOUD.NOT_AUTHENTICATED',\r\n  },\r\n  NOT_AUTHORIZED: {\r\n    MSG_KEY: 'STCLOUD.NOT_AUTHORIZED',\r\n  },\r\n  NOT_FOUND: {\r\n    MSG_KEY: 'STCLOUD.NOT_FOUND',\r\n  },\r\n  UNPROCESSABLE_ENTITY: {\r\n    MSG_KEY: 'STCLOUD.UNPROCESSABLE_ENTITY',\r\n  },\r\n  TOO_MANY_REQUESTS: {\r\n    MSG_KEY: 'STCLOUD.TOO_MANY_REQUESTS',\r\n  },\r\n  INVALID_OCF_DEVICE_TYPE: {\r\n    MSG_KEY: 'DEVICE_PROFILE.INVALID_OCF_DEVICE_TYPE',\r\n  },\r\n  NO_RESOURCE_OPTION: {\r\n    MSG_KEY: 'DESCRIBE_DEVICE_STATUS.NO_RESOURCE_OPTION',\r\n  },\r\n  CERT_INVALID_CERTIFICATE: {\r\n    MSG_KEY: 'CERT.INVALID_CERTIFICATE',\r\n  },\r\n  CERT_INVALID_DISTRIBUTOR: {\r\n    MSG_KEY: 'CERT.INVALID_DISTRIBUTOR',\r\n  },\r\n  CERT_EXPIRED_CERTIFICATE: {\r\n    MSG_KEY: 'CERT.EXPIRED_CERTIFICATE',\r\n  },\r\n  DESCRIBE_DEVICE_PROFILE_NO_BOTH_OPTION: {\r\n    MSG_KEY: 'DESCRIBE_DEVICE_PROFILE.NO_BOTH_OPTION',\r\n  },\r\n  REQUESTING_AUTH_CODE_FAILED: {\r\n    MSG_KEY: 'REQUEST_TOKEN.REQUESTING_AUTH_CODE_FAILED',\r\n  },\r\n  REQUESTING_ACCESS_TOKEN_FAILED: {\r\n    MSG_KEY: 'REQUEST_TOKEN.REQUESTING_ACCESS_TOKEN_FAILED',\r\n  },\r\n  REQUESTING_AUTHENTICATION_FAILED: {\r\n    MSG_KEY: 'REQUEST_TOKEN.REQUESTING_AUTHENTICATION_FAILED',\r\n  },\r\n  GETTING_MNID_FAILED: {\r\n    MSG_KEY: 'REQUEST_TOKEN.GETTING_MNID_FAILED',\r\n  },\r\n  REQUESTING_DEVICE_CERT_FAILED: {\r\n    MSG_KEY: 'REQUEST_TOKEN.REQUESTING_DEVICE_CERT_FAILED',\r\n  },\r\n  SIGNING_UP_TO_IOT_CLOUD_FAILED: {\r\n    MSG_KEY: 'REQUEST_TOKEN.SIGNING_UP_TO_IOT_CLOUD_FAILED',\r\n  },\r\n  INVALID_LOGGER_TYPE: {\r\n    MSG_KEY: 'GET_LOG.INVALID_LOGGER_TYPE',\r\n  },\r\n  MUTUALLY_EXCLUSIVE_OPTIONS: {\r\n    MSG_KEY: 'GET_LOG.MUTUALLY_EXCLUSIVE_OPTIONS',\r\n  },\r\n  NO_OPTIONS: {\r\n    MSG_KEY: 'GET_LOG.NO_OPTIONS',\r\n  },\r\n  NO_AUTHCODE: {\r\n    MSG_KEY: 'GET_LOG.NO_AUTHCODE',\r\n  },\r\n  AUTHCODE_OR_SHOWUI_REQUIRED: {\r\n    MSG_KEY: 'GET_LOG.AUTHCODE_OR_SHOWUI_REQUIRED',\r\n  },\r\n  UNSUPPORTED_MODE: {\r\n    MSG_KEY: 'CONFIGURATOR.UNSUPPORTED_MODE',\r\n  },\r\n  CANNOT_CREATE_SECURITY: {\r\n    MSG_KEY: 'CONFIGURATOR.CANNOT_CREATE_SECURITY',\r\n  },\r\n  PATH_IS_EMPTY: {\r\n    MSG_KEY: 'CONFIGURATOR.PATH_IS_EMPTY',\r\n  },\r\n  PATH_WITHOUT_VOLUME: {\r\n    MSG_KEY: 'CONFIGURATOR.PATH_WITHOUT_VOLUME',\r\n  },\r\n  PATH_LENGTH_EXCEEDED: {\r\n    MSG_KEY: 'CONFIGURATOR.PATH_LENGTH_EXCEEDED',\r\n  },\r\n  PATH_INCLUDES_ILLEGAL_CHAR: {\r\n    MSG_KEY: 'CONFIGURATOR.PATH_INCLUDES_ILLEGAL_CHAR',\r\n  },\r\n  PATH_IS_NOT_AN_ABSOLUTE_PATH: {\r\n    MSG_KEY: 'CONFIGURATOR.PATH_IS_NOT_AN_ABSOLUTE_PATH',\r\n  },\r\n  EXCEEDED_CAPABILITIES: {\r\n    MSG_KEY: 'DEVICE_PROFILE.EXCEEDED_CAPABILITIES',\r\n  },\r\n};\r\n\r\nfunction getError(key) {\r\n  return errorCode[key];\r\n}\r\n\r\nmodule.exports = {\r\n  getError,\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/errors/Errors.js\n// module id = 81\n// module chunks = 0","module.exports = require(\"crypto\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"crypto\"\n// module id = 82\n// module chunks = 0","module.exports = require(\"cbor\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"cbor\"\n// module id = 83\n// module chunks = 0","module.exports = require(\"log4js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"log4js\"\n// module id = 84\n// module chunks = 0","module.exports = require(\"source-map\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"source-map\"\n// module id = 85\n// module chunks = 0","module.exports = require(\"cycle\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"cycle\"\n// module id = 86\n// module chunks = 0","module.exports = require(\"request-promise\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"request-promise\"\n// module id = 87\n// module chunks = 0","module.exports = require(\"request-promise/errors\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"request-promise/errors\"\n// module id = 88\n// module chunks = 0","module.exports = require(\"async-lock\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"async-lock\"\n// module id = 89\n// module chunks = 0","const RequestManager = require('./RequestManager');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\nconst URL = {\r\n  MNID: '/api/v1/mnid',\r\n  ENROLLMENT_DATA: '/api/v1/enrollmentData',\r\n};\r\n\r\nclass DevPortalAgent {\r\n  constructor(config) {\r\n    const { uri: baseUri, proxy, rejectUnauthorized } = config;\r\n    this.requestManager = new RequestManager(baseUri, proxy, rejectUnauthorized);\r\n  }\r\n\r\n  requestMnid(saguid, programId) {\r\n    const query = { type: 'Contact', saguid, programId };\r\n    return this.requestManager.request(RequestManager.METHODS.GET, URL.MNID, query);\r\n  }\r\n\r\n  // TODO: Use account information URL. Temporary use of enrollment data cause account API not work.\r\n  requestAccount(saguid, programId) {\r\n    const query = { saguid, programId };\r\n    return this.requestManager.request(RequestManager.METHODS.GET, URL.ENROLLMENT_DATA, query);\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(DevPortalAgent, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/DevPortalAgent.js\n// module id = 90\n// module chunks = 0","module.exports = require(\"x509.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"x509.js\"\n// module id = 91\n// module chunks = 0","module.exports = require(\"https-proxy-agent\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"https-proxy-agent\"\n// module id = 92\n// module chunks = 0","module.exports = require(\"aws-sdk\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"aws-sdk\"\n// module id = 93\n// module chunks = 0","const cloneDeep = require('lodash/cloneDeep');\r\nconst StCloudAgent = require('./StCloudAgent');\r\nconst DeviceProfileManager = require('./DeviceProfileManager');\r\nconst C2cDeviceProfile = require('../models/C2cDeviceProfile');\r\nconst { getServerConfig } = require('../common/util');\r\nconst pathUtil = require('path');\r\nconst fs = require('./FileSystemHandler');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\nconst MAXCAPABILITYCOUNT = 20;\r\nconst StError = require('../errors/StError');\r\n\r\n// based on SmartThings API 0.1.93-SNAPSHOT\r\n\r\nfunction validateC2cDeviceProfile(deviceProfile) {\r\n  if (!deviceProfile.name) return Promise.reject(new StError('NO_DEVICE_PROFILE_NAME'));\r\n  if (!deviceProfile.components) return Promise.reject(new StError('NO_COMPONENTS'));\r\n  if (!deviceProfile.metadata) return Promise.reject(new StError('NO_META_DATA'));\r\n  // if (deviceProfile.components.length > 1) {\r\n  //   return Promise.reject(new StError('TOO_MANY_COMPONENTS'));\r\n  // }\r\n  const component = deviceProfile.components[0];\r\n  if (component.capabilities.length > MAXCAPABILITYCOUNT) {\r\n    return Promise.reject(new StError('TOO_MANY_CAPABILITIES', MAXCAPABILITYCOUNT));\r\n  }\r\n  if (!deviceProfile.components.find(c => c.id === 'main')) {\r\n    return Promise.reject(new StError('AT_LEAST_ONE_MAIN_COMPONENT_REQUIRED'));\r\n  }\r\n  return Promise.resolve();\r\n}\r\n\r\n\r\nfunction getRequestBodyFromDeviceProfile(deviceProfile) {\r\n  const body = {};\r\n  body.name = deviceProfile.name;\r\n  body.components = deviceProfile.components.map(component => ({\r\n    id: component.id,\r\n    capabilities: component.capabilities.map(capability => ({\r\n      id: capability.id,\r\n      version: capability.version,\r\n    })),\r\n  }));\r\n  body.metadata = deviceProfile.metadata;\r\n\r\n  return body;\r\n}\r\n\r\n\r\n/**\r\n * Controller that has a responsibility for manage C2C Device Profile\r\n */\r\nclass C2cDeviceProfileManager {\r\n  /**\r\n   * Setup config object which contains connection information.\r\n   * @param {Object} config config object\r\n   */\r\n  constructor(config) {\r\n    this.config = config;\r\n    this.deviceProfileMgr = new DeviceProfileManager(this.config);\r\n  }\r\n\r\n  /**\r\n   * Initialize a C2C app manager\r\n   * @param {CloudAgent} agent cloud connector\r\n   */\r\n  init(agent) {\r\n    const { accessToken } = this.config;\r\n    const serverConfig = getServerConfig(this.config, 'stCloud');\r\n    this.agent = agent || new StCloudAgent(accessToken, serverConfig);\r\n  }\r\n\r\n /**\r\n  * Register C2C device profile.\r\n  *\r\n  * @param {string} deviceProfileId device profile ID\r\n  * @returns {(Promise.<C2cDeviceProfile|string>)}\r\n  * A promise is resolved with array of device profile or rejected with an error string.\r\n  */\r\n  registerDeviceProfile(deviceProfileId) {\r\n    return this.deviceProfileMgr.retrieveDeviceProfile(deviceProfileId)\r\n      .then((deviceProfile) => {\r\n        const body = cloneDeep(deviceProfile);\r\n        if (body.id) delete body.id;\r\n        return validateC2cDeviceProfile(body)\r\n          .then(() => this.agent.createDeviceProfile(body));\r\n        // NOTE. should delete the id field generated by local device profile\r\n      });\r\n  }\r\n\r\n /**\r\n  * Register C2C device profile by JSON file.\r\n  *\r\n  * @param {string} [inputPath] path of be inputed device profile json\r\n  * @returns {(Promise.<C2cDeviceProfile|string>)}\r\n  * A promise is resolved with array of device profile or rejected with an error string.\r\n  */\r\n  registerDeviceProfileByJsonFile(inputPath) {\r\n    const path = pathUtil.resolve(inputPath);\r\n    return fs.exists(path).then((exist) => {\r\n      if (exist) {\r\n        return fs.readFile(path, 'utf-8')\r\n          .then((data) => {\r\n            const deviceProfile = JSON.parse(data);\r\n            const body = getRequestBodyFromDeviceProfile(deviceProfile);\r\n            return validateC2cDeviceProfile(body)\r\n              .then(() => this.agent.createDeviceProfile(body));\r\n          });\r\n      }\r\n      throw new StError('CANNOT_FIND_INPUT_PATH', path);\r\n    });\r\n  }\r\n  /**\r\n   * Retrieve C2C device profile list\r\n   * @returns {Promise.<C2cDeviceProfile[]>}\r\n   *   A promise to be resolved with device profile info list\r\n   */\r\n  retrieveDeviceProfileList() {\r\n    const agent = this.agent;\r\n    function getDeviceProfileListIterator(profiles, url, isNext) {\r\n      const getList = isNext\r\n        ? agent.get(url)\r\n        : agent.getDeviceProfileList();\r\n\r\n      return getList\r\n        .then(({ items, _links }) => {\r\n          if (items) {\r\n            items.forEach(item => profiles.push(new C2cDeviceProfile(item)));\r\n          }\r\n          if (_links && _links.next && _links.next.href) {\r\n            return getDeviceProfileListIterator(profiles, _links.next.href, true);\r\n          }\r\n          return profiles;\r\n        });\r\n    }\r\n\r\n    return getDeviceProfileListIterator([]);\r\n  }\r\n\r\n  /**\r\n   * Retrieve C2C device profile\r\n   * @param {string} id C2C device profile ID\r\n   * @returns {Promise.<C2cDeviceProfile>}\r\n   *   A promise to be resolved with C2C device profile\r\n   */\r\n  retrieveDeviceProfile(id) {\r\n    if (!id) return Promise.reject(new StError('NO_DEVICE_PROFILE_ID'));\r\n\r\n    return this.agent.getDeviceProfile(id)\r\n      .then(resp => new C2cDeviceProfile(resp));\r\n  }\r\n\r\n\r\n  /**\r\n   * Update C2C device profile.\r\n   *\r\n   * @param {string} c2cDeviceProfileId C2C device profile ID\r\n   * @param {string} deviceProfileId device profile ID\r\n   * @returns {(Promise.<C2cDeviceProfile|string>)}\r\n   * A promise is resolved with array of device profile or rejected with an error string.\r\n   */\r\n  updateDeviceProfile(c2cDeviceProfileId, deviceProfileId) {\r\n    return this.deviceProfileMgr.retrieveDeviceProfile(deviceProfileId)\r\n    .then((deviceProfile) => {\r\n      const body = cloneDeep(deviceProfile);\r\n      if (body.id) delete body.id;\r\n      return validateC2cDeviceProfile(body)\r\n        .then(() => {\r\n          // NOTE. 'name' cannot be changed\r\n          delete body.name;\r\n          return this.agent.updateDeviceProfile(c2cDeviceProfileId, body);\r\n        });\r\n      // NOTE. should delete the id field generated by local device profile\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update C2C device profile by JSON file.\r\n   *\r\n   * @param {string} c2cDeviceProfileId C2C device profile ID\r\n   * @param {string} [inputPath] path of be inputed device profile json\r\n   * @returns {(Promise.<C2cDeviceProfile|string>)}\r\n   * A promise is resolved with array of device profile or rejected with an error string.\r\n   */\r\n  updateDeviceProfileByJsonFile(c2cDeviceProfileId, inputPath) {\r\n    const path = pathUtil.resolve(inputPath);\r\n    return fs.exists(path).then((exist) => {\r\n      if (exist) {\r\n        return fs.readFile(path, 'utf-8')\r\n        .then((data) => {\r\n          const deviceProfile = JSON.parse(data);\r\n          const body = getRequestBodyFromDeviceProfile(deviceProfile);\r\n          return validateC2cDeviceProfile(body)\r\n            .then(() => {\r\n              // NOTE. 'name' cannot be changed\r\n              delete body.name;\r\n              return this.agent.updateDeviceProfile(c2cDeviceProfileId, body);\r\n            });\r\n        });\r\n      }\r\n      throw new StError('CANNOT_FIND_INPUT_PATH', path);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Delete C2C device profile (Not supported yet)\r\n   * @param {string} id C2C device profile ID\r\n   * @returns {Promise.<C2cDeviceProfile>}\r\n   *   A promise to be resolved with C2C device profile\r\n   */\r\n  deleteDeviceProfile(id) {\r\n    if (!id) return Promise.reject(new StError('NO_DEVICE_PROFILE_ID'));\r\n\r\n    return this.agent.deleteDeviceProfile(id);\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(C2cDeviceProfileManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/C2cDeviceProfileManager.js\n// module id = 94\n// module chunks = 0","const DeviceProfile = require('../models/DeviceProfile');\r\nconst DeviceProfileEntry = require('../models/DeviceProfileEntry');\r\n\r\nfunction mapToDeviceProfile(entry, info) {\r\n  const deviceProfile = new DeviceProfile();\r\n  if (entry) deviceProfile.id = entry.id;\r\n  deviceProfile.name = info.name;\r\n  deviceProfile.metadata = info.metadata;\r\n  deviceProfile.components = info.components;\r\n\r\n  return deviceProfile;\r\n}\r\n\r\n\r\nfunction mapToDeviceProfileEntry(entry) {\r\n  const deviceProfileEntry = new DeviceProfileEntry();\r\n  deviceProfileEntry.id = entry.id;\r\n  deviceProfileEntry.name = entry.name;\r\n  deviceProfileEntry.type = entry.type;\r\n  deviceProfileEntry.path = entry.path;\r\n  deviceProfileEntry.category = entry.category;\r\n\r\n  return deviceProfileEntry;\r\n}\r\n\r\n\r\nfunction createDeviceProfileEntry(id, name, type, path, category) {\r\n  const deviceProfileEntry = new DeviceProfileEntry();\r\n  deviceProfileEntry.id = id;\r\n  deviceProfileEntry.name = name;\r\n  deviceProfileEntry.type = type;\r\n  deviceProfileEntry.path = path;\r\n  deviceProfileEntry.category = category;\r\n\r\n  return deviceProfileEntry;\r\n}\r\n\r\nmodule.exports = { mapToDeviceProfile, mapToDeviceProfileEntry, createDeviceProfileEntry };\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/DeviceProfileMapper.js\n// module id = 95\n// module chunks = 0","/**\r\n * Data model that contains DeviceProfileEntry infomation\r\n *\r\n * @property {string} id device profile's id\r\n * @property {string} name device profile's name\r\n * @property {string} type specify whether it is resource based or capability based. (optional)\r\n * @property {string} category specify device profile category\r\n * @property {string} path device info file path\r\n */\r\nclass DeviceProfileEntry {\r\n  constructor() {\r\n    this.id = null;\r\n    this.name = '-';\r\n    this.category = 'test';\r\n    this.path = '-';\r\n  }\r\n}\r\nmodule.exports = DeviceProfileEntry;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/DeviceProfileEntry.js\n// module id = 96\n// module chunks = 0","module.exports = require(\"lodash/union\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash/union\"\n// module id = 97\n// module chunks = 0","module.exports = require(\"raml-1-parser\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"raml-1-parser\"\n// module id = 98\n// module chunks = 0","/**\r\n * capability information\r\n *\r\n * @property {string} id The id of the capability.\r\n * @property {boolean} mainAction\r\n * A flag indicating whether the corresponding capability is available for the main action.\r\n * @property {boolean} mainState\r\n * A flag indicating whether the corresponding capability is available for the main state.\r\n * @property {Object} mapToResources\r\n * Mapping to resources.\r\n * @property {string[]} supportedComponents\r\n * A list of component to support.\r\n */\r\nclass Capability {\r\n  constructor(id, mainAction, mainState, mapToResources, supportedComponents, version, status) {\r\n    this.id = id;\r\n    this.mainAction = mainAction;\r\n    this.mainState = mainState;\r\n    this.mapToResources = mapToResources;\r\n    this.supportedComponents = supportedComponents;\r\n    this.version = version;\r\n    this.status = status;\r\n  }\r\n}\r\n\r\nmodule.exports = Capability;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/Capability.js\n// module id = 99\n// module chunks = 0","/**\r\n * Data model that contains OCF Device Type infomation\r\n *\r\n * @property {OcfDeviceInfo} device OCF device basic information\r\n * @property {OcfDevicePlatform} plafrom OCF device platform information\r\n * @property {OcfDeviceResource[]} resources  OCF device resources\r\n */\r\nclass OcfDeviceType {\r\n  constructor() {\r\n    this.device = null;\r\n    this.platform = null;\r\n    this.resources = null;\r\n  }\r\n\r\n  toCreateDeviceProfileBody(di, nick) {\r\n    let deviceRt = this.device.rt.find(rt => rt !== 'oic.wk.d');\r\n    if (!deviceRt) {\r\n      deviceRt = 'oic.wk.d'; // for 'Others' device type\r\n    }\r\n\r\n    return {\r\n      devices: [{\r\n        di,\r\n        n: this.device.n,\r\n        nick: nick || this.device.n,\r\n        mnmn: this.platform.mnmn,\r\n        vid: this.platform.vid,\r\n        rt: deviceRt,\r\n      }],\r\n    };\r\n  }\r\n\r\n  toPublishDeviceBody(di) {\r\n    return {\r\n      di,\r\n      n: this.device.n,\r\n      links: this.resources,\r\n    };\r\n  }\r\n}\r\nmodule.exports = OcfDeviceType;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/OcfDeviceType.js\n// module id = 100\n// module chunks = 0","/**\r\n * Data model that contains DeviceProfile infomation\r\n *\r\n * @property {string} id device profile's id\r\n * @property {string} name device profile's name\r\n * @property {Object} owner device profile owner info\r\n * @property {Object[]} components device profile's resources\r\n * @property {Object} metadata payload of device's plafrom info\r\n */\r\nclass C2cDeviceProfile {\r\n  constructor(resp) {\r\n    this.id = resp.id;\r\n    this.name = resp.name;\r\n    this.owner = resp.owner;\r\n    this.components = resp.components;\r\n    this.metadata = resp.metadata;\r\n  }\r\n}\r\nmodule.exports = C2cDeviceProfile;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/C2cDeviceProfile.js\n// module id = 101\n// module chunks = 0","module.exports = require(\"data-store\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-store\"\n// module id = 102\n// module chunks = 0","const cloneDeep = require('lodash/cloneDeep');\r\n\r\n/**\r\n * Model that contains configuration\r\n * @property {Object} aws AWS(Amazon Web Services) related properties.\r\n * @property {string} authCode The authorization code to get access token.\r\n * @property {string} deviceId The id of a device or a client.\r\n * @property {string} mnid The id of a dev portal.\r\n * @property {string} proxy The proxy server uri including protocol.\r\n * @property {Object} authProvider The Auth Provider related properties.\r\n * @property {Object} stCloud The ST Cloud related properties.\r\n * @property {Object} iotCloud The IoT Cloud related properties.\r\n * @property {Object} iotConsole The IoTConsole related properties.\r\n */\r\nclass Configuration {\r\n  constructor(config) {\r\n    const keys = Object.keys(config);\r\n    keys.forEach((key) => { this[key] = cloneDeep(config[key]); });\r\n  }\r\n}\r\n\r\nmodule.exports = Configuration;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/Configuration.js\n// module id = 103\n// module chunks = 0","const StCloudAgent = require('./StCloudAgent');\r\nconst cloneDeep = require('lodash/cloneDeep');\r\nconst Promise = require('bluebird');\r\nconst Device = require('../models/Device');\r\nconst { getListIterator, getServerConfig } = require('../common/util');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\n/**\r\n * Device manager. Call init() before use.\r\n */\r\nclass DeviceManager {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @constructor\r\n   * @param {Object} config The Configuration of ST Cloud.\r\n   * @param {string} config.stCloud The information of the ST Cloud.\r\n   * @param {string} config.accessToken Access token to use ST Cloud API.\r\n   * @param {string} [config.proxy] Proxy server address.\r\n   */\r\n  constructor(config) {\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   * Initialize DeviceManager\r\n   * @param {StCloudAgent} agent The agent for ST Cloud.\r\n   */\r\n  init(agent) {\r\n    const { accessToken } = this.config;\r\n    const serverConfig = getServerConfig(this.config, 'stCloud');\r\n    this.agent = agent || new StCloudAgent(accessToken, serverConfig);\r\n  }\r\n\r\n  /**\r\n   * Retrieve list of device.\r\n   * @return {Promise.<Array.<Device>|error>}\r\n   * A promise to be resolved with Array of Device or to be rejected with an error.\r\n   */\r\n  retrieveDeviceList() {\r\n    return getListIterator([], '', false, this.agent, 'getDeviceList');\r\n  }\r\n\r\n  /**\r\n   * Retrieve details of the device.\r\n   * @param {string} di The id of the device.\r\n   * @return {Promise.<Device|error>}\r\n   * A promise to be resolved with Device or to be rejected with an error.\r\n   */\r\n  retrieveDevice(di) {\r\n    if (!di) return Promise.reject(new StError('NO_DEVICE_ID'));\r\n    const devicePromise = this.agent.getDevice(di);\r\n    const deviceComponentListPromise = getListIterator([], '', false, this.agent, 'getDeviceComponentList', di);\r\n    return Promise.join(devicePromise, deviceComponentListPromise, (device, components) => {\r\n      const compositeDeviceResult = new Device(device);\r\n      compositeDeviceResult.components = cloneDeep(components);\r\n      return compositeDeviceResult;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Retrieve status of the component\r\n   * @param {string} di The id of the device.\r\n   * @param {string} [ci='main'] The id of the component.\r\n   * @return {Promise.<object|error>}\r\n   * A promise to be resolved with status object or to be rejected with an error.\r\n   */\r\n  retrieveDeviceComponentStatus(di, ci = 'main') {\r\n    if (!di) return Promise.reject(new StError('NO_DEVICE_ID'));\r\n    return this.agent.getDeviceComponentStatus(di, ci);\r\n  }\r\n\r\n  /**\r\n   * Delete a device from ST Cloud\r\n   * @param {string} di A device id to delete.\r\n   * @returns {Promise.<undefined|Error>}\r\n   * A promise that is just resolved or rejected with an error.\r\n   */\r\n  deleteDevice(di) {\r\n    if (!di) return Promise.reject(new StError('NO_DEVICE_ID'));\r\n    return this.agent.deleteDevice(di);\r\n  }\r\n\r\n  /**\r\n   * Execute a single command of the device\r\n   * @param {string} di The id of the device.\r\n   * @param {Object} deviceCommand Representation object of the command.\r\n   * @param {string} deviceCommand.component The id of the component.\r\n   * @param {string} deviceCommand.capability The id of the capability.\r\n   * @param {string} deviceCommand.command The id of the command.\r\n   * @param {Array.<object>} deviceCommand.arguments The arguments of the command.\r\n   * @return {Promise.<undefined|error>}\r\n   * A promise to be resolved or to be rejected with an error.\r\n   */\r\n  commandDevice(di, deviceCommand) {\r\n    if (!di) return Promise.reject(new StError('NO_DEVICE_ID'));\r\n    if (!deviceCommand) return Promise.reject(new StError('NO_DEVICE_COMMAND'));\r\n    return this.agent.commandDevice(di, [deviceCommand]); // TODO: multiple command support\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(DeviceManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/DeviceManager.js\n// module id = 104\n// module chunks = 0","const cloneDeep = require('lodash/cloneDeep');\r\n\r\n/**\r\n * Model that contains device data\r\n * @property {string} deviceId The id of the device.\r\n * @property {string} label The label of the device.\r\n * @property {string} name The name of the device.\r\n * @property {string} locationId The location id of the device.\r\n * @property {string} deviceTypeId The device type id of the device.\r\n * @property {string} deviceTypeName The device type name of the device.\r\n * @property {string} deviceNetworkType The network type of the device.\r\n * @property {string} deviceManufacturerCode The manufacturer code of the device.\r\n * @property {Array.<object>} components Components of the device. This will be cloned deeply.\r\n */\r\nclass Device {\r\n  constructor({ deviceId, label, name, locationId, deviceTypeId, deviceTypeName, deviceNetworkType,\r\n    deviceManufacturerCode, components }) {\r\n    this.deviceId = deviceId;\r\n    this.label = label;\r\n    this.name = name;\r\n    this.locationId = locationId;\r\n    this.deviceTypeId = deviceTypeId;\r\n    this.deviceTypeName = deviceTypeName;\r\n    this.deviceNetworkType = deviceNetworkType;\r\n    this.deviceManufacturerCode = deviceManufacturerCode;\r\n    this.components = cloneDeep(components);\r\n  }\r\n}\r\n\r\nmodule.exports = Device;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/Device.js\n// module id = 105\n// module chunks = 0","const OcfGroup = require('../models/OcfGroup');\r\n\r\nfunction mapToGroup(res) {\r\n  return new OcfGroup(res);\r\n}\r\n\r\nfunction mapToGroupList(groups) {\r\n  return groups.map(group => new OcfGroup(group));\r\n}\r\n\r\nmodule.exports = { mapToGroup, mapToGroupList };\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/OcfGroupMapper.js\n// module id = 106\n// module chunks = 0","const StCloudAgent = require('./StCloudAgent');\r\nconst Location = require('../models/Location');\r\nconst GroupManager = require('./OcfGroupManager');\r\nconst Group = require('../models/OcfGroup');\r\nconst isEmpty = require('lodash/isEmpty');\r\nconst { getListIterator, getServerConfig, filterFloat } = require('../common/util');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\nconst LOCATION_ID_REGEXP = /^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$/;\r\n\r\n\r\n/**\r\n * Location manager. Call init() before use.\r\n */\r\nclass LocationManager {\r\n  /**\r\n   * Setup config object which contains connection information.\r\n   * @param {Object} config config object\r\n   */\r\n  constructor(config) {\r\n    this.config = config;\r\n    this.validIdRegExp = LOCATION_ID_REGEXP;\r\n  }\r\n\r\n  /**\r\n   * Initialize a location manager\r\n   * @param {CloudAgent} agent cloud connector\r\n   */\r\n  init(agent) {\r\n    const { accessToken } = this.config;\r\n    const serverConfig = getServerConfig(this.config, 'stCloud');\r\n    this.agent = agent || new StCloudAgent(accessToken, serverConfig);\r\n  }\r\n\r\n  /**\r\n   * Validate location id\r\n   * @param {string} id The ID of the location.\r\n   * @returns {boolean} If the id is valid, return true. Otherwise return false.\r\n   */\r\n  isValidId(id) {\r\n    return this.validIdRegExp.test(id);\r\n  }\r\n\r\n\r\n  /**\r\n   * Create new location\r\n   * @param {string} name A nickname given for the location (eg. Home)\r\n   * @param {string} [countryCode] An ISO Alpha-3 country code. (i.e. GBR, USA)\r\n   * @param {string|number} [latitude] A geographical latitude. (i.e 10.0, '10.0')\r\n   * @param {string|number} [longitude] A geographical longitude. (i.e 10.0, '10.0')\r\n   * @param {number<integer>} [regionRadius] The radius in meters around latitude and longitude\r\n   * which defines this location.\r\n   * @param {string<\"F\"|\"C\">} [temperatureScale] The desired temperature scale used within location.\r\n   * @returns {Promise<Location|error>}\r\n   * A promise to be resolved with created location. Or to be rejected with an error.\r\n   */\r\n  createLocation(name, countryCode, latitude, longitude, regionRadius, temperatureScale) {\r\n    if (!name) return Promise.reject(new StError('NO_LOCATION_NAME'));\r\n    if (!countryCode) return Promise.reject(new StError('NO_COUNTRY_CODE'));\r\n    if (latitude && !filterFloat(latitude)) return Promise.reject(new StError('INVALID_LATITUDE'));\r\n    if (latitude > 90 || latitude < -90) return Promise.reject(new StError('INVALID_LATITUDE_NUMBER'));\r\n    if (longitude && !filterFloat(longitude)) return Promise.reject(new StError('INVALID_LONGITUDE'));\r\n    if (longitude > 180 || longitude < -180) return Promise.reject(new StError('INVALID_LONGITUDE_NUMBER'));\r\n    if (regionRadius && !Number.isInteger(regionRadius)) return Promise.reject(new StError('INVALID_REGION_RADIUS'));\r\n    if (temperatureScale && temperatureScale !== 'C' && temperatureScale !== 'F') {\r\n      return Promise.reject(new StError('INVALID_TEMPERATURE_SCALE'));\r\n    }\r\n\r\n    const param = { name, countryCode };\r\n    if (latitude) param.latitude = latitude;\r\n    if (longitude) param.longitude = longitude;\r\n    if (regionRadius) param.regionRadius = regionRadius;\r\n    if (temperatureScale) param.temperatureScale = temperatureScale;\r\n\r\n    return this.agent.createLocation(param)\r\n      .then(result => new Location(result));\r\n  }\r\n\r\n  /**\r\n   * Update specified location. All of the parameters are optional except id,\r\n   * and only the specified fields will be updated.\r\n   * @param {string} id The ID of the location\r\n   * @param {string} [name] A nickname for the location.\r\n   * @param {string|number} [latitude] A geographical latitude. (i.e 10.0, '10.0')\r\n   * @param {string|number} [longitude] A geographical latitude. (i.e 10.0, '10.0')\r\n   * @param {number<integer>} [regionRadius] The radius in meters around latitude and longitude\r\n   * which defines this location.\r\n   * @param {string<\"F\"|\"C\">} [temperatureScale] The desired temperature scale used within location.\r\n   * @returns {Promise<Location|error>}\r\n   * A promise to be resolved with updated location. Or to be rejected with an error.\r\n   */\r\n  updateLocation(id, name, latitude, longitude, regionRadius, temperatureScale) {\r\n    if (!id) return Promise.reject(new StError('NO_LOCATION_ID'));\r\n    if (!this.isValidId(id)) return Promise.reject(new StError('INVALID_LOCATION_ID'));\r\n    if (latitude && !filterFloat(latitude)) return Promise.reject(new StError('INVALID_LATITUDE'));\r\n    if (latitude > 90 || latitude < -90) return Promise.reject(new StError('INVALID_LATITUDE_NUMBER'));\r\n    if (longitude && !filterFloat(longitude)) return Promise.reject(new StError('INVALID_LONGITUDE'));\r\n    if (longitude > 180 || longitude < -180) return Promise.reject(new StError('INVALID_LONGITUDE_NUMBER'));\r\n    if (regionRadius && !Number.isInteger(regionRadius)) return Promise.reject(new StError('INVALID_REGION_RADIUS'));\r\n    if (temperatureScale && temperatureScale !== 'C' && temperatureScale !== 'F') {\r\n      return Promise.reject(new StError('INVALID_TEMPERATURE_SCALE'));\r\n    }\r\n\r\n    return this.retrieveLocation(id).then((location) => {\r\n      const param = {};\r\n      param.name = name || location.name;\r\n      param.latitude = (typeof latitude === 'number' && !Number.isNaN(latitude)) ? latitude : location.latitude;\r\n      param.longitude = (typeof longitude === 'number' && !Number.isNaN(longitude)) ? longitude : location.longitude;\r\n      param.regionRadius = (typeof regionRadius === 'number' && !Number.isNaN(regionRadius)) ? regionRadius : location.regionRadius;\r\n      param.temperatureScale = temperatureScale || location.temperatureScale;\r\n      if (isEmpty(param)) return Promise.reject(new StError('EMPTY_PARAMETER'));\r\n      return this.agent.updateLocation(id, param);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get location list\r\n   * @returns {Promise<Array<Location>|error>}\r\n   * A promise to be resolved with location list. Or to be rejected with an error.\r\n   */\r\n  retrieveLocationList() {\r\n    return getListIterator([], '', false, this.agent, 'getLocationList');\r\n  }\r\n\r\n  /**\r\n   * Get a location\r\n   * @param {string} id The id of location.\r\n   * @returns {Promise<Location|error>}\r\n   * A promise to be resolved with created location. Or to be rejected with an error.\r\n   */\r\n  retrieveLocation(id) {\r\n    if (!id) return Promise.reject(new StError('NO_LOCATION_ID'));\r\n    if (!this.isValidId(id)) return Promise.reject(new StError('INVALID_LOCATION_ID'));\r\n    return this.agent.getLocation(id)\r\n      .then(result => new Location(result));\r\n  }\r\n\r\n  /**\r\n   * Delete a location\r\n   * @param {string} id  The id of location.\r\n   * @returns {Promise<undefined|error>}\r\n   * A promise to be just resolved. Or to be rejected with an error.\r\n   */\r\n  deleteLocation(id) {\r\n    if (!id) return Promise.reject(new StError('NO_LOCATION_ID'));\r\n    if (!this.isValidId(id)) return Promise.reject(new StError('INVALID_LOCATION_ID'));\r\n\r\n    const gm = new GroupManager(this.config);\r\n    gm.init();\r\n\r\n    return gm.retrieveGroup(id)\r\n      .catch(() => undefined)\r\n      .then((group) => {\r\n        // NOTE. if group type is 'Private', it means that it is default group\r\n        if (group && group.type === Group.TYPE.PRIVATE) throw new StError('CANNOT_DELETE_DEFAULT_LOCATION', group.name);\r\n        return this.agent.deleteLocation(id);\r\n      })\r\n      .then(() => undefined);\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(LocationManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/LocationManager.js\n// module id = 107\n// module chunks = 0","\r\n/**\r\n * Model that contains location data\r\n * @property {string} locationId The ID of the location\r\n * @property {string} name A nickname for the location.\r\n * @property {number<float>} latitude A geographical latitude.\r\n * @property {number<float>} longitude A geographical latitude.\r\n * @property {number<integer>} regionRadius The radius in meters around latitude and longitude\r\n * which defines this location.\r\n * @property {string<\"F\"|\"C\">} temperatureScale The desired temperature scale used within location.\r\n */\r\nclass Location {\r\n  /**\r\n   * @param {object} param The object that has a location properties.\r\n   */\r\n  constructor(param) {\r\n    this.locationId = param.locationId;\r\n    this.name = param.name;\r\n    this.latitude = param.latitude;\r\n    this.longitude = param.longitude;\r\n    this.regionRadius = param.regionRadius;\r\n    this.temperatureScale = param.temperatureScale;\r\n    this.timeZoneId = param.timeZoneId;\r\n  }\r\n}\r\n\r\nmodule.exports = Location;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/Location.js\n// module id = 108\n// module chunks = 0","const ManifestPresentationResource = require('../models/ManifestPresentationResource');\r\nconst ManifestVoiceResource = require('../models/ManifestVoiceResource');\r\n\r\nfunction mapToPresentationManifest(resp) {\r\n  if (!resp) return null;\r\n  return new ManifestPresentationResource(resp);\r\n}\r\n\r\nfunction mapToVoiceResource(resp) {\r\n  if (!resp) return null;\r\n  return new ManifestVoiceResource(resp);\r\n}\r\n\r\nfunction mapToManifestResourceList(data, type, exceptStatus) {\r\n  if (!data || data.length < 1) return null;\r\n  const manifestList = [];\r\n  let manifestType = type;\r\n  if (type === 'ui' || type === 'presentation') manifestType = 'presentation';\r\n  data.forEach((res) => {\r\n    const userData = JSON.parse(res.userData);\r\n    const obj = {\r\n      mnmn: userData.mnmn,\r\n      vid: userData.vid,\r\n      version: userData.version,\r\n      type: userData.type,\r\n      workflowId: res.workflowId,\r\n      uid: res.uid,\r\n      status: res.status,\r\n      region: userData.region,\r\n    };\r\n    if (!manifestType || manifestType === userData.type) {\r\n      if (res.status && res.status !== exceptStatus) manifestList.push(obj);\r\n    }\r\n  });\r\n  return manifestList.sort((a, b) => {\r\n    const vidA = a.vid.toUpperCase();\r\n    const vidB = b.vid.toUpperCase();\r\n    let comparison = 0;\r\n    if (vidA > vidB) {\r\n      comparison = 1;\r\n    } else if (vidA < vidB) {\r\n      comparison = -1;\r\n    }\r\n    return comparison;\r\n  });\r\n}\r\n\r\n\r\nmodule.exports = { mapToPresentationManifest, mapToManifestResourceList, mapToVoiceResource };\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/ManifestMapper.js\n// module id = 109\n// module chunks = 0","/**\r\n * Representing a UI=Presentation Manifest(meta-data) resource\r\n *\r\n * @property {string} n name\r\n * @property {string} version version\r\n * @property {number} type meta-data type\r\n * @property {string} mnmn manufacturer name\r\n * @property {string} vid meta-data Id\r\n * @property {object} iconUrl icon URL info.\r\n * @property {object} ms main states\r\n * @property {object} ma main actions\r\n * @property {object} dpResources detail page resourses\r\n * @property {object} dpInfo detail page info\r\n * @property {LanguageResource} language language info\r\n */\r\nclass ManifestPresentationResource {\r\n  /**\r\n   * @param {Object} obj Response object\r\n   */\r\n  constructor(obj) {\r\n    this.n = obj.n;\r\n    this.mnmn = obj.mnmn;\r\n    this.vid = obj.vid;\r\n    this.version = obj.version;\r\n    this.type = obj.type;\r\n    this.dpResources = obj.dpResources;\r\n    this.dpInfo = obj.dpInfo;\r\n    this.language = obj.language;\r\n    this.ms = obj.ms;\r\n    this.ma = obj.ma;\r\n    this.iconUrl = obj.iconUrl;\r\n    this.workflowId = obj.workflowId;\r\n    this.uid = obj.uid;\r\n    this.status = obj.status;\r\n    this.region = obj.region;\r\n  }\r\n}\r\nmodule.exports = ManifestPresentationResource;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/ManifestPresentationResource.js\n// module id = 110\n// module chunks = 0","/**\r\n * Representing a Voice Manifest(meta-data) resource\r\n *\r\n * @property {string} n name\r\n * @property {string} mnmn manufacturer name\r\n * @property {string} vid version Id\r\n * @property {string} version version\r\n * @property {object} dalias device alias\r\n * @property {object} dtype device Type\r\n * @property {object} cts cts\r\n * @property {object} sml sml\r\n * @property {LanguageResource} language language info\r\n */\r\nclass ManifestVoiceResource {\r\n  /**\r\n   * @param {Object} obj Response object\r\n   */\r\n  constructor(obj) {\r\n    this.n = obj.n;\r\n    this.mnmn = obj.mnmn;\r\n    this.vid = obj.vid;\r\n    this.version = obj.version;\r\n    this.dalias = obj.dalias;\r\n    this.dtype = obj.dtype;\r\n    this.cts = obj.cts;\r\n    this.sml = obj.sml;\r\n  }\r\n}\r\nmodule.exports = ManifestVoiceResource;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/ManifestVoiceResource.js\n// module id = 111\n// module chunks = 0","const Promise = require('bluebird');\r\nconst uuid = require('uuid/v4');\r\nconst IotCloudClient = require('./IotCloudClient');\r\nconst DeviceProfileManager = require('./DeviceProfileManager');\r\nconst DeviceProfile = require('../models/DeviceProfile');\r\nconst IotConsoleAgent = require('./IotConsoleAgent');\r\nconst { getServerConfig } = require('../common/util');\r\nconst CertManager = require('./CertManager');\r\nconst StError = require('../errors/StError');\r\nconst OcfLogManager = require('./OcfLogManager');\r\nconst IotCloudServer = require('./IotCloudServer');\r\nconst fs = require('./FileSystemHandler');\r\nconst path = require('path');\r\nconst DeviceResourceManager = require('./DeviceResourceManager');\r\nconst getClassLogger = require('../common/getClassLogger');\r\nconst EventEmitter = require('events');\r\n\r\nconst DEVICE_TYPE = {\r\n  UNKNOWN: 'UNKNOWN',\r\n  SDK: 'SDK',\r\n  LOGGER: 'LOGGER',\r\n};\r\n\r\nclass OcfDeviceManager extends EventEmitter {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @constructor\r\n   * @param {Object} config The Configuration of the IoTCloudAgent, User Account and Device info.\r\n   */\r\n  constructor(config) {\r\n    super();\r\n    this.config = config || {};\r\n  }\r\n\r\n  init(client, clientKeyPath, clientCertPath) {\r\n    if (client) {\r\n      this.client = client;\r\n      return;\r\n    }\r\n\r\n    const iotCloudConfig = getServerConfig(this.config, 'iotCloud');\r\n    const iotConsoleConfig = getServerConfig(this.config, 'iotConsole');\r\n    const authProviderConfig = getServerConfig(this.config, 'authProvider');\r\n\r\n    if (clientKeyPath && clientCertPath) {\r\n      iotCloudConfig.clientKey = fs.readFileSync(path.resolve(clientKeyPath));\r\n      iotCloudConfig.clientCert = fs.readFileSync(path.resolve(clientCertPath));\r\n    } else {\r\n      const cm = new CertManager(this.config);\r\n      cm.init();\r\n      const { key, cert } = cm.getDeviceKeyCert();\r\n      iotCloudConfig.clientKey = key;\r\n      iotCloudConfig.clientCert = cert;\r\n    }\r\n\r\n    const clientConfig = {\r\n      iotCloud: iotCloudConfig,\r\n      iotConsole: iotConsoleConfig,\r\n      authProvider: authProviderConfig,\r\n      ssoToken: this.config.ssoToken,\r\n      authCode: this.config.authCode,\r\n      accessToken: this.config.accessToken,\r\n      userId: this.config.userId,\r\n      deviceId: this.config.deviceId,\r\n    };\r\n\r\n    this.client = new IotCloudClient(clientConfig);\r\n    this.client.on('debug', msg => this.emit('debug', msg));\r\n\r\n    this.clientKey = iotCloudConfig.clientKey;\r\n    this.clientCert = iotCloudConfig.clientCert;\r\n  }\r\n\r\n  /**\r\n   * Send a command to device.\r\n   * @param {string} di A device id to send a command.\r\n   * @param {string} href An URI of resource in device.\r\n   * @param {object} args A representation of command.\r\n   * @param {string} [prefix] An URI prefix to route resource.\r\n   * @param {string} [rt] A resource type.\r\n   * @param {string} [interf] An interface.\r\n   * @returns {Promise.<undefined|Error>}\r\n   * A promise that is just resolved or rejected with an error.\r\n   */\r\n  commandDevice(di, href, args, prefix, rt, interf) {\r\n    return this.client.connect()\r\n      .then(() => this.client.commandDevice(di, href, args, prefix, rt, interf))\r\n      .finally(() => this.client.disconnect());\r\n  }\r\n\r\n  /**\r\n   * Delete a device from user account.\r\n   * @param {string} di A device id to delete.\r\n   * @param {boolean} isClient A flag to check device list before sending delete request.\r\n   * @returns {Promise.<undefined|Error>}\r\n   * A promise that is just resolved or rejected with an error.\r\n   */\r\n  deleteDevice(di, isClient) {\r\n    return this.client.connect()\r\n      .then(() => this.client.deleteDevice(di, isClient))\r\n      .finally(() => this.client.disconnect());\r\n  }\r\n\r\n  /**\r\n   * Retrieves device's detail.\r\n   * @param {string} di the device Id to retrieve.\r\n   * @param {boolean} [checkStatus] Weather SDK request(check) device status or not.\r\n   * @returns {(Promise.<OcfDevice|string>)}\r\n   * A promise is resolved with OcfDevice or rejuected with an error.\r\n   */\r\n  retrieveDevice(di, checkStatus) {\r\n    return this.client.connect()\r\n    .then(() => this.client.retrieveDevice(di, checkStatus))\r\n    .finally(() => this.client.disconnect());\r\n  }\r\n\r\n  /**\r\n   * Retrieves device status.\r\n   * @param {string} di the device Id to retrieve.\r\n   * @param {string} uri the resource uri to retrieve.\r\n   * @returns {(Promise.<object>)}\r\n   * A promise is resolved with status or rejected with an error.\r\n   */\r\n  retrieveStatus(di, uri) {\r\n    return this.client.connect()\r\n    .then(() => this.client.retrieveStatus(di, uri))\r\n    .finally(() => this.client.disconnect());\r\n  }\r\n\r\n  /**\r\n   * Retrieves device list.\r\n   * @param {boolean} [checkStatus] Weather SDK request(check) device status or not.\r\n   * @param {object} [searchCriteria] Search criteria for listing device.\r\n   * Multiple properties works as 'AND' operation.\r\n   * @param {string} [searchCriteria.mnmn] The device's mnmn.\r\n   * @param {string} [searchCriteria.rt] The device's rt.\r\n   * @param {string} [searchCriteria.vid] The devices' vid.\r\n   * @param {string} [searchCriteria.name] The device's name. It means 'n' or 'nick'.\r\n   * @returns {(Promise.<OcfDevice[]|string>)}\r\n   * A promise is resolved with array of OcfDevice or rejected with an error.\r\n   */\r\n  retrieveDeviceList(checkStatus, searchCriteria) {\r\n    return this.client.connect()\r\n    .then(() => this.client.retrieveDeviceList(checkStatus, searchCriteria))\r\n    .finally(() => this.client.disconnect());\r\n  }\r\n\r\n  /**\r\n   * Retrieves client device list.\r\n   * @returns {(Promise.<OcfDevice[]|string>)}\r\n   * A promise is resolved with array of OcfDevice or rejected with an error.\r\n   */\r\n  retrieveClientDeviceList() {\r\n    return this.client.connect()\r\n    .then(() => this.client.retrieveClientDeviceList())\r\n    .then((clients) => {\r\n      const { userId, deviceId } = this.config;\r\n      return OcfLogManager.getLogDeviceList(userId)\r\n        .then(loggers => clients.map((c) => {\r\n          const device = { id: c, type: DEVICE_TYPE.UNKNOWN };\r\n          if (device.id === deviceId) device.type = DEVICE_TYPE.SDK;\r\n          if (loggers.includes(device.id)) device.type = DEVICE_TYPE.LOGGER;\r\n          return device;\r\n        }));\r\n    })\r\n    .finally(() => this.client.disconnect());\r\n  }\r\n\r\n  /**\r\n   * Publishes device via SSO token. The token is used to get authCode.\r\n   * @param {string} ssoToken The SSO token to publish device.\r\n   * @param {string} [deviceId] The id of the device to publish.\r\n   * If specified, it deletes existing device.\r\n   * If not specified, it generates random uuid.\r\n   * @param {DeviceProfile} deviceProfile  The device profile\r\n   * to generate publish information.\r\n   * @param {string} [userDeviceName]  The user device name which will override\r\n   * the name of device profile\r\n   * @returns {Promise<undefined|error>}\r\n   * A promise is just resolved or rejected with an error string.\r\n   */\r\n  publishDeviceBySsoToken(ssoToken, deviceId, deviceProfile, userDeviceName) {\r\n    const prerequisites = deviceId ? this.deleteDevice(deviceId) : Promise.resolve();\r\n    const publishDeviceId = deviceId || uuid();\r\n    const serverConfig = getServerConfig(this.config, 'iotConsole');\r\n    const iotConsoleAgent = new IotConsoleAgent(this.config, serverConfig);\r\n    iotConsoleAgent.init();\r\n    iotConsoleAgent.on('debug', msg => this.emit('debug', msg));\r\n\r\n    return prerequisites\r\n      .then(() => iotConsoleAgent.getAuthCodeBySsoToken(ssoToken, publishDeviceId))\r\n      .then(authCode => this.publishDevice(authCode, publishDeviceId, deviceProfile,\r\n        userDeviceName));\r\n  }\r\n\r\n  static generateDeviceProfile(deviceProfile, deviceId, userDeviceName, deviceMnmn) {\r\n    const result = {\r\n      devices: [],\r\n    };\r\n    if (deviceProfile instanceof DeviceProfile) {\r\n      let rt;\r\n      if (deviceProfile.metadata.ocfDeviceType) {\r\n        rt = deviceProfile.metadata.ocfDeviceType;\r\n      } else if (deviceProfile.metadata.deviceType) {\r\n        const dtype = DeviceResourceManager.retrieveDeviceType(deviceProfile.metadata.deviceType);\r\n        rt = dtype ? dtype.ocfDeviceType : deviceProfile.name;\r\n      } else {\r\n        rt = deviceProfile.name;\r\n      }\r\n      // TODO: This checking is required?\r\n\r\n      const device = {\r\n        di: deviceId,\r\n        n: userDeviceName || deviceProfile.name,\r\n        nick: userDeviceName || deviceProfile.name,\r\n        mnmn: deviceMnmn || deviceProfile.metadata.mnmn,\r\n        vid: deviceProfile.metadata.vid,\r\n        rt,\r\n      };\r\n\r\n      if (deviceProfile.metadata.mnmo) device.mnmo = deviceProfile.metadata.mnmo;\r\n      if (deviceProfile.metadata.mnpv) device.mnpv = deviceProfile.metadata.mnpv;\r\n      if (deviceProfile.metadata.mnos) device.mnos = deviceProfile.metadata.mnos;\r\n      if (deviceProfile.metadata.mnhw) device.mnhw = deviceProfile.metadata.mnhw;\r\n      if (deviceProfile.metadata.mnfv) device.mnfv = deviceProfile.metadata.mnfv;\r\n\r\n      result.devices.push(device);\r\n    } else {\r\n      throw new StError('UNSUPPORTED_DEVICE_PROFILE_TYPE');\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Publishes device via authCode.\r\n   * @param {string} authCode The authCode to publish device.\r\n   * @param {string} deviceId The id of the device to publish.\r\n   * @param {DeviceProfile} deviceProfile  The device profile\r\n   * to generate publish information.\r\n   * @param {string} [userDeviceName]  The user device name which will override\r\n   * the name of device profile\r\n   * @returns {Promise<undefined|error>}\r\n   * A promise is just resolved or rejected with an error.\r\n   */\r\n  publishDevice(authCode, deviceId, deviceProfile, userDeviceName) {\r\n    const deviceMnmn = this.config.mnid;\r\n    const di = deviceId || uuid();\r\n\r\n    return DeviceProfileManager.generateOcfDeviceTypeFromDeviceProfile(deviceProfile, deviceMnmn)\r\n      .then((ocfDeviceType) => {\r\n        const iotCloudConfig = getServerConfig(this.config, 'iotCloud');\r\n        const iotConsoleConfig = getServerConfig(this.config, 'iotConsole');\r\n        const authProviderConfig = getServerConfig(this.config, 'authProvider');\r\n\r\n        iotCloudConfig.clientKey = this.clientKey;\r\n        iotCloudConfig.clientCert = this.clientCert;\r\n        const config = {\r\n          iotCloud: iotCloudConfig,\r\n          authProvider: authProviderConfig,\r\n          iotConsole: iotConsoleConfig,\r\n          ssoToken: this.config.ssoToken,\r\n          authCode,\r\n        };\r\n        const target = {\r\n          deviceId: di,\r\n          ocfDeviceType,\r\n        };\r\n        if (userDeviceName) target.nick = userDeviceName;\r\n\r\n        const server = new IotCloudServer(target, config);\r\n        server.on('debug', msg => this.emit('debug', msg));\r\n        return server.publish().then(() => server.stop());\r\n      })\r\n      .then(() => ({ id: di, name: deviceProfile.name }));\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(OcfDeviceManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/OcfDeviceManager.js\n// module id = 112\n// module chunks = 0","/**\r\n * Data model that contains OcfDevice state log infomation\r\n *\r\n * @property {string} time state change time\r\n * @property {string} di device's id\r\n * @property {string} message device's log message for state, change, etc..\r\n\r\n */\r\nclass OcfLog {\r\n  constructor(time, di, message) {\r\n    this.time = time;\r\n    this.di = di;\r\n    this.message = message;\r\n  }\r\n}\r\nmodule.exports = OcfLog;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/OcfLog.js\n// module id = 113\n// module chunks = 0","const os = require('os');\r\nconst path = require('path');\r\nconst cp = require('child-process-es6-promise');\r\nconst xml = require('xml2js');\r\nconst Promise = require('bluebird');\r\nconst adbkit = require('adbkit');\r\nconst getRoot = require('../common/util').getRoot;\r\nconst fs = require('./FileSystemHandler');\r\nconst ProjectConfigurator = require('./ProjectConfigurator');\r\nconst { getServerConfig } = require('../common/util');\r\nconst IotConsoleAgent = require('./IotConsoleAgent');\r\nconst StError = require('../errors/StError');\r\nconst AdbController = require('./AdbController');\r\nconst getClassLogger = require('../common/getClassLogger');\r\nconst Configurator = require('./Configurator');\r\nconst ProjectManager = require('./ProjectManager');\r\n\r\nconst APP_DEST_PATH = '/sdcard/sideloading';\r\nconst MANIFEST_DEST_PATH = `${APP_DEST_PATH}/manifest`;\r\nconst PLUGIN_DEST_PATH = `${APP_DEST_PATH}/plugin`;\r\nconst PPK_DEST_PATH = `${PLUGIN_DEST_PATH}/ppks`;\r\n// const CATALOG_DEST_PATH = `${APP_DEST_PATH}/catalog`;\r\n\r\nconst SIMULATOR_FILE_NAME = 'st-sim';\r\nconst VIRTUAL_DEVICE_FILE_NAME = 'st-vdl';\r\n// const CATALOG_FILE_NAME = 'catalog.json';\r\n// const DEST_CATALOG_FILE_NAME = '3rd_catalog_sideloading.json';\r\nconst SCAPP_TESTMODE_DIR = '/data/local/tmp/samsung.iot.test_enable';\r\nconst ADB_INTENT_NAME = 'com.samsung.android.oneconnect.dev_restart';\r\n\r\nfunction getSimulatorDirPath() {\r\n  let simulatorPath = path.resolve(getRoot(), '../../../launcher/simulator');\r\n  if (!fs.existsSync(simulatorPath)) {\r\n    simulatorPath = path.resolve(os.homedir(), '.iotcloud/tools/launcher/simulator');\r\n  }\r\n  return simulatorPath;\r\n}\r\n\r\nfunction getVirtualDeviceDirPath() {\r\n  let virtualDevicePath = path.resolve(getRoot(), '../../../launcher/virtual-device');\r\n  if (!fs.existsSync(virtualDevicePath)) {\r\n    virtualDevicePath = path.resolve(os.homedir(), '.iotcloud/tools/launcher/virtual-device');\r\n  }\r\n  return virtualDevicePath;\r\n}\r\n\r\nfunction getExecFile(execFileName) {\r\n  return (os.platform() === 'win32') ? `${execFileName}.cmd` : `./${execFileName}`;\r\n}\r\n\r\nfunction getUIManifestFilename(findDir, isPass) {\r\n  return fs.readDir(findDir)\r\n    .then(files => files.filter(file => file.includes(ProjectConfigurator.UI_MANIFEST_FILE)))\r\n    .then((manifestNames) => {\r\n      if (!manifestNames) {\r\n        if (isPass) return Promise.resolve();\r\n        throw new StError('CANNOT_FIND_UI_MANIFEST_FILE');\r\n      }\r\n      return manifestNames[0];\r\n    });\r\n}\r\n\r\nclass OneAppController {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @constructor\r\n   * @param {Object} config The Configuration of the ssoToken, AuthProvider\r\n   */\r\n  constructor(config) {\r\n    this.config = config || {};\r\n  }\r\n\r\n  /**\r\n   * kill oneapp-simulator\r\n   *\r\n   * @param {string} [simulatorPath] path of oneapp-simulator launch file(st-sim)\r\n   * @returns {(Promise.<Object>|Error)}\r\n   *   A promise to be resolved with Object including result code, stdout or rejected with an Error\r\n   */\r\n  static terminateSimulator(simulatorPath = getSimulatorDirPath()) {\r\n    const execFile = getExecFile(SIMULATOR_FILE_NAME);\r\n    const execPath = path.resolve(simulatorPath, execFile);\r\n    return fs.exists(execPath).then((exists) => {\r\n      if (!exists) return Promise.reject(new StError('CANNOT_FIND_SIMULATOR', execPath));\r\n      return cp.spawn(execFile, ['terminate'], { cwd: simulatorPath });\r\n    });\r\n  }\r\n\r\n   /**\r\n   * kill virtual-device\r\n   *\r\n   * @param {string} [virtualDevicePath] path of virtual-device launch file(st-vdl)\r\n   * @returns {(Promise.<Object>|Error)}\r\n   *   A promise to be resolved with Object including result code, stdout or rejected with an Error\r\n   */\r\n  static terminateVirtualDevice(virtualDevicePath = getVirtualDeviceDirPath()) {\r\n    const execFile = getExecFile(VIRTUAL_DEVICE_FILE_NAME);\r\n    const execPath = path.resolve(virtualDevicePath, execFile);\r\n    return fs.exists(execPath).then((exists) => {\r\n      if (!exists) return Promise.reject(new StError('CANNOT_FIND_VIRTUAL_DEVICE', execPath));\r\n      return cp.spawn(execFile, ['terminate'], { cwd: virtualDevicePath });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * install oneapp-simulator with given param\r\n   *\r\n   * @param {string} [configName=cli] Caller to lauch Virtual Device\r\n   * @param {string} [projectPath=process.cwd()] root path of project(ppk, ui Manifest) has located\r\n   * @param {string} [simulatorPath] root path of oneapp-simulator launch file(st-sim)\r\n   * @returns {(Promise.<Object>|Error)}\r\n   *   A promise to be resolved with Object including result code, stdout or rejected with an Error\r\n   */\r\n  installApplicationToSimulator(configName = 'cli', projectPath = process.cwd(),\r\n    simulatorPath = getSimulatorDirPath()) {\r\n    const userId = this.config.userId;\r\n    if (!userId) return Promise.reject(new StError('NO_USER_ID'));\r\n    const execFile = getExecFile(SIMULATOR_FILE_NAME);\r\n    const execFullPath = path.resolve(simulatorPath, execFile);\r\n    let dpUri;\r\n    const projManager = new ProjectManager(this.config);\r\n\r\n    function installManifestFiles() {\r\n      return getUIManifestFilename(path.resolve(projectPath, 'out'))\r\n      .then((uiManifestFilename) => {\r\n        const splitedUiManifestName = uiManifestFilename.split('_');\r\n        const mnmn = splitedUiManifestName[0];\r\n        const vid = splitedUiManifestName.slice(1, splitedUiManifestName.length - 1).join('_');\r\n        if (!vid || !mnmn) return Promise.reject(new StError('CANNOT_FIND_UI_MANIFEST_FILE_BY_NAME'));\r\n        const uiManifestName = `${mnmn}_${vid}_${ProjectConfigurator.UI_MANIFEST_FILE}`;\r\n        const uiManifestPath = path.resolve(projectPath, 'out', uiManifestName);\r\n\r\n        return fs.readFile(uiManifestPath)\r\n        .then((content) => {\r\n          const uiManifestContent = JSON.parse(content);\r\n          dpUri = uiManifestContent.dpInfo.find(info => info.os === 'android').dpUri;\r\n        })\r\n        .then(() => {\r\n          // If the manifestPath has (), st-sim.cmd encounters syntax error.\r\n          // So in case of windows, It passes path wraped by quates to st-sim.cmd.\r\n          if (os.platform() === 'win32') {\r\n            return cp.spawn(execFile, ['install', '--config-name', configName, '--ui-manifest', `\"${uiManifestPath}\"`], { cwd: simulatorPath, windowsVerbatimArguments: true });\r\n          }\r\n          return cp.spawn(execFile, ['install', '--config-name', configName, '--ui-manifest', uiManifestPath], { cwd: simulatorPath });\r\n        });\r\n      });\r\n    }\r\n\r\n    function installDevicePluginFile() {\r\n      const manifestPath = path.resolve(projectPath, ProjectConfigurator.PLUGIN_DIR,\r\n        ProjectConfigurator.PLUGIN_MANIFEST_FILE);\r\n      return fs.readFile(manifestPath)\r\n        .then((manifest) => {\r\n          const parser = new xml.Parser();\r\n          const parseXmlStr = Promise.promisify(parser.parseString);\r\n          return parseXmlStr(manifest);\r\n        })\r\n        .then((manifestDoc) => {\r\n          const manifestAttrs = manifestDoc.manifest.$;\r\n          const pkgPath = path.resolve(projectPath, 'out',\r\n            `${manifestAttrs.package}_${manifestAttrs.versionName}.ppk`);\r\n\r\n          return fs.exists(pkgPath)\r\n            .then((exist) => {\r\n              if (!exist) throw new StError('CANNOT_FIND_PPK_FILE', pkgPath);\r\n              // If the manifestPath has (), st-sim.cmd encounters syntax error.\r\n              // So in case of windows, It passes path wraped by quates to st-sim.cmd.\r\n              if (os.platform() === 'win32') {\r\n                return cp.spawn(execFile, ['install', '--config-name', configName, '--ppk',\r\n                  `\"${pkgPath}\"`], { cwd: simulatorPath, windowsVerbatimArguments: true });\r\n              }\r\n              return cp.spawn(execFile,\r\n                ['install', '--config-name', configName, '--ppk', pkgPath], { cwd: simulatorPath });\r\n            });\r\n        });\r\n    }\r\n\r\n    return ProjectConfigurator.retrieveConfig(projectPath)\r\n      .then((prjConfig) => {\r\n        projManager.initForOneAppController(projectPath, prjConfig);\r\n        return projManager.isbuiltProject();\r\n      })\r\n      .then((built) => {\r\n        if (!built) return projManager.buildProject(projectPath);\r\n        return Promise.resolve();\r\n      })\r\n      .then(() => {\r\n        const pluginPath = path.resolve(projectPath, ProjectConfigurator.PLUGIN_DIR);\r\n        let resultManifest = {};\r\n        return fs.exists(execFullPath)\r\n          .then((exists) => {\r\n            if (!exists) throw new StError('CANNOT_FIND_SIMULATOR', execFullPath);\r\n            return installManifestFiles();\r\n          })\r\n          .then((result) => {\r\n            resultManifest = result;\r\n            return fs.exists(pluginPath);\r\n          })\r\n          .then((ext) => {\r\n            if (ext) return installDevicePluginFile();\r\n            if (dpUri === ProjectConfigurator.ANDROID_GENERIC_DEVICE_PLUGIN_URI) {\r\n              return resultManifest; // do nothing in this case. requested by j0.kim\r\n            }\r\n            throw new StError('CANNOT_FIND_PLUGINFOLDER', pluginPath);\r\n          });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * launch oneapp-simulator with given param\r\n   *\r\n   * @param {string} [configName=cli] Caller to lauch Virtual Device\r\n   * @param {string} [simulatorPath] path of oneapp-simulator launch file(st-sim)\r\n   * @returns {(Promise.<Object>|Error)}\r\n   *   A promise to be resolved with Object including result code, stdout or rejected with an Error\r\n   */\r\n  launchSimulator(configName = 'cli', simulatorPath = getSimulatorDirPath()) {\r\n    const execFile = getExecFile(SIMULATOR_FILE_NAME);\r\n    const execFullPath = path.resolve(simulatorPath, execFile);\r\n    const configPath = path.resolve(os.homedir(), `.iotcloud/${configName}/config.json`);\r\n    const configurator = new Configurator(configPath);\r\n    configurator.init();\r\n\r\n    if (!fs.existsSync(execFullPath)) return Promise.reject(new StError('CANNOT_FIND_SIMULATOR', execFullPath));\r\n    if (!fs.existsSync(configPath)) return Promise.reject(new StError('CANNOT_FIND_CONFIG_FILE', configPath));\r\n\r\n    const config = configurator.getConfig();\r\n    if (!config.userId) return Promise.reject(new StError('NO_USER_ID'));\r\n    if (!config.deviceId) return Promise.reject(new StError('NO_DEVICE_ID'));\r\n    if (!this.config.authProvider.uri) return Promise.reject(new StError('NO_AUTH_PROVIDER_URI'));\r\n    // const iotConsoleServerConfig = getServerConfig(this.config, 'iotConsole');\r\n    // const iotConsoleAgent = new IotConsoleAgent(this.config, iotConsoleServerConfig);\r\n    // return iotConsoleAgent.getAuthCodeBySsoToken(config.ssoToken, config.deviceId)\r\n    //   .catch((err) => {\r\n    //     if (err.code === 'INVALID_SSO_TOKEN') throw new StError('SIGN_IN_EXPIRED_TOKEN');\r\n    //     throw err;\r\n    //   })\r\n    //   .then(() => cp.spawn(execFile, ['run', '--config-name', configName], { cwd: simulatorPath }));\r\n    return cp.spawn(execFile, ['run', '--config-name', configName], { cwd: simulatorPath });\r\n  }\r\n\r\n  /**\r\n   * launch virtual-device\r\n   * @param {string} [configName=cli] Caller to lauch Virtual Device\r\n   * @param {string} [virtualDevicePath] root path of virtualDevice launch file(st-vd)\r\n   * @returns {(Promise.<Object>|Error)}\r\n   *   A promise to be resolved with Object including result code, stdout or rejected with an Error\r\n   */\r\n  launchVirtualDevice(configName = 'cli', virtualDevicePath = getVirtualDeviceDirPath()) {\r\n    const execFile = getExecFile(VIRTUAL_DEVICE_FILE_NAME);\r\n    const execFullPath = path.resolve(virtualDevicePath, execFile);\r\n    const configPath = path.resolve(os.homedir(), `.iotcloud/${configName}/config.json`);\r\n    const configurator = new Configurator(configPath);\r\n    configurator.init();\r\n\r\n    if (!fs.existsSync(execFullPath)) return Promise.reject(new StError('CANNOT_FIND_VIRTUAL_DEVICE', execFullPath));\r\n    if (!fs.existsSync(configPath)) return Promise.reject(new StError('CANNOT_FIND_CONFIG_FILE', configPath));\r\n\r\n    const config = configurator.getConfig();\r\n    if (!config.userId) return Promise.reject(new StError('NO_USER_ID'));\r\n    if (!config.deviceId) return Promise.reject(new StError('NO_DEVICE_ID'));\r\n    if (!this.config.authProvider.uri) return Promise.reject(new StError('NO_AUTH_PROVIDER_URI'));\r\n    // const iotConsoleServerConfig = getServerConfig(this.config, 'iotConsole');\r\n    // const iotConsoleAgent = new IotConsoleAgent(this.config, iotConsoleServerConfig);\r\n    // return iotConsoleAgent.getAuthCodeBySsoToken(config.ssoToken, config.deviceId)\r\n    //   .catch((err) => {\r\n    //     if (err.code === 'INVALID_SSO_TOKEN') throw new StError('SIGN_IN_EXPIRED_TOKEN');\r\n    //     throw err;\r\n    //   })\r\n    //   .then(() => cp.spawn(execFile, ['run', '--config-name', configName], { cwd: virtualDevicePath }));\r\n    return cp.spawn(execFile, ['run', '--config-name', configName], { cwd: virtualDevicePath });\r\n  }\r\n\r\n  /**\r\n   * push a input file(ui manifest json or ppk) file to destination path in device\r\n   *\r\n   * @param {string} [projectPath=process.cwd()] root path of project(ppk, ui manifest) has located\r\n   * @param {boolean} [isDevicePlugin=false] whether to push only deviceplugin(ppk, plugin) file\r\n   * @param {boolean} [isManifest=false] whether to push only ui manifest file\r\n   * @param {boolean} [isCatalog=false] whether to push only catalog file\r\n\r\n   * @returns {(Promise.<Object>|Error)}\r\n   *   A promise to be resolved with Object including result code, stdout or rejected with an Error\r\n   */\r\n  installApplicationToDevice(projectPath = process.cwd(),\r\n    serial, isDevicePlugin, isManifest, isCatalog) {\r\n    const mnid = this.config.mnid;\r\n    let isPass = false;\r\n    let dpUri;\r\n    const adbController = new AdbController(this.config);\r\n    const projManager = new ProjectManager(this.config);\r\n\r\n    function pushManifestFile(selectedDevice, client) {\r\n      return getUIManifestFilename(path.resolve(projectPath, 'out'), isPass)\r\n        .then((uimanifestName) => {\r\n          if (!uimanifestName && isPass) return Promise.resolve();\r\n          const splitedUiManifestName = uimanifestName.split('_');\r\n          const mnmn = splitedUiManifestName[0];\r\n          const vid = splitedUiManifestName.slice(1, splitedUiManifestName.length - 1).join('_');\r\n\r\n          if (mnmn !== mnid) throw new StError('UNMATCHED_MNID');\r\n          if (!vid) throw new StError('NO_VID_IN_MANIFEST');\r\n\r\n          const uiManifestName = `${mnid}_${vid}_${ProjectConfigurator.UI_MANIFEST_FILE}`;\r\n          const voiceManifestName = `${mnid}_${vid}_${ProjectConfigurator.VOICE_MANIFEST_FILE}`;\r\n          const uiManifestPath = path.resolve(projectPath, 'out', uiManifestName);\r\n          const voiceManifestPath = path.resolve(projectPath, 'out', voiceManifestName);\r\n\r\n          return fs.exists(uiManifestPath)\r\n            .then((extUI) => {\r\n              if (!extUI) {\r\n                if (isPass) return Promise.resolve();\r\n                throw new StError('CANNOT_FIND_UI_MANIFEST_FILE_BY_PATH', uiManifestPath);\r\n              }\r\n              return fs.readFile(uiManifestPath);\r\n            })\r\n            .then((content) => {\r\n              if (!content && isPass) return Promise.resolve();\r\n              const uiManifestContent = JSON.parse(content);\r\n              if (uiManifestContent.vid !== vid) throw new StError('UNMATCHED_VID');\r\n              dpUri = uiManifestContent.dpInfo.find(info => info.os === 'android').dpUri;\r\n\r\n              return client.push(selectedDevice.id, uiManifestPath, `${MANIFEST_DEST_PATH}/${uiManifestName}`)\r\n                .then(transfer => new Promise((resolve, reject) => {\r\n                  transfer.on('end', () => resolve());\r\n                  transfer.on('error', () => reject(new StError('INSTALL_APP_FAIL_PUSH', uiManifestPath)));\r\n                }));\r\n            })\r\n            .then(() => fs.exists(voiceManifestPath))\r\n            .then((extVoice) => {\r\n              if (!extVoice) return Promise.resolve();\r\n              return client.push(selectedDevice.id, voiceManifestPath, `${MANIFEST_DEST_PATH}/${voiceManifestName}`)\r\n                .then(transfer => new Promise((resolve, reject) => {\r\n                  transfer.on('end', () => resolve());\r\n                  transfer.on('error', () => reject(new StError('INSTALL_APP_FAIL_PUSH', voiceManifestPath)));\r\n                }));\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    function pushDevicePlugin(selectedDevice, client) {\r\n      const manifestPath = path.resolve(projectPath, ProjectConfigurator.PLUGIN_DIR,\r\n        ProjectConfigurator.PLUGIN_MANIFEST_FILE);\r\n      return fs.exists(manifestPath)\r\n        .then((exist) => {\r\n          if (!exist) {\r\n            if (isPass) return Promise.resolve();\r\n            throw new StError('CANNOT_FIND_MANIFEST_XML');\r\n          }\r\n          return fs.readFile(manifestPath)\r\n          .then((manifest) => {\r\n            const parser = new xml.Parser();\r\n            const parseXmlStr = Promise.promisify(parser.parseString);\r\n            return parseXmlStr(manifest);\r\n          })\r\n          .then((manifestDoc) => {\r\n            if (!manifestDoc || !manifestDoc.manifest || !manifestDoc.manifest.plugin) {\r\n              throw new StError('INVALID_MANIFEST_XML', ProjectConfigurator.PLUGIN_DIR);\r\n            }\r\n            const manifestAttrs = manifestDoc.manifest.$;\r\n            const ppkName = `${manifestAttrs.package}_${manifestAttrs.versionName}.ppk`;\r\n            const ppkPath = path.resolve(projectPath, 'out', ppkName);\r\n            const pluginName = `${manifestAttrs.package}.plugin`;\r\n            const pluginPath = path.resolve(projectPath, 'out', pluginName);\r\n\r\n            if (!fs.existsSync(ppkPath)) {\r\n              if (!isPass) throw new StError('CANNOT_FIND_PPK_FILE', ppkPath);\r\n              return Promise.resolve();\r\n            }\r\n            return client.push(selectedDevice.id, pluginPath, `${PLUGIN_DEST_PATH}/${pluginName}`)\r\n              .then(transfer => new Promise((resolve, reject) => {\r\n                transfer.on('end', () => resolve());\r\n                transfer.on('error', () => reject(new StError('INSTALL_APP_FAIL_PUSH', pluginPath)));\r\n              }))\r\n              .then(() => client.push(selectedDevice.id, ppkPath, `${PPK_DEST_PATH}/${ppkName}`))\r\n              .then(transfer => new Promise((resolve, reject) => {\r\n                transfer.on('end', () => resolve());\r\n                transfer.on('error', () => reject(new StError('INSTALL_APP_FAIL_PUSH', ppkPath)));\r\n              }));\r\n          });\r\n        });\r\n    }\r\n\r\n    // TODO: Below code will be used.\r\n    // function pushCatalog() {\r\n    //   const catalogPath = pathUtil.resolve(projectPath, 'out', CATALOG_FILE_NAME);\r\n    //   return fs.exists(catalogPath)\r\n    //     .then((extCatalog) => {\r\n    //       if (!extCatalog) {\r\n    //         if (isPass) return Promise.resolve();\r\n    //         throw new StError('CANNOT_FIND_CATALOG_FILE', catalogPath);\r\n    //       }\r\n    //       return cp.spawn(adbFileName,\r\n    // ['push', catalogPath, `${CATALOG_DEST_PATH}/${DEST_CATALOG_FILE_NAME}`], { cwd: adbPath });\r\n    //     });\r\n    // }\r\n\r\n    return ProjectConfigurator.retrieveConfig(projectPath)\r\n      .then((prjConfig) => {\r\n        projManager.initForOneAppController(projectPath, prjConfig);\r\n        return projManager.isbuiltProject();\r\n      })\r\n      .then((built) => {\r\n        if (!built) return projManager.buildProject(projectPath);\r\n        return Promise.resolve();\r\n      })\r\n      .then(() => {\r\n        const pluginPath = path.resolve(projectPath, ProjectConfigurator.PLUGIN_DIR);\r\n        return fs.exists(pluginPath);\r\n      })\r\n      .then((exist) => {\r\n        if (!exist) return Promise.resolve();\r\n        const files = fs.readDirSync(path.resolve(projectPath, 'out'));\r\n        const ppkFile = files.find(file => file.includes('.ppk'));\r\n        return projManager.verifyPackage(path.resolve(projectPath, 'out', ppkFile), true);\r\n      })\r\n      .then(() => fs.exists(adbController.getAdbCmd()).then((exists) => {\r\n        if (!exists) return Promise.reject(new StError('CANNOT_FIND_ADB_FILE', adbController.getAdbCmd()));\r\n        const client = adbController.getClient();\r\n        let selectedDevice = null;\r\n        return Promise.resolve()\r\n          .then(() => adbController.getDevice(serial).then((device) => {\r\n            selectedDevice = device;\r\n            return Promise.resolve();\r\n          }))\r\n          .then(() => {\r\n            if (!isDevicePlugin && !isManifest && !isCatalog) {\r\n              isPass = true;\r\n            } else {\r\n              isPass = false;\r\n            }\r\n            return Promise.resolve()\r\n              .then(() => {\r\n                if (!isManifest && !isPass) return Promise.resolve();\r\n                return pushManifestFile(selectedDevice, client);\r\n              })\r\n              .then(() => {\r\n                if (!isDevicePlugin && !isPass) return Promise.resolve();\r\n                if (dpUri === ProjectConfigurator.ANDROID_GENERIC_DEVICE_PLUGIN_URI) {\r\n                  // NOTE. Generic Device Plugin will be downloaed automatically\r\n                  return Promise.resolve();\r\n                }\r\n                return pushDevicePlugin(selectedDevice, client);\r\n              });\r\n              // .then(() => {\r\n              //   if (!isCatalog && !isPass) return Promise.resolve();\r\n              //   return pushCatalog();\r\n              // });\r\n          })\r\n          .then(() => {\r\n            if (!Configurator.isProductionMode(this.config)) {\r\n              return client.shell(selectedDevice.id, `mkdir ${SCAPP_TESTMODE_DIR}`);\r\n            }\r\n            return Promise.resolve();\r\n          })\r\n          .then(() => {\r\n            let command = '';\r\n            if (mnid) {\r\n              command = `am broadcast -a ${ADB_INTENT_NAME} --es MN-ID ${mnid}`;\r\n            } else {\r\n              command = `am broadcast -a ${ADB_INTENT_NAME}`;\r\n            }\r\n            return client.shell(selectedDevice.id, `${command} 1> /dev/null 2> /dev/null && echo $?`)\r\n            .then(adbkit.util.readAll)\r\n            .then((result) => {\r\n              const stdOut = result.toString().split('\\n');\r\n              if (stdOut.indexOf('0') === -1) {\r\n                throw new StError('INSTALL_APP_FAIL_CMD', command);\r\n              }\r\n              return Promise.resolve();\r\n            });\r\n          });\r\n          // .finally(() => {\r\n          //   fs.exists(pluginPath).then((exist) => {\r\n          //     if (exist) fs.remove(pluginPath);\r\n          //   }); // TODO: remove plugin file\r\n          // });\r\n      }));\r\n  }\r\n}\r\nmodule.exports = new Proxy(OneAppController, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/OneAppController.js\n// module id = 114\n// module chunks = 0","const adbkit = require('adbkit');\r\nconst os = require('os');\r\nconst pathUtil = require('path');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\nfunction getAdbCmd(config) {\r\n  const adbPath = config.adbPath;\r\n  if (!adbPath) return Promise.reject(new StError('NO_ADB_PATH'));\r\n  const adbFileName = (os.platform() === 'win32') ? 'adb.exe' : './adb';\r\n  const adb = pathUtil.resolve(adbPath, adbFileName);\r\n\r\n  return adb;\r\n}\r\nclass AdbController {\r\n  constructor(config) {\r\n    this.config = config;\r\n    this.adbCmd = getAdbCmd(config);\r\n    this.client = adbkit.createClient({ bin: this.adbCmd });\r\n  }\r\n\r\n  getDevice(deviceSerial = '') {\r\n    return this.client.listDevices()\r\n      .then((devices) => {\r\n        const length = devices.length;\r\n        if (deviceSerial) {\r\n          const foundDevice = devices.find(device => device.id === deviceSerial);\r\n          if (foundDevice) {\r\n            return foundDevice;\r\n          }\r\n          throw new StError('ADB_CONTROLLER_NO_DEVICE_SERIAL');\r\n        }\r\n        if (length === 1) {\r\n          return devices[0];\r\n        } else if (length === 0) {\r\n          throw new StError(new Error('ADB_CONTROLLER_NO_DEVICE'));\r\n        }\r\n        throw new StError(new Error('ADB_CONTROLLER_MANY_DEVICE'));\r\n      });\r\n  }\r\n\r\n  getAdbCmd() {\r\n    return this.adbCmd;\r\n  }\r\n\r\n  getClient() {\r\n    return this.client;\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(AdbController, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/AdbController.js\n// module id = 115\n// module chunks = 0","/**\r\n * Data model that contains template information\r\n *\r\n * @param {string} id Template id\r\n * @param {string} name Template name\r\n * @param {string} description Template description\r\n * @param {string} deviceProfile related device profile ID\r\n */\r\nclass TemplateInfo {\r\n  /**\r\n   * @param {string} tid Template id\r\n   * @param {string} name Template name\r\n   * @param {string} description Template description\r\n   */\r\n  constructor(id, name, description, deviceProfile) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.description = description;\r\n    this.deviceProfile = deviceProfile;\r\n  }\r\n}\r\n\r\nmodule.exports = TemplateInfo;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/TemplateInfo.js\n// module id = 116\n// module chunks = 0","module.exports = require(\"jszip\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jszip\"\n// module id = 117\n// module chunks = 0","const pathUtil = require('path');\r\nconst Promise = require('bluebird');\r\nconst Emitter = require('events');\r\nconst cp = require('child-process-es6-promise');\r\n\r\nconst fs = require('./FileSystemHandler');\r\nconst ProjectConfigurator = require('./ProjectConfigurator');\r\nconst archiveBuilder = require('../common/archiveBuilder');\r\nconst { getSmallUuid } = require('../common/util');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\n\r\nconst LAMBDA_ZIP_FILE_NAME = 'lambda.zip';\r\n\r\n\r\n/**\r\n * Controller that has a responsibility for building Lamabda App\r\n */\r\nclass LambdaAppBuilder extends Emitter {\r\n\r\n  constructor(parent, lambdaPath, outputPath) {\r\n    super();\r\n    this.parent = parent;\r\n    this.config = parent.config;\r\n    this.lambdaPath = lambdaPath;\r\n    this.outputPath = outputPath || pathUtil.resolve(process.cwd());\r\n  }\r\n\r\n\r\n  build() {\r\n    const emit = this.emit.bind(this);\r\n    const buildDir = pathUtil.join(this.outputPath, `build_${getSmallUuid()}`);\r\n\r\n    emit('progress', 'Processing Lambda Smart-App files...');\r\n    return fs.remove(this.outputPath)\r\n      .then(() => fs.makeDir(this.outputPath))\r\n      .then(() => {\r\n        emit('progress', '> Copying files to output directory...');\r\n        fs.copy(this.lambdaPath, buildDir);\r\n      })\r\n      .then(() => this.parent.retrieveLambdaConfig(pathUtil.dirname(this.lambdaPath)))\r\n      .then((lambdaConfig) => {\r\n        emit('progress', `> Lambda Runtime: ${lambdaConfig.runtime}`);\r\n        if (lambdaConfig.runtime.indexOf('nodejs') >= 0) {\r\n          emit('progress', '> Installing dependent NPM modules...');\r\n          return cp.spawn('npm', ['install'], { cwd: buildDir });\r\n        }\r\n        return Promise.resolve();\r\n      })\r\n      .then(() => fs.readDir(buildDir))\r\n      .then((files) => {\r\n        const paths = files.filter(file => file !== ProjectConfigurator.LAMBDA_CONFIG_FILE)\r\n          .map(file => pathUtil.join(buildDir, file));\r\n        if (paths.length === 0) throw new Error('no lambda function files');\r\n        emit('progress', `> Archiving files into ${LAMBDA_ZIP_FILE_NAME}...`);\r\n        return archiveBuilder.zip(this.outputPath, LAMBDA_ZIP_FILE_NAME, paths);\r\n      })\r\n      .finally(() => {\r\n        emit('progress', '> Cleaning up temporary build files...');\r\n        if (fs.existsSync(buildDir)) return fs.remove(buildDir);\r\n        return Promise.resolve();\r\n      });\r\n  }\r\n\r\n\r\n  clean() {\r\n    const emit = this.emit.bind(this);\r\n\r\n    emit('progress', 'Cleaning up Lambda Smart-App output files...');\r\n    if (fs.existsSync(this.outputPath)) return fs.remove(this.outputPath);\r\n    return Promise.resolve();\r\n  }\r\n}\r\n\r\nLambdaAppBuilder.LAMBDA_ZIP_FILE_NAME = LAMBDA_ZIP_FILE_NAME;\r\n\r\n\r\nmodule.exports = new Proxy(LambdaAppBuilder, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/LambdaAppBuilder.js\n// module id = 118\n// module chunks = 0","/**\r\n * Data model that contains Device Plugin information\r\n *\r\n * @property {string} modelCode Model code\r\n * @property {string} onboardingId Onboarding ID\r\n */\r\nclass DevicePlugin {\r\n  /**\r\n   * @param {string} manifestVersionCode Plugin manifest version code\r\n   * @param {string} packageName Plugin package name\r\n   * @param {string} versionCode Plugin version code\r\n   * @param {string} versionName Plugin version name\r\n   * @param {string} minPluginSdkVersion Minimum Plugin SDK version\r\n   * @param {object} plugin Plugin information\r\n   * @param {object} privilegeLevel Plugin privilege information\r\n   */\r\n  constructor(packageName, versionName) {\r\n    this.package = packageName;\r\n    this.versionName = versionName;\r\n    this.manifestVersionCode = '0';\r\n    this.versionCode = '1';\r\n    this.minPluginSdkVersion = '1.0.0';\r\n    this.plugin = {\r\n      label: packageName,\r\n      icon: 'icon.png',\r\n      device: {\r\n        type: 'none',\r\n        subType: 'none',\r\n        manufacturer: 'none',\r\n        manufacturerID: 'none',\r\n      },\r\n    };\r\n    this.privilegeLevel = {\r\n      level: 'public',\r\n    };\r\n  }\r\n\r\n\r\n  static createFromIotConsoleResp(resp) {\r\n    const result = new DevicePlugin(resp.pkgNm, resp.verNm);\r\n\r\n    result.versionCode = resp.verCd;\r\n    result.minPluginSdkVersion = resp.ppkPlfVer;\r\n    result.plugin.device.type = resp.dvcType;\r\n    result.plugin.device.subType = resp.dvcSubType;\r\n    return result;\r\n  }\r\n\r\n\r\n  static createFromManifestDoc(manifestDoc) {\r\n    const manifestAttrs = manifestDoc.manifest.$;\r\n    const result = new DevicePlugin(manifestAttrs.package, manifestAttrs.versionName);\r\n    result.versionCode = manifestAttrs.versionCode;\r\n    result.manifestVersionCode = manifestAttrs.manifestVersionCode;\r\n    result.minPluginSdkVersion = manifestAttrs.minPluginSdkVersion;\r\n\r\n    const pluginAttrs = manifestDoc.manifest.plugin[0].$;\r\n    result.plugin.label = pluginAttrs.label;\r\n    result.plugin.icon = pluginAttrs.icon;\r\n\r\n    const deviceAttrs = manifestDoc.manifest.plugin[0].device[0].$;\r\n    result.plugin.device.type = deviceAttrs.type;\r\n    result.plugin.device.subType = deviceAttrs.subType;\r\n    result.plugin.device.manufacturer = deviceAttrs.manufacturer;\r\n    result.plugin.device.manufacturerID = deviceAttrs.manufacturerID;\r\n\r\n    const privilegeLevelAttrs = manifestDoc.manifest.privilegeLevel[0].$;\r\n    result.privilegeLevel.level = privilegeLevelAttrs.level;\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nmodule.exports = DevicePlugin;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/DevicePlugin.js\n// module id = 119\n// module chunks = 0","const SmartApp = require('./SmartApp');\r\n\r\n/**\r\n * Data model for Smart-App\r\n *\r\n * @property {string} id Web Console Smart App ID\r\n * @property {SmartApp} appData Smart App Information\r\n * @property {string} status Smart App status\r\n */\r\nclass WebConsoleSmartApp {\r\n  /**\r\n   * @param {Object} response Response object\r\n   */\r\n  constructor(id, appData) {\r\n    this.id = id;\r\n    this.appData = appData;\r\n  }\r\n\r\n  static createFromResp(resp) {\r\n    const smartApp = new SmartApp({\r\n      appName: resp.appNm,\r\n      appId: resp.appId,\r\n      appType: resp.appTypeCd === 'SAT-LAMBDA' ? SmartApp.APP_TYPE.LAMBDA : SmartApp.APP_TYPE.WEBHOOK,\r\n      displayName: '',\r\n      description: resp.appDsc,\r\n      singleInstance: resp.multInstanceTypeCd !== 'SAM-MULTI',\r\n      owner: {\r\n        ownerId: resp.ownrId,\r\n      },\r\n    });\r\n    if (resp.appScopeList) {\r\n      smartApp.oauth = {\r\n        scope: resp.appScopeList.map(scope => scope.scopeNm),\r\n      };\r\n    }\r\n\r\n    if (smartApp.appType === SmartApp.APP_TYPE.LAMBDA) {\r\n      smartApp.lambdaSmartApp = {\r\n        functions: resp.tgtArnList.map(arn => arn.tgtArn),\r\n      };\r\n    } else if (smartApp.appType === SmartApp.APP_TYPE.WEBHOOK) {\r\n      smartApp.webhookSmartApp = {\r\n        targetUrl: resp.rgtUrl,\r\n        publicKey: resp.pubKey,\r\n      };\r\n    }\r\n\r\n    if (resp.appUi) {\r\n      smartApp.ui = {\r\n        pluginId: resp.appUi.plgnId,\r\n        dashboardCardsEnabled: resp.appUi.dasbdCardYn === 'Y',\r\n        preInstallDashboardCardsEnabled: resp.appUi.preInstDasbdCardYn === 'Y',\r\n      };\r\n    }\r\n\r\n    const result = new WebConsoleSmartApp(resp.appInfoId, smartApp);\r\n\r\n    if (resp.appSettingList) {\r\n      result.appSettings = {};\r\n      resp.appSettingList.forEach((item) => {\r\n        result.appSettings[item.settingKey] = item.settingValue;\r\n      });\r\n    }\r\n\r\n    result.status = resp.devStatNm;\r\n\r\n    return result;\r\n  }\r\n\r\n  static createFromAutomationResp(resp) {\r\n    const smartApp = new SmartApp({\r\n      appName: resp.appNm,\r\n      appId: resp.appRefUuId,\r\n      appType: resp.appTypeCd === 'SAT-LAMBDA' ? SmartApp.APP_TYPE.LAMBDA : SmartApp.APP_TYPE.WEBHOOK,\r\n      displayName: '',\r\n      description: resp.appDsc,\r\n      singleInstance: resp.multInstanceTypeCd !== 'SAM-MULTI',\r\n      owner: {\r\n        ownerId: resp.ownrId,\r\n      },\r\n    });\r\n    if (resp.appScopeList) {\r\n      smartApp.oauth = {\r\n        scope: resp.appScopeList.map(scope => scope.scopeNm),\r\n      };\r\n    }\r\n\r\n    if (smartApp.appType === SmartApp.APP_TYPE.LAMBDA) {\r\n      smartApp.lambdaSmartApp = {\r\n        functions: resp.tgtArnList.map(arn => arn.tgtArn),\r\n      };\r\n    } else if (smartApp.appType === SmartApp.APP_TYPE.WEBHOOK) {\r\n      smartApp.webhookSmartApp = {\r\n        targetUrl: resp.rgtUrl,\r\n      };\r\n    }\r\n\r\n    return new WebConsoleSmartApp(resp.appId, smartApp);\r\n  }\r\n\r\n\r\n  toCreateAutomationRequestBody() {\r\n    const multInstanceTypeCd = this.singleInstance ? 'SAM-SINGLE' : 'SAM-MULTI';\r\n    let appTypeCd = null;\r\n    let tgtArnList = null;\r\n    let tgtUrl = null;\r\n    if (this.appType === SmartApp.APP_TYPE.LAMBDA) {\r\n      appTypeCd = 'SAT-LAMBDA';\r\n      tgtArnList = (this.lambdaSmartApp ? this.lambdaSmartApp.functions : [])\r\n        .map(arn => ({ tgtArn: arn }));\r\n    } else if (this.appType === SmartApp.APP_TYPE.WEBHOOK) {\r\n      appTypeCd = 'SAT-WEBHOOK';\r\n      tgtUrl = this.webhookSmartApp ? this.tgtUrl.targetUrl : '';\r\n    }\r\n\r\n    const body = {\r\n      refAppId: this.appId,\r\n      appNm: this.appName,\r\n      appDsc: this.description,\r\n      appTypeCd,\r\n      multInstanceTypeCd,\r\n      tgtArnList,\r\n      tgtUrl,\r\n      appScopeList: this.oauth.scope.map(s => ({ scopeNm: s })),\r\n      ownerId: this.owner.ownerId,\r\n      publicKey: '',\r\n    };\r\n\r\n    return body;\r\n  }\r\n\r\n\r\n  toUpdateRequestBodyIotConsole() {\r\n    return this.toCreateRequestBodyIotConsole();\r\n  }\r\n}\r\n\r\nmodule.exports = WebConsoleSmartApp;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/WebConsoleSmartApp.js\n// module id = 120\n// module chunks = 0","/**\r\n * Data model that contains UI Manifest information\r\n *\r\n * @property {string} id Manifest ID\r\n * @property {string} n Manifest name\r\n * @property {string} type Manifest type\r\n * @property {string} version Manifest version\r\n * @property {string} mnmn Manufacturer Name or ID\r\n * @property {string} vid Vendor ID\r\n * @property {string} type Manifest type\r\n * @property {object} jsonData Manifest JSON data\r\n * @property {string} status Manifest status\r\n */\r\nclass WebConsoleManifest {\r\n  /**\r\n   * @param {string} n Manifest name\r\n   * @param {string} version Manifest version\r\n   * @param {string} mnmn Manufacturer Name or ID\r\n   * @param {string} vid Vendor ID\r\n   */\r\n  constructor(id, n, version, mnmn, vid, type) {\r\n    this.id = id;\r\n    this.n = n;\r\n    this.version = version;\r\n    this.mnmn = mnmn;\r\n    this.vid = vid;\r\n    this.type = type || 'CIT-UI';\r\n    this.status = null;\r\n    this.jsonData = null;\r\n  }\r\n\r\n\r\n  static createFromCloudConnectedResp(resp) {\r\n    const result = new WebConsoleManifest(resp.mtdtId, '', resp.verNm, resp.mnmn, resp.vid);\r\n    result.status = resp.devStatNm;\r\n    result.jsonData = JSON.parse(resp.mtdtJson);\r\n    result.n = result.jsonData.n;\r\n\r\n    return result;\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = WebConsoleManifest;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/WebConsoleManifest.js\n// module id = 121\n// module chunks = 0","const path = require('path');\r\nconst Emitter = require('events');\r\nconst Promise = require('bluebird');\r\n\r\nconst StError = require('../errors/StError');\r\nconst ProjectConfigurator = require('./ProjectConfigurator');\r\nconst ProjectGenerator = require('./ProjectGenerator');\r\nconst ProjectBuilder = require('./ProjectBuilder');\r\nconst Project = require('../models/Project');\r\nconst SmartApp = require('../models/SmartApp');\r\nconst AppCatalog = require('../models/AppCatalog');\r\nconst fs = require('./FileSystemHandler');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\n\r\n/**\r\n * Controller that has a responsibility for creating C2C projects\r\n */\r\nclass C2cProjectController extends Emitter {\r\n\r\n  constructor(parent) {\r\n    super(); // Emiiter\r\n    this.config = parent.config;\r\n    this.projectGenerator = parent.projectGenerator;\r\n  }\r\n\r\n\r\n  createProject(name, currDir, smartAppConfig, deviceProfileInfo, mainState, mainAction,\r\n    vid, pluginId, generatePlugin) {\r\n    const proj = new Project(name, Project.PROJ_TYPE.C2C);\r\n    const projPath = path.join(currDir, name);\r\n\r\n    try {\r\n      this.validateProjectInfo(name, projPath, smartAppConfig);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return fs.makeDir(projPath)\r\n      .then(() => this.generateSmartAppFile(projPath, smartAppConfig))\r\n      .then(() => this.projectGenerator.generateDeviceProfileFile(projPath, deviceProfileInfo, vid))\r\n      .then(deviceProfile => this.projectGenerator.generateManifestFiles(projPath, deviceProfile,\r\n        mainState, mainAction, pluginId))\r\n      .then(() => (generatePlugin ?\r\n        this.projectGenerator.generateDevicePluginFiles(projPath, pluginId) : null))\r\n      .then(() => this.generateCatalogFile(projPath, smartAppConfig.appName, name))\r\n      .then(() => ProjectConfigurator.generateConfig(projPath, proj))\r\n      .catch((err) => {\r\n        if (fs.existsSync(projPath)) fs.removeSync(projPath);\r\n        throw err;\r\n      });\r\n  }\r\n\r\n\r\n  createDefaultProject(name, currDir, deviceProfileInfo, mainState, mainAction, vid,\r\n    pluginId, generatePlugin, appName, appType, lambdaArns, targetUrl) {\r\n    // check options\r\n    C2cProjectController.validateProjectOptions(appName, appType, lambdaArns, targetUrl);\r\n\r\n    let smartAppConfig = null;\r\n    if (appType === SmartApp.APP_TYPE.LAMBDA) {\r\n      smartAppConfig = new SmartApp({\r\n        appName,\r\n        displayName: appName,\r\n        description: appName,\r\n        singleInstance: false,\r\n        appType,\r\n        lambdaSmartApp: { functions: lambdaArns },\r\n        ui: {\r\n          pluginId,\r\n          dashboardCardsEnabled: true,\r\n        },\r\n      });\r\n    } else if (appType === SmartApp.APP_TYPE.WEBHOOK) {\r\n      smartAppConfig = new SmartApp({\r\n        appName,\r\n        displayName: appName,\r\n        description: appName,\r\n        singleInstance: false,\r\n        appType: SmartApp.APP_TYPE.WEBHOOK,\r\n        webhookSmartApp: { targetUrl },\r\n        ui: {\r\n          pluginId,\r\n          dashboardCardsEnabled: true,\r\n        },\r\n      });\r\n    } else {\r\n      throw new StError('INVALID_APP_TYPE', appType);\r\n    }\r\n\r\n    return this.createProject(name, currDir, smartAppConfig, deviceProfileInfo,\r\n      mainState, mainAction, vid, pluginId, generatePlugin);\r\n  }\r\n\r\n\r\n  buildProject(projPath, projConfig) {\r\n    const emit = this.emit.bind(this);\r\n    const outputPath = path.join(projPath, projConfig.outputPath);\r\n    // const prodCatalogPath = path.join(projPath, ProjectConfigurator.PROD_CATALOG_FILE);\r\n    // const appCatalogPath = path.join(projPath, ProjectConfigurator.APP_CATALOG_FILE);\r\n\r\n    const projBuilder = new ProjectBuilder(this, projPath, projConfig);\r\n    projBuilder.on('progress', msg => emit('progress', msg));\r\n\r\n    if (!this.config.mnid) throw new Error('Login or Requesting MNID required!');\r\n\r\n    emit('start', projConfig.name);\r\n    if (!projBuilder.isUpdatedDeviceProfile()) emit('progress', 'Warning: device-profile was updated, please generate manifest if you need');\r\n    return fs.remove(outputPath)\r\n      .then(() => fs.makeDir(outputPath))\r\n      .then(() => projBuilder.buildDeviceProfileFile())\r\n      .then(deviceProfile => projBuilder.buildManifestFiles(deviceProfile.metadata.vid))\r\n      .then(() => fs.exists(path.join(projPath, ProjectConfigurator.PLUGIN_DIR)))\r\n      .then((exists) => {\r\n        if (exists) return projBuilder.buildPluginFiles();\r\n        return Promise.resolve();\r\n      });\r\n      /* .then(() => {\r\n        if (fs.existsSync(prodCatalogPath) && fs.existsSync(appCatalogPath)) {\r\n          return projBuilder.buildC2cCatalogFile(projPath);\r\n        }\r\n        return projBuilder.buildCatalogFile(projPath, Project.PROJ_TYPE.C2C);\r\n      }); */\r\n  }\r\n\r\n\r\n  generateSmartAppFile(projPath, smartAppConfig) { // eslint-disable-line\r\n    const filePath = path.join(projPath, ProjectConfigurator.SMART_APP_FILE);\r\n\r\n    return fs.writeFile(filePath, JSON.stringify(smartAppConfig, null, 2));\r\n  }\r\n\r\n\r\n  generateCatalogFile(projPath, name, modelCd) { // eslint-disable-line\r\n    const prodCatalogPath = path.join(projPath, ProjectConfigurator.PROD_CATALOG_FILE);\r\n    const appCatalogPath = path.join(projPath, ProjectConfigurator.APP_CATALOG_FILE);\r\n\r\n    const prodCatalog = {\r\n      modelCd,\r\n    };\r\n\r\n    const appCatalog = new AppCatalog({\r\n      appInternalName: name,\r\n      appType: AppCatalog.APP_TYPE.C2C,\r\n      localizations: {\r\n        'en-US': {\r\n          metadataDisplayName: name,\r\n        },\r\n      },\r\n    });\r\n\r\n    return fs.writeFile(prodCatalogPath, JSON.stringify(prodCatalog, null, 2))\r\n      .then(() => fs.writeFile(appCatalogPath, JSON.stringify(appCatalog, null, 2)));\r\n  }\r\n\r\n\r\n  static validateProjectOptions(appName, appType, lambdaArns, targetUrl) {\r\n    if (!appName) {\r\n      throw new StError('CREATE_PROJECT_APP_NAME_OPT_REQUIRED');\r\n    }\r\n    if (!appType) {\r\n      throw new StError('CREATE_PROJECT_APP_TYPE_OPT_REQUIRED');\r\n    }\r\n    if (!SmartApp.isValidAppType(appType)) {\r\n      throw new StError('INVALID_APP_TYPE', appType);\r\n    }\r\n    if (appType === SmartApp.APP_TYPE.LAMBDA && !lambdaArns) {\r\n      throw new StError('CREATE_PROJECT_LAMBDA_ARN_OPT_REQUIRED');\r\n    }\r\n    if (appType === SmartApp.APP_TYPE.WEBHOOK && !targetUrl) {\r\n      throw new StError('CREATE_PROJECT_TARGET_URL_OPT_REQUIRED');\r\n    }\r\n  }\r\n\r\n\r\n  validateProjectInfo(name, projPath, smartAppConfig) { // eslint-disable-line\r\n    ProjectGenerator.validateProjectInput(name, projPath);\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(C2cProjectController, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/C2cProjectController.js\n// module id = 122\n// module chunks = 0","const Promise = require('bluebird');\r\nconst InstalledSmartApp = require('../models/InstalledSmartApp');\r\nconst InstalledSmartAppConfig = require('../models/InstalledSmartAppConfig');\r\nconst StCloudAgent = require('./StCloudAgent');\r\nconst { getListIterator, getServerConfig } = require('../common/util');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\n// based on SmartThings API 0.1.93-SNAPSHOT\r\n\r\n/**\r\n * Controller that has a responsibility for manage Installed Smart-App\r\n */\r\nclass SmartAppInstManager {\r\n  /**\r\n   * Setup config object which contains connection information.\r\n   * @param {Object} config config object\r\n   */\r\n  constructor(config) {\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   * Initialize a Installed Smart-App manager\r\n   * @param {CloudAgent} agent cloud connector\r\n   */\r\n  init(agent) {\r\n    const { accessToken } = this.config;\r\n    const serverConfig = getServerConfig(this.config, 'stCloud');\r\n    this.agent = agent || new StCloudAgent(accessToken, serverConfig);\r\n  }\r\n\r\n  /**\r\n   * Install app\r\n   * @param {string} appId App Id\r\n   * @param {string} installedAppType\r\n   *   App type, one of 'LAMBDA_SMART_APP', 'WEBHOOK_SMART_APP', 'BEHAVIOR'\r\n   * @param {string} configurationStatus\r\n   *  Config status, one of 'STATED', 'DONE', 'AUTHORIZED', 'REVOKED'\r\n   * @param {Object} config Map from config name to array of ConfigEntry\r\n   * @param {string=} displayName Installed app display name\r\n   * @param {string=} referenceId Reference to an upstream system.\r\n   * @param {string=} locationId Location Id\r\n   * @returns {Promise.<Object>}\r\n   *  A promise to be resolved with Installed app and config detail\r\n   */\r\n  installApp(appId, installedAppType, configurationStatus, config,\r\n    displayName, referenceId, locationId) {\r\n    if (!appId) return Promise.reject(new StError('NO_APP_ID'));\r\n    if (!locationId) return Promise.reject(new StError('NO_LOCATION_ID'));\r\n    if (!installedAppType) return Promise.reject(new StError('NO_APP_TYPE'));\r\n    if (!configurationStatus) return Promise.reject(new StError('NO_CONFIGURATION_STATUS'));\r\n\r\n    const app = new InstalledSmartApp({\r\n      installedAppType,\r\n      displayName,\r\n      appId,\r\n      referenceId,\r\n      locationId,\r\n      configurationStatus,\r\n    });\r\n    const requestBody = app.toCreateRequestBody(config);\r\n\r\n    return this.agent.createInstalledApp(requestBody)\r\n      .then(({ installedApp, configurationDetail }) => {\r\n        const result = {\r\n          installedApp: new InstalledSmartApp(installedApp),\r\n          configurationDetail: new InstalledSmartAppConfig(configurationDetail),\r\n        };\r\n        return result;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Retrieve installed app list\r\n   * @param {string} locationId Location Id\r\n   * @param {string} appStatus Installed app's status, PENDING, AUTHORIZED, REVOKED or DISABLED\r\n   * @returns {Promise.<InstalledSmartApp[]>}\r\n   *   A promise to be resolved with array of InstalledSmartApp\r\n   */\r\n  retrieveInstalledAppList(locationId, appStatus) {\r\n    let promiseLocs;\r\n    if (locationId) {\r\n      promiseLocs = Promise.resolve([locationId]);\r\n    } else {\r\n      promiseLocs = getListIterator([], '', false, this.agent, 'getLocationList')\r\n        .then(locations => locations.map(loc => loc.locationId));\r\n    }\r\n    return promiseLocs\r\n      .reduce((list, locId) =>\r\n        getListIterator([], '', false, this.agent, 'getInstalledAppList', locId, appStatus)\r\n          .then(items => list.concat(items.map(item => new InstalledSmartApp(item))))\r\n      , []);\r\n  }\r\n\r\n  /**\r\n   * Retrieve installed app\r\n   * @param {string} installedAppId Installed app Id\r\n   * @returns {Promise.<InstalledSmartApp>} A promise to be resolved with InstalledSmartApp\r\n   */\r\n  retrieveInstalledApp(installedAppId) {\r\n    if (!installedAppId) return Promise.reject(new StError('NO_APP_NAME_OR_NO_APP_ID'));\r\n    return Promise.join(\r\n      this.agent.getInstalledApp(installedAppId),\r\n      getListIterator([], '', false, this.agent, 'getInstalledAppConfigList', installedAppId),\r\n      (app, configs) => new InstalledSmartApp(app, configs));\r\n  }\r\n\r\n  /**\r\n   * Uninstall installed app\r\n   * @param {string} installedAppId Installed app Id\r\n   * @returns {Promise.<undefined>} A promise to be resolved with undefined\r\n   */\r\n  uninstallApp(installedAppId) {\r\n    if (!installedAppId) return Promise.reject(new StError('NO_INSTALLED_APP_ID'));\r\n\r\n    return this.agent.deleteInstalledApp(installedAppId);\r\n  }\r\n\r\n  /**\r\n   * Retrieve installed app configuration\r\n   * @param {string} installedAppId Installed app Id\r\n   * @param {string} configurationId Installed app configuration Id\r\n   * @returns {Promise.<Object>} A promise to be resolved with configuration object\r\n   */\r\n  retrieveInstalledAppConfig(installedAppId, configurationId) {\r\n    if (!installedAppId) return Promise.reject(new StError('NO_APP_ID'));\r\n    if (!configurationId) return Promise.reject(new StError('NO_APP_CONFIGURATION_ID'));\r\n    return this.agent.getInstalledAppConfig(installedAppId, configurationId);\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = new Proxy(SmartAppInstManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/SmartAppInstManager.js\n// module id = 123\n// module chunks = 0","const isValidAppType = require('./SmartApp').isValidAppType;\r\nconst isValidConfigStatus = require('./InstalledSmartAppConfig').isValidConfigStatus;\r\nconst StError = require('../errors/StError');\r\n\r\n/**\r\n * Data model for Installed Smart-App\r\n *\r\n * @property {string} installedAppId Installed app Id\r\n * @property {string} installedAppType\r\n *   Installed app type, one of 'LAMBDA_SMART_APP', 'WEBHOOK_SMART_APP', 'BEHAVIOR'\r\n * @property {string} installedAppStatus Installed app status\r\n * @property {string} displayName Display name\r\n * @property {string} appId app Id\r\n * @property {string} referenceId Id for reference Upstream system\r\n * @property {string} locationId Installed location Id\r\n * @property {string} configurationStatus Installed app configuration status\r\n * @property {Object} owner Owner object, has 'ownerType' and 'ownerId'\r\n * @property {string} createdDate Created date\r\n * @property {string} lastUpdatedDate Updatd Date\r\n * @property {Array.<Object>} config Installed app's configuration list\r\n */\r\nclass InstalledSmartApp {\r\n  /**\r\n   * @param {Object} response Response object\r\n   */\r\n  constructor({ installedAppId, installedAppType, installedAppStatus, displayName,\r\n    appId, referenceId, locationId, configurationStatus, owner, createdDate, lastUpdatedDate },\r\n    configs) {\r\n    if (installedAppType && !isValidAppType(installedAppType)) {\r\n      throw new StError('INVALID_INSTALLED_APP_TYPE', installedAppType);\r\n    }\r\n    if (configurationStatus && !isValidConfigStatus(configurationStatus)) {\r\n      throw new StError('INVALID_CONFIGURATION_STATUS', configurationStatus);\r\n    }\r\n    this.installedAppId = installedAppId;\r\n    this.installedAppType = installedAppType;\r\n    this.installedAppStatus = installedAppStatus;\r\n    this.displayName = displayName;\r\n    this.appId = appId;\r\n    this.referenceId = referenceId;\r\n    this.locationId = locationId;\r\n    this.configurationStatus = configurationStatus;\r\n    this.owner = owner; // TODO: clone??\r\n    this.createdDate = createdDate;\r\n    this.lastUpdatedDate = lastUpdatedDate;\r\n    this.configs = configs || [];\r\n  }\r\n\r\n  /**\r\n   * Make request body for 'create installed app'\r\n   *\r\n   * @param {Object} config Config object\r\n   * @returns {Object} Request body object for create installed app\r\n   */\r\n  toCreateRequestBody(config) {\r\n    const body = {\r\n      appId: this.appId,\r\n      installedAppType: this.installedAppType,\r\n      configurationStatus: this.configurationStatus,\r\n    };\r\n    if (this.displayName) body.displayName = this.displayName;\r\n    if (this.referenceId) body.referenceId = this.referenceId;\r\n    if (this.locationId) body.locationId = this.locationId;\r\n    if (config) body.config = config;\r\n    return body;\r\n  }\r\n}\r\n\r\nmodule.exports = InstalledSmartApp;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/InstalledSmartApp.js\n// module id = 124\n// module chunks = 0","const SmartAppSchedule = require('../models/SmartAppSchedule');\r\nconst StCloudAgent = require('./StCloudAgent');\r\nconst { getServerConfig } = require('../common/util');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\n// based on SmartThings API 0.1.93-SNAPSHOT\r\n\r\n/**\r\n * Controller that has a responsibility for manage Smart-App Schedule\r\n */\r\nclass SmartAppSchManager {\r\n  /**\r\n   * Setup config object which contains connection information.\r\n   * @param {Object} config config object\r\n   */\r\n  constructor(config) {\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   * Initialize a Smart-App Schedule manager\r\n   * @param {CloudAgent} agent cloud connector\r\n   */\r\n  init(agent) {\r\n    const { accessToken } = this.config;\r\n    const serverConfig = getServerConfig(this.config, 'stCloud');\r\n    this.agent = agent || new StCloudAgent(accessToken, serverConfig);\r\n  }\r\n\r\n  /**\r\n   * Create schedule\r\n   * @param {string} installedAppId Installed app Id\r\n   * @param {string} name Schedule name\r\n   * @param {Object} scheduleDetail 'once' or 'cron' object\r\n   * @returns {Promise.<SmartAppSchedule>} A promise to be resolved with SmartAppSchedule\r\n   */\r\n  createSchedule(installedAppId, name, cronExpr, cronTimezone, onceTime, onceOverwrite) {\r\n    if (!installedAppId) return Promise.reject(new StError('NO_INSTALLED_APP_ID'));\r\n    if (!name) return Promise.reject(new StError('NO_SCHEDULE_NAME'));\r\n\r\n    let schedule;\r\n    if (cronExpr) {\r\n      const cron = {\r\n        expression: cronExpr,\r\n        timezone: cronTimezone || 'UTC',\r\n      };\r\n      schedule = new SmartAppSchedule({ name, cron });\r\n    } else if (onceTime) {\r\n      const once = {\r\n        time: onceTime,\r\n        overwrite: onceOverwrite || true,\r\n      };\r\n      schedule = new SmartAppSchedule({ name, once });\r\n    } else {\r\n      return Promise.reject(new StError('NO_SCHEDULE'));\r\n    }\r\n\r\n    return this.agent.createSchedule(installedAppId, schedule.toCreateRequestBody())\r\n      .then(response => new SmartAppSchedule(response));\r\n  }\r\n\r\n  /**\r\n   * Retrieve schedule list\r\n   * @param {string} installedAppId Installed app Id\r\n   * @returns {Promise.<SmartAppSchedule[]>}\r\n   *   A promise to be resolved with array of SmartAppSchedule\r\n   */\r\n  retrieveScheduleList(installedAppId) {\r\n    if (!installedAppId) return Promise.reject(new StError('NO_INSTALLED_APP_ID'));\r\n\r\n    const agent = this.agent;\r\n    function getScheduleListIterator(apps, url, isNext) {\r\n      const getList = isNext\r\n        ? agent.get(url)\r\n        : agent.getScheduleList(installedAppId);\r\n\r\n      return getList\r\n        .then(({ items, _links }) => {\r\n          if (items) {\r\n            items.forEach(item => apps.push(new SmartAppSchedule(item)));\r\n          }\r\n          if (_links && _links.next && _links.next.href) {\r\n            return getScheduleListIterator(apps, _links.next.href, true);\r\n          }\r\n          return apps;\r\n        });\r\n    }\r\n\r\n    return getScheduleListIterator([]);\r\n  }\r\n\r\n  /**\r\n   * Retrieve schedule\r\n   * @param {string} installedAppId Installed app Id\r\n   * @param {string} scheduleName Schedule name\r\n   * @returns {Promise.<SmartAppSchedule>} A promise to be resolved with SmartAppSchedule\r\n   */\r\n  retrieveSchedule(installedAppId, scheduleName) {\r\n    if (!installedAppId) return Promise.reject(new StError('NO_INSTALLED_APP_ID'));\r\n    if (!scheduleName) return Promise.reject(new StError('NO_SCHEDULE_NAME'));\r\n\r\n    return this.agent.getSchedule(installedAppId, scheduleName)\r\n      .then(response => new SmartAppSchedule(response));\r\n  }\r\n\r\n  /**\r\n   * Delete schedule\r\n   * @param {string} installedAppId Installed app Id\r\n   * @param {string} scheduleName Schedule name\r\n   * @returns {Promise.<undefined>} A promise to be resolved with undefined\r\n   */\r\n  deleteSchedule(installedAppId, scheduleName) {\r\n    if (!installedAppId) return Promise.reject(new StError('NO_INSTALLED_APP_ID'));\r\n    if (!scheduleName) return Promise.reject(new StError('NO_SCHEDULE_NAME'));\r\n\r\n    return this.agent.deleteSchedule(installedAppId, scheduleName);\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(SmartAppSchManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/SmartAppSchManager.js\n// module id = 125\n// module chunks = 0","/**\r\n * Data model for schedule\r\n *\r\n * @property {string} installedAppId Installed app Id\r\n * @property {string} name Schedule name\r\n * @property {Object} scheduledExecutions Scheduled executions\r\n * @property {Object} cron Details of 'cron' schedule\r\n * @property {Object} once Details of 'once' schedule\r\n */\r\nclass SmartAppSchedule {\r\n  /**\r\n   * @param {Object} response Response object\r\n   */\r\n  constructor({ installedAppId, name, scheduledExecutions, cron, once }) {\r\n    this.name = name;\r\n    this.installedAppId = installedAppId;\r\n    this.scheduledExecutions = scheduledExecutions;\r\n    if (cron) this.cron = cron;\r\n    if (once) this.once = once;\r\n  }\r\n\r\n  /**\r\n   * Make request body for 'create schedule'\r\n   *\r\n   * @returns {Object} Request body object for create schedule\r\n   */\r\n  toCreateRequestBody() {\r\n    const body = { name: this.name };\r\n    if (this.cron) body.cron = this.cron;\r\n    if (this.once) body.once = this.once;\r\n    return body;\r\n  }\r\n}\r\n\r\nmodule.exports = SmartAppSchedule;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/models/SmartAppSchedule.js\n// module id = 126\n// module chunks = 0","const SmartAppSubscription = require('../models/SmartAppSubscription');\r\nconst StCloudAgent = require('./StCloudAgent');\r\nconst { getServerConfig } = require('../common/util');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\n// based on SmartThings API 0.1.93-SNAPSHOT\r\n\r\n/**\r\n * Controller that has a responsibility for manage Smart-App Subscription\r\n */\r\nclass SmartAppSubManager {\r\n  /**\r\n   * Setup config object which contains connection information.\r\n   * @param {Object} config config object\r\n   */\r\n  constructor(config) {\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   * Initialize a Smart-App Subscription manager\r\n   * @param {CloudAgent} agent cloud connector\r\n   */\r\n  init(agent) {\r\n    const { accessToken } = this.config;\r\n    const serverConfig = getServerConfig(this.config, 'stCloud');\r\n    this.agent = agent || new StCloudAgent(accessToken, serverConfig);\r\n  }\r\n\r\n  /**\r\n   * Subscribe event\r\n   * @param {string} installedAppId Installed app Id\r\n   * @param {string} sourceType Type of subscription, one of 'DEVICE', 'CAPABILITY'\r\n   * @param {Object} details Details of subscription\r\n   * @returns {Promise.<SmartAppSubscription>} A promise to be resolved with number\r\n   */\r\n  subscribe(installedAppId, sourceType, details) {\r\n    if (!installedAppId) return Promise.reject(new StError('NO_INSTALLED_APP_ID'));\r\n    if (!sourceType) return Promise.reject(new StError('NO_SOURCE_TYPE'));\r\n\r\n    const subscription = new SmartAppSubscription({\r\n      installedAppId,\r\n      sourceType,\r\n      details,\r\n    });\r\n\r\n    return this.agent.createSubscription(installedAppId, subscription.toCreateRequestBody())\r\n      .then(response => new SmartAppSubscription(response));\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe event\r\n   * @param {string} installedAppId Installed app Id\r\n   * @param {string} subscriptionId Subscription Id\r\n   * @returns {Promise.<number>} A promise to be resolved with number\r\n   */\r\n  unsubscribe(installedAppId, subscriptionId) {\r\n    if (!installedAppId) return Promise.reject(new StError('NO_INSTALLED_APP_ID'));\r\n    if (!subscriptionId) return Promise.reject(new StError('NO_SUBSCRIPTION_ID'));\r\n\r\n    return this.agent.deleteSubscription(installedAppId, subscriptionId)\r\n      .then(({ count }) => count);\r\n  }\r\n\r\n  /**\r\n   * Retrieve subscription list\r\n   * @param {string} installedAppId Installed app Id\r\n   * @returns {Promise.<SmartAppSubscription[]>}\r\n   *   A promise to be resolved with array of SmartAppSubscription\r\n   */\r\n  retrieveSubscriptionList(installedAppId) {\r\n    if (!installedAppId) return Promise.reject(new StError('NO_INSTALLED_APP_ID'));\r\n\r\n    const agent = this.agent;\r\n    function getSubscriptionListIterator(apps, url, isNext) {\r\n      const getList = isNext\r\n        ? agent.get(url)\r\n        : agent.getSubscriptionList(installedAppId);\r\n\r\n      return getList\r\n        .then(({ items, _links }) => {\r\n          if (items) {\r\n            items.forEach(item => apps.push(new SmartAppSubscription(item)));\r\n          }\r\n          if (_links && _links.next && _links.next.href) {\r\n            return getSubscriptionListIterator(apps, _links.next.href, true);\r\n          }\r\n          return apps;\r\n        });\r\n    }\r\n\r\n    return getSubscriptionListIterator([]);\r\n  }\r\n\r\n  /**\r\n   * Retrieve subscription\r\n   * @param {string} installedAppId Installed app Id\r\n   * @param {string} subscriptionId Subscription Id\r\n   * @returns {Promise.<SmartAppSubscription>} A promise to be resolved with SmartAppSubscription\r\n   */\r\n  retrieveSubscription(installedAppId, subscriptionId) {\r\n    if (!installedAppId) return Promise.reject(new StError('NO_INSTALLED_APP_ID'));\r\n    if (!subscriptionId) return Promise.reject(new StError('NO_SUBSCRIPTION_ID'));\r\n\r\n    return this.agent.getSubscription(installedAppId, subscriptionId)\r\n      .then(response => new SmartAppSubscription(response));\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(SmartAppSubManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/SmartAppSubManager.js\n// module id = 127\n// module chunks = 0","const IotConsoleAgent = require('./IotConsoleAgent');\r\nconst { getServerConfig } = require('../common/util');\r\nconst getClassLogger = require('../common/getClassLogger');\r\nconst pathUtil = require('path');\r\n\r\nconst prefixType = 'PTC-';\r\nconst prefixStatus = 'CDS-';\r\n\r\nclass PluginManager {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @constructor\r\n   * @param {Object} config The Configuration of the IoTCloudAgent, User Account and Device info.\r\n   */\r\n  constructor(config) {\r\n    this.config = config;\r\n  }\r\n\r\n  init(agent) {\r\n    this.agent = agent ||\r\n      new IotConsoleAgent(this.config, getServerConfig(this.config, 'iotConsole'));\r\n  }\r\n\r\n  /**\r\n   * Register a plugin\r\n   * @param {string} ppkPath plugin File Path\r\n   * @param {string} pluginType plugin type search criteria {DEVICE|SERVICE}\r\n   * @returns {(Promise.<Object|Error>)}\r\n   */\r\n  registerPlugin(ppkPath, pluginType) {\r\n    const plgnType = prefixType.concat(pluginType.toUpperCase());\r\n    return this.agent.createPlugin(pathUtil.resolve(ppkPath), plgnType, 'CDS-ALPHA');\r\n  }\r\n\r\n  /**\r\n   * Unregister a plugin\r\n   * @param {string} pkgName package name ( = appid)\r\n   * @returns {(Promise.<undefined|Error>)}\r\n   */\r\n  unregisterPlugin(pkgName) {\r\n    return this.agent.removePlugin(pkgName);\r\n  }\r\n\r\n  /**\r\n   * Retrieves plugin list\r\n   * @param {string} [pkgName] package name ( = appid), search criteria\r\n   * @param {string} [pluginType] plugin type search criteria {DEVICE|SERVICE}\r\n   * @param {string} [status] plugin status search criteria {ALPHA|RC|GOLD|PUBLISHED|DRAFT|DEVELOP}\r\n   * @returns {Promise.<PluginResource[]|Error>} plugins\r\n   */\r\n  retrievePluginList(pkgName, pluginType, status) {\r\n    const plgnType = pluginType ? prefixType.concat(pluginType.toUpperCase()) : undefined;\r\n    const stat = status ? prefixStatus.concat(status.toUpperCase()) : undefined;\r\n    return this.agent.getPluginList(pkgName, plgnType, stat);\r\n  }\r\n\r\n  /**\r\n   * Retrieve a plugin\r\n   * @param {string} pkgName package name ( = appid)\r\n   * @returns {Promise.<PluginResource|Error>} plugin\r\n   */\r\n  retrievePlugin(pkgName) {\r\n    return this.agent.getPlugin(pkgName);\r\n  }\r\n}\r\n\r\nmodule.exports = new Proxy(PluginManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/PluginManager.js\n// module id = 128\n// module chunks = 0","const EventSource = require('eventsource');\r\nconst getClassLogger = require('../common/getClassLogger');\r\nconst StCloudAgent = require('./StCloudAgent');\r\nconst StError = require('../errors/StError');\r\nconst EventEmitter = require('events');\r\nconst { getServerConfig } = require('../common/util');\r\n\r\nconst LOCATION_EVENTS = [\r\n  'MODE_EVENT',\r\n  'SECURITY_ARM_STATE_EVENT',\r\n  'SECURITY_ARM_FAILURE_EVENT',\r\n  'LOCATION_LIFECYCLE_EVENT',\r\n  'PAID_SUBSCRIPTIONS_EVENT',\r\n  'HUB_HEALTH_EVENT',\r\n  'HUB_LIFECYCLE_EVENT',\r\n  'HUB_ZWAVE_STATUS',\r\n  'HUB_ZWAVE_EXCEPTION',\r\n  'HUB_ZWAVE_S2_AUTH_REQUEST',\r\n  'HUB_ZWAVE_SECURE_JOIN_RESULT',\r\n  'DEVICE_EVENT',\r\n  'DEVICE_LIFECYCLE_EVENT',\r\n  'DEVICE_JOIN_EVENT',\r\n  'DEVICE_HEALTH_EVENT',\r\n  'SMART_APP_EVENT',\r\n  'SMART_APP_DASHBOARD_CARD_EVENT',\r\n  'INSTALLED_APP_LIFECYCLE_EVENT',\r\n  'EXECUTION_RESULT_EVENT',\r\n];\r\n\r\nconst DEVICE_EVENTS = [\r\n  'DEVICE_EVENT',\r\n  'DEVICE_LIFECYCLE_EVENT',\r\n  'DEVICE_JOIN_EVENT',\r\n  'DEVICE_HEALTH_EVENT',\r\n];\r\n\r\nconst INSTALLEDSMARTAPP_EVENTS = [\r\n  'SMART_APP_EVENT',\r\n  'SMART_APP_DASHBOARD_CARD_EVENT',\r\n  'INSTALLED_APP_LIFECYCLE_EVENT',\r\n  'EXECUTION_RESULT_EVENT',\r\n];\r\n\r\nconst SMARTAPP_EVENTS = [\r\n  'INSTALLED_APP_LIFECYCLE_EVENT',\r\n  'EXECUTION_RESULT_EVENT',\r\n];\r\n\r\nfunction getFormattedDate() {\r\n  const date = new Date();\r\n  return `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\r\n}\r\n\r\nclass StLogManager extends EventEmitter {\r\n  constructor(config) {\r\n    super();\r\n    this.config = config;\r\n  }\r\n\r\n  init(agent) {\r\n    const serverConfig = getServerConfig(this.config, 'stCloud');\r\n    this.agent = agent || new StCloudAgent(this.config.accessToken, serverConfig);\r\n  }\r\n\r\n  emitLog(event) {\r\n    const formatted = `${getFormattedDate()} ${event.type} ${event.data}`;\r\n    this.emit('log', event, formatted);\r\n  }\r\n\r\n  registerEventHandlers(eventSource, type) {\r\n    eventSource.addEventListener('error', (event) => {\r\n      if (event.readyState === EventSource.CLOSED) {\r\n        this.emitLog({ type: 'SDK', data: 'connection closed' });\r\n      } else {\r\n        this.emitLog({ type: 'SDK', data: JSON.stringify(event) });\r\n      }\r\n    });\r\n\r\n    eventSource.addEventListener('CONTROL_EVENT', event => this.emitLog(event));\r\n    eventSource.addEventListener('message', event => this.emitLog(event));\r\n\r\n    switch (type) {\r\n      case 'LOCATIONIDS':\r\n        LOCATION_EVENTS.forEach(eventName =>\r\n          eventSource.addEventListener(eventName, event => this.emitLog(event)));\r\n        break;\r\n      case 'DEVICEIDS':\r\n        DEVICE_EVENTS.forEach(eventName =>\r\n          eventSource.addEventListener(eventName, event => this.emitLog(event)));\r\n        break;\r\n      case 'INSTALLEDSMARTAPPIDS':\r\n        INSTALLEDSMARTAPP_EVENTS.forEach(eventName =>\r\n          eventSource.addEventListener(eventName, event => this.emitLog(event)));\r\n        break;\r\n      case 'SMARTAPPIDS':\r\n        SMARTAPP_EVENTS.forEach(eventName =>\r\n          eventSource.addEventListener(eventName, event => this.emitLog(event)));\r\n        break;\r\n      default:\r\n        throw new StError('INVALID_LOGGER_TYPE', type);\r\n    }\r\n  }\r\n\r\n  createRealtimeLogs(type, value) {\r\n    return this.agent.createClientSubscription(type, value)\r\n      .then(({ registrationUrl }) => this.getRealtimeLogs(type, registrationUrl));\r\n  }\r\n\r\n  getRealtimeLogs(type, registrationUrl) {\r\n    const accessToken = this.config.accessToken;\r\n    const eventSource = new EventSource(registrationUrl, {\r\n      headers: { Authorization: `Bearer ${accessToken}` },\r\n    });\r\n    this.registerEventHandlers(eventSource, type);\r\n    return eventSource;\r\n  }\r\n}\r\n\r\nStLogManager.CLOSED = EventSource.CLOSED;\r\n\r\nmodule.exports = new Proxy(StLogManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/StLogManager.js\n// module id = 129\n// module chunks = 0","module.exports = require(\"eventsource\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"eventsource\"\n// module id = 130\n// module chunks = 0","const path = require('path');\r\nconst Promise = require('bluebird');\r\nconst Emiter = require('events');\r\n\r\nconst fs = require('./FileSystemHandler');\r\nconst DeviceProfileManager = require('./DeviceProfileManager');\r\nconst SmartAppManager = require('./SmartAppManager');\r\nconst ProjectConfigurator = require('./ProjectConfigurator');\r\nconst WebConsoleProjectConfigurator = require('./WebConsoleProjectConfigurator');\r\nconst MetaDataGenerator = require('./MetaDataGenerator');\r\nconst OcfProjectController = require('./OcfProjectController');\r\nconst ServicePluginProjectController = require('./ServicePluginProjectController');\r\nconst AutomationProjectController = require('./AutomationProjectController');\r\nconst IotConsoleAgent = require('./IotConsoleAgent');\r\nconst { getServerConfig } = require('../common/util');\r\nconst Project = require('../models/Project');\r\nconst WebConsoleProject = require('../models/WebConsoleProject');\r\nconst WebConsoleDeviceProfile = require('../models/WebConsoleDeviceProfile');\r\nconst WebConsoleCatalog = require('../models/WebConsoleCatalog');\r\nconst WebConsoleDevicePlugin = require('../models/WebConsoleDevicePlugin');\r\nconst StError = require('../errors/StError');\r\nconst { getText } = require('../common/TextHandler');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\n\r\nclass WebConsoleProjectManager extends Emiter {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @constructor\r\n   * @param {Object} config The Configuration of the ssoToken, AuthProvider\r\n   */\r\n  constructor(config) {\r\n    super();\r\n\r\n    this.config = config || {};\r\n    this.deviceProfileMgr = new DeviceProfileManager(this.config);\r\n    this.smartAppMgr = new SmartAppManager(this.config);\r\n    this.configurator = new WebConsoleProjectConfigurator(this.config);\r\n    this.servicePlugin = null;\r\n  }\r\n\r\n\r\n  init(agent, stCloudAgent) {\r\n    this.agent = agent ||\r\n      new IotConsoleAgent(this.config, getServerConfig(this.config, 'iotConsole'));\r\n    this.smartAppMgr.init(stCloudAgent);\r\n    this.servicePlugin = new ServicePluginProjectController(this);\r\n    this.servicePlugin.on('progress', msg => this.emit('progress', msg));\r\n    this.cloudConnected = new OcfProjectController(this);\r\n    this.cloudConnected.on('progress', msg => this.emit('progress', msg));\r\n    this.automation = new AutomationProjectController(this);\r\n    this.automation.on('progress', msg => this.emit('progress', msg));\r\n  }\r\n\r\n\r\n   /**\r\n   * Create a new IOT console project and synchronize it with local SDK project\r\n   *\r\n   * @param {string} [projectPath=process.cwd()] root path of project\r\n   * @param {string} [name] Project name\r\n   * @param {string} [description] Project description\r\n   * @returns {(Promise.<Object>|Error)}\r\n   *   A promise to be resolved with Project or rejected with an Error\r\n   */\r\n  createProject(projPath = process.cwd(), name, description) {\r\n    let project = null;\r\n\r\n    this.emit('progress', getText('REGISTER_WEB_CONSOLE_PROJECT.CHECKING_MNID'));\r\n    return this.checkAuthenticationStatus()\r\n      .then(() => ProjectConfigurator.retrieveConfig(projPath))\r\n      .then((config) => {\r\n        switch (config.type) {\r\n          case Project.PROJ_TYPE.OCF: {\r\n            return this.cloudConnected.readProject(projPath)\r\n            .then(prj => this.cloudConnected.createWebConsoleProject(prj, name, description, true));\r\n          }\r\n          case Project.PROJ_TYPE.SERVICE: {\r\n            return this.servicePlugin.readProject(projPath)\r\n            .then(prj => this.servicePlugin.createWebConsoleProject(prj, name, description, true));\r\n          }\r\n          // case Project.PROJ_TYPE.AUTOMATION: {\r\n          //   return this.automation.readProject(projPath)\r\n          //     .then(prj => this.automation.createWebConsoleProject(prj, true));\r\n          // }\r\n          default:\r\n            throw new StError('INVALID_PROJECT_TYPE', config.type);\r\n        }\r\n      })\r\n      .then((webPrj) => {\r\n        project = webPrj;\r\n        const webConfig = {\r\n          id: webPrj.id,\r\n          name: webPrj.name,\r\n          description: webPrj.description,\r\n        };\r\n        this.emit('progress', getText('REGISTER_WEB_CONSOLE_PROJECT.UPDATING_CONFIG'));\r\n        return this.configurator.updateConfig(projPath, webConfig);\r\n      })\r\n      .then(() => project);\r\n  }\r\n\r\n\r\n  /**\r\n   * Retrieve IOT console project info\r\n   *\r\n   * @param {string} projectId project ID\r\n   * @returns {(Promise.<Object>|Error)}\r\n   *   A promise to be resolved with project or rejected with an Error\r\n   */\r\n  readProject(projectId) {\r\n    return this.cloudConnected.existsWebConsoleProject(projectId)\r\n      .then((exists) => {\r\n        if (exists) return this.cloudConnected.readWebConsoleProject(projectId);\r\n        return this.servicePlugin.existsWebConsoleProject(projectId)\r\n          .then((exists2) => {\r\n            if (exists2) return this.servicePlugin.readWebConsoleProject(projectId);\r\n            throw new StError('WEB_CONSOLE_PROJECT_NOT_FOUND', projectId);\r\n          // return this.automation.existsWebConsoleProject(projectId)\r\n          //   .then((exists3) => {\r\n          //     if (exists3) return this.servautomationicePlugin.readWebConsoleProject(projectId);\r\n          //     throw new StError('WEB_CONSOLE_PROJECT_NOT_FOUND', projectId);\r\n          //   });\r\n          });\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Retrieve IOT console project info by local SDK project\r\n   *\r\n   * @param {string} projectId project ID\r\n   * @returns {(Promise.<Object>|Error)}\r\n   *   A promise to be resolved with project or rejected with an Error\r\n   */\r\n  readProjectInLocalProject(projPath = process.cwd()) {\r\n    return this.configurator.retrieveConfig(projPath)\r\n      .then(config => ProjectConfigurator.retrieveConfig(projPath)\r\n        .then((prjConfig) => {\r\n          switch (prjConfig.type) {\r\n            case Project.PROJ_TYPE.OCF:\r\n              return this.cloudConnected.readWebConsoleProject(config.id);\r\n            case Project.PROJ_TYPE.SERVICE:\r\n              return this.servicePlugin.readWebConsoleProject(config.id);\r\n            // case Project.PROJ_TYPE.AUTOMATION:\r\n            //   return this.automation.readWebConsoleProject(config.id);\r\n            default:\r\n              throw new StError('INVALID_PROJECT_TYPE', prjConfig.type);\r\n          }\r\n        }));\r\n  }\r\n\r\n\r\n  /**\r\n   * Check if IOT console project exists\r\n   *\r\n   * @param {string} projectId project ID\r\n   * @returns {(Promise.<boolean | Error>)}\r\n   *   A promise to be resolved with project existence or rejected with an Error\r\n   */\r\n  existsProject(projectId) {\r\n    return this.cloudConnected.existsWebConsoleProject(projectId)\r\n      .then((exists) => {\r\n        if (exists) return true;\r\n        return this.servicePlugin.existsWebConsoleProject(projectId);\r\n          // .then((exists2) => {\r\n          //   if (exists2) return true;\r\n          //   return this.automation.existsWebConsoleProject(projectId);\r\n          // });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * List all IOT console projects\r\n   *\r\n   * @param {object} [searchCriteria] Project search condition\r\n   * @returns {(Promise.<Object>|Error)}\r\n   *   A promise to be resolved with array of projects or rejected with an Error\r\n   */\r\n  readProjectList(searchCriteria) {\r\n    let result = [];\r\n    return Promise.resolve()\r\n      .then(() => {\r\n        if (!searchCriteria || !searchCriteria.type ||\r\n          searchCriteria.type === Project.PROJ_TYPE.OCF) {\r\n          return this.cloudConnected.readWebConsoleProjectList();\r\n        }\r\n\r\n        return [];\r\n      })\r\n      .then((projects) => { result = result.concat(projects); })\r\n      .then(() => {\r\n        if (!searchCriteria || !searchCriteria.type ||\r\n          searchCriteria.type === Project.PROJ_TYPE.SERVICE) {\r\n          return this.servicePlugin.readWebConsoleProjectList();\r\n        }\r\n        return [];\r\n      })\r\n      // .then((projects) => { result = result.concat(projects); })\r\n      // .then(() => {\r\n      //   if (!searchCriteria || !searchCriteria.type ||\r\n      //     searchCriteria.type === Project.PROJ_TYPE.AUTOMATION) {\r\n      //     return this.automation.readWebConsoleProjectList();\r\n      //   }\r\n      //   return [];\r\n      // })\r\n      .then((projects) => { result = result.concat(projects); })\r\n      .then(() => result);\r\n  }\r\n\r\n\r\n  /**\r\n   * Update a IOT console project with local SDK project\r\n   * @param {string} projectId project ID\r\n   * @param {string} [name] Project name\r\n   * @param {string} [description] Project description\r\n   * @returns {(Promise.<Object>|Error)}\r\n   *   A promise to be resolved or rejected with an Error\r\n   */\r\n  updateProject(projPath = process.cwd(), projectId, name, description) {\r\n    let project = null;\r\n    let webConfig = null;\r\n\r\n    this.emit('progress', getText('UPDATE_WEB_CONSOLE_PROJECT.CHECKING_MNID'));\r\n    return this.checkAuthenticationStatus()\r\n      .then(() => this.configurator.retrieveConfig(projPath)\r\n        .then((config) => {\r\n          webConfig = config;\r\n          return ProjectConfigurator.retrieveConfig(projPath);\r\n        }))\r\n      .then((projConfig) => {\r\n        const pjtId = projectId || webConfig.id;\r\n        const pjtNm = name || webConfig.name;\r\n        const pjtDsc = description || webConfig.description;\r\n        switch (projConfig.type) {\r\n          case Project.PROJ_TYPE.OCF:\r\n            return this.cloudConnected.readProject(projPath)\r\n              .then(prj => this.cloudConnected.updateWebConsoleProject(pjtId, prj, pjtNm, pjtDsc));\r\n          case Project.PROJ_TYPE.SERVICE:\r\n            return this.servicePlugin.readProject(projPath)\r\n              .then(prj => this.servicePlugin.updateWebConsoleProject(pjtId, prj, pjtNm, pjtDsc));\r\n          // case Project.PROJ_TYPE.AUTOMATION:\r\n          //   return this.automation.readProject(projPath)\r\n          //     .then(prj => this.automation.updateWebConsoleProject(pjtId, prj));\r\n          default:\r\n            throw new StError('INVALID_PROJECT_TYPE', projConfig.type);\r\n        }\r\n      })\r\n      .then((webPrj) => {\r\n        project = webPrj;\r\n        webConfig = {\r\n          id: webPrj.id,\r\n          name: webPrj.name,\r\n          description: webPrj.description,\r\n        };\r\n        this.emit('progress', getText('UPDATE_WEB_CONSOLE_PROJECT.UPDATING_CONFIG'));\r\n        return this.configurator.updateConfig(projPath, webConfig);\r\n      })\r\n      .then(() => project);\r\n  }\r\n\r\n\r\n  /**\r\n   * Delete a IOT console project\r\n   * @param {string} projectId project ID\r\n   * @returns {(Promise.<Object>|Error)}\r\n   *   A promise to be resolved or rejected with an Error\r\n   */\r\n  deleteProject(projectId) {\r\n    return this.cloudConnected.existsWebConsoleProject(projectId)\r\n      .then((exists) => {\r\n        if (exists) return this.cloudConnected.deleteWebConsoleProject(projectId);\r\n        return this.servicePlugin.existsWebConsoleProject(projectId)\r\n          .then((exists2) => {\r\n            if (exists2) return this.servicePlugin.deleteWebConsoleProject(projectId);\r\n            throw new StError('WEB_CONSOLE_PROJECT_NOT_FOUND', projectId);\r\n            // return this.automation.existsWebConsoleProject(projectId)\r\n            //   .then((exists3) => {\r\n            //     if (exists3) return this.automation.deleteWebConsoleProject(projectId);\r\n            //     throw new StError('WEB_CONSOLE_PROJECT_NOT_FOUND', projectId);\r\n            //   });\r\n          });\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Delete a IOT console project in local SDK project\r\n   * @param {string} [projectPath=process.cwd()] root path of project\r\n   * @param {object} [option={}] option\r\n   * @returns {(Promise.<Object>|Error)}\r\n   *   A promise to be resolved or rejected with an Error\r\n   */\r\n  deleteProjectInLocalProject(projPath = process.cwd(), option = {}) {\r\n    let webConfig = null;\r\n\r\n    return this.checkAuthenticationStatus()\r\n      .then(() => this.configurator.retrieveConfig(projPath)\r\n        .then((config) => {\r\n          webConfig = config;\r\n          return ProjectConfigurator.retrieveConfig(projPath);\r\n        }))\r\n      .then((projConfig) => {\r\n        switch (projConfig.type) {\r\n          case Project.PROJ_TYPE.OCF: {\r\n            return this.cloudConnected.existsWebConsoleProject(webConfig.id)\r\n              .then((exists) => {\r\n                if (exists) return this.cloudConnected.deleteWebConsoleProject(webConfig.id);\r\n                if (option.force) return Promise.resolve();\r\n                throw new StError('WEB_CONSOLE_PROJECT_NOT_FOUND', webConfig.id);\r\n              });\r\n          }\r\n          case Project.PROJ_TYPE.SERVICE: {\r\n            return this.servicePlugin.existsWebConsoleProject(webConfig.id)\r\n              .then((exists) => {\r\n                if (exists) return this.servicePlugin.deleteWebConsoleProject(webConfig.id);\r\n                if (option.force) return Promise.resolve();\r\n                throw new StError('WEB_CONSOLE_PROJECT_NOT_FOUND', webConfig.id);\r\n              });\r\n          }\r\n          // case Project.PROJ_TYPE.AUTOMATION: {\r\n          //   return this.automation.existsWebConsoleProject(webConfig.id)\r\n          //     .then((exists) => {\r\n          //       if (exists) return this.automation.deleteWebConsoleProject(webConfig.id);\r\n          //       if (option.force) return Promise.resolve();\r\n          //       throw new StError('WEB_CONSOLE_PROJECT_NOT_FOUND', webConfig.id);\r\n          //     });\r\n          // }\r\n          default:\r\n            throw new StError('INVALID_PROJECT_TYPE', projConfig.type);\r\n        }\r\n      })\r\n      .then(() => this.configurator.deleteConfig(projPath));\r\n  }\r\n\r\n\r\n  /**\r\n   * Publish IOT console project info\r\n   *\r\n   * @param {string} projectId project ID\r\n   * @returns {(Promise.<Object>|Error)}\r\n   *   A promise to be resolved with project or rejected with an Error\r\n   */\r\n  publishProject(projectId) {\r\n    return this.cloudConnected.existsWebConsoleProject(projectId)\r\n    .then((exists) => {\r\n      if (exists) return this.cloudConnected.publishWebConsoleProject(projectId);\r\n      return this.servicePlugin.existsWebConsoleProject(projectId)\r\n        .then((exists2) => {\r\n          if (exists2) return this.servicePlugin.publishWebConsoleProject(projectId);\r\n          throw new StError('WEB_CONSOLE_PROJECT_NOT_FOUND', projectId);\r\n        });\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Publish IOT console project info by local SDK project\r\n   *\r\n   * @param {string} proPath project path\r\n   * @returns {(Promise.<Object>|Error)}\r\n   *   A promise to be resolved with project or rejected with an Error\r\n   */\r\n  publishProjectInLocalProject(projPath = process.cwd()) {\r\n    return this.configurator.retrieveConfig(projPath)\r\n      .then(config => ProjectConfigurator.retrieveConfig(projPath)\r\n        .then((prjConfig) => {\r\n          switch (prjConfig.type) {\r\n            case Project.PROJ_TYPE.OCF: {\r\n              return this.cloudConnected.publishWebConsoleProject(config.id);\r\n            }\r\n            case Project.PROJ_TYPE.SERVICE: {\r\n              return this.servicePlugin.publishWebConsoleProject(config.id);\r\n            }\r\n            default:\r\n              throw new StError('INVALID_PROJECT_TYPE', prjConfig.type);\r\n          }\r\n        }));\r\n  }\r\n\r\n\r\n  /**\r\n   * Unpublish IOT console project info\r\n   *\r\n   * @param {string} projectId project ID\r\n   * @returns {(Promise.<Object>|Error)}\r\n   *   A promise to be resolved with project or rejected with an Error\r\n   */\r\n  unpublishProject(projectId) {\r\n    return this.cloudConnected.existsWebConsoleProject(projectId)\r\n    .then((exists) => {\r\n      if (exists) return this.cloudConnected.unpublishWebConsoleProject(projectId);\r\n      return this.servicePlugin.existsWebConsoleProject(projectId)\r\n        .then((exists2) => {\r\n          if (exists2) return this.servicePlugin.unpublishWebConsoleProject(projectId);\r\n          throw new StError('WEB_CONSOLE_PROJECT_NOT_FOUND', projectId);\r\n        });\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Unpublish IOT console project info by local SDK project\r\n   *\r\n   * @param {string} proPath project path\r\n   * @returns {(Promise.<Object>|Error)}\r\n   *   A promise to be resolved with project or rejected with an Error\r\n   */\r\n  unpublishProjectInLocalProject(projPath = process.cwd()) {\r\n    return this.configurator.retrieveConfig(projPath)\r\n      .then(config => ProjectConfigurator.retrieveConfig(projPath)\r\n        .then((prjConfig) => {\r\n          switch (prjConfig.type) {\r\n            case Project.PROJ_TYPE.OCF: {\r\n              return this.cloudConnected.unpublishWebConsoleProject(config.id);\r\n            }\r\n            case Project.PROJ_TYPE.SERVICE: {\r\n              return this.servicePlugin.unpublishWebConsoleProject(config.id);\r\n            }\r\n            default:\r\n              throw new StError('INVALID_PROJECT_TYPE', prjConfig.type);\r\n          }\r\n        }));\r\n  }\r\n\r\n\r\n  checkAuthenticationStatus() {\r\n    return this.agent.getAuthenticationStatus()\r\n      .then((resp) => {\r\n        if (resp.mnId !== this.config.mnid) {\r\n          throw new StError('WEB_CONSOLE_PROJECT_MNNM_MISMATCH', resp.mnId, this.config.mnid);\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n  createAutomationProject(outputPath, name, description, appName) {\r\n    const project = new WebConsoleProject(null, name, description);\r\n\r\n    return this.agent.postAutomationProject(project.toCreateRequestBody())\r\n      .then((resp) => { project.id = resp.pjtId; })\r\n      .then(() => this.createAutomationApp(appName, project.id))\r\n      .then((resp) => {\r\n        const appId = resp.appId;\r\n        return this.createAutomationCatalog(outputPath, project.id, appId);\r\n      })\r\n      .then(() => this.readAutomationProject(project.id))\r\n      .catch(err => Promise.resolve()\r\n        .then(() => {\r\n          if (!project.id) return Promise.resolve();\r\n          return this.deleteAutomationProject(project.id);\r\n        })\r\n        .then(() => Promise.reject(err)));\r\n  }\r\n\r\n\r\n  readAutomationProject(projectId) {\r\n    return this.agent.getAutomationProject(projectId)\r\n      .then(resp => WebConsoleProject.createFromAutomationResp(resp));\r\n  }\r\n\r\n\r\n  readAutomationProjectList() {\r\n    return this.agent.getAutomationProjectList()\r\n      .then(resp => WebConsoleProject.createListFromAutomationResp(resp));\r\n  }\r\n\r\n\r\n  existsAutomationProject(projectId) {\r\n    return this.readAutomationProjectList()\r\n      .then(prjList => !!prjList.find(prj => prj.id === projectId));\r\n  }\r\n\r\n\r\n  updateAutomationProjectStatusToLocked(projectId) {\r\n    return this.agent.putAutomationProjectStatusToLocked(projectId);\r\n  }\r\n\r\n\r\n  updateAutomationProjectStatusToUnlocked(projectId) {\r\n    return this.agent.putAutomationProjectStatusToUnlocked(projectId);\r\n  }\r\n\r\n\r\n  updateAutomationProject(outputPath, projectId, name, description) {\r\n    const project = new WebConsoleProject(null, name, description,\r\n      WebConsoleProject.TYPE.AUTOMATION);\r\n\r\n    return this.agent.putAutomationProject(projectId, project.toUpdateRequestBody())\r\n      .then((resp) => {\r\n        const appName = resp.app.appNm;\r\n        const appId = resp.app.appId;\r\n        const catalogId = resp.ctlg.ctlgId;\r\n        return this.updateAutomationApp(appName, projectId, appId)\r\n          .then(() => this.updateAutomationCatalog(outputPath, projectId, appId, catalogId));\r\n      })\r\n      .then(() => this.readAutomationProject(projectId));\r\n  }\r\n\r\n\r\n  deleteAutomationProject(projectId) {\r\n    return this.agent.deleteAutomationProject(projectId);\r\n  }\r\n\r\n\r\n  createCloudConnectedDeviceProfile(outputPath, projectId) {\r\n    const profilePath = path.join(outputPath, ProjectConfigurator.DEVICE_PROFILE_FILE);\r\n    let deviceProfile = null;\r\n\r\n    return this.deviceProfileMgr.retrieveDeviceProfileFromFile(profilePath)\r\n      .then((deviceProfile1) => { deviceProfile = deviceProfile1; })\r\n      // NOTE. To use manifest for creating device profile should be removed\r\n      .then(() => this.readUiManifestFile(outputPath))\r\n      .then((manifest) => {\r\n        const mainAction = manifest ? MetaDataGenerator.getMainAction(manifest) : null;\r\n        const mainState = manifest ? MetaDataGenerator.getMainState(manifest) : null;\r\n\r\n        const webConsoleDeviceProfile =\r\n          WebConsoleDeviceProfile.createFromDeviceProfile(deviceProfile, { mainAction, mainState });\r\n        return this.agent.postCloudConnectedDeviceProfile(projectId,\r\n          webConsoleDeviceProfile.toCreateRequestBody());\r\n      });\r\n  }\r\n\r\n\r\n  readCloudConnectedDeviceProfile(projectId, deviceProfileId) {\r\n    return this.agent.getCloudConnectedDeviceProfile(projectId, deviceProfileId)\r\n      .then(resp => WebConsoleDeviceProfile.createFromCloudConnectedResp(resp));\r\n  }\r\n\r\n\r\n  updateCloudConnectedDeviceProfile(outputPath, projectId, deviceProfileId) {\r\n    const profilePath = path.join(outputPath, ProjectConfigurator.DEVICE_PROFILE_FILE);\r\n    let deviceProfile = null;\r\n\r\n    return this.deviceProfileMgr.retrieveDeviceProfileFromFile(profilePath)\r\n      .then((deviceProfile1) => { deviceProfile = deviceProfile1; })\r\n      // NOTE. To use manifest for creating device profile should be removed\r\n      .then(() => this.readUiManifestFile(outputPath))\r\n      .then((manifest) => {\r\n        const mainAction = manifest ? MetaDataGenerator.getMainAction(manifest) : null;\r\n        const mainState = manifest ? MetaDataGenerator.getMainState(manifest) : null;\r\n\r\n        const webConsoleDeviceProfile =\r\n          WebConsoleDeviceProfile.createFromDeviceProfile(deviceProfile, { mainAction, mainState });\r\n        return this.agent.putCloudConnectedDeviceProfile(projectId,\r\n          deviceProfileId, webConsoleDeviceProfile.toUpdateRequestBody());\r\n      });\r\n  }\r\n\r\n\r\n  deleteCloudConnectedDeviceProfile(projectId, profileId) {\r\n    return this.agent.deleteCloudConnectedDeviceProfile(projectId, profileId);\r\n  }\r\n\r\n\r\n  createCloudConnectedUiManifest(outputPath, projectId, deviceProfileId) {\r\n    return this.readUiManifestFile(outputPath)\r\n      .then((manifest) => {\r\n        // if null, skip it\r\n        if (!manifest) return Promise.resolve();\r\n        return this.agent.postCloudConnectedMetadata(projectId, deviceProfileId, manifest, 'CIT-UI');\r\n      });\r\n  }\r\n\r\n\r\n  readUiManifestFile(outputPath) { // eslint-disable-line class-methods-use-this\r\n    return fs.readDir(outputPath)\r\n      .then(files => files.find(file => file.endsWith(ProjectConfigurator.UI_MANIFEST_FILE)))\r\n      .then((manifestFileName) => {\r\n        // skip if not exists\r\n        if (!manifestFileName) return Promise.resolve(null);\r\n        const uiManifestFile = path.join(outputPath, manifestFileName);\r\n        return fs.readJson(uiManifestFile);\r\n      });\r\n  }\r\n\r\n\r\n  createCloudConnectedVoiceManifest(outputPath, projectId, deviceProfileId) {\r\n    return fs.readDir(outputPath)\r\n      .then(files => files.find(file => file.endsWith(ProjectConfigurator.VOICE_MANIFEST_FILE)))\r\n      .then((manifestFileName) => {\r\n        // skip if not exists\r\n        if (!manifestFileName) return Promise.resolve();\r\n        const voiceManifestFile = path.join(outputPath, manifestFileName);\r\n        return fs.readJson(voiceManifestFile)\r\n          .then(manifest => this.agent.postCloudConnectedMetadata(projectId, deviceProfileId, manifest, 'CIT-VOICE'));\r\n      });\r\n  }\r\n\r\n\r\n  updateCloudConnectedUiManifest(outputPath, projectId, deviceProfileId, manifestId) {\r\n    return fs.readDir(outputPath)\r\n      .then(files => files.find(file => file.endsWith(ProjectConfigurator.UI_MANIFEST_FILE)))\r\n      .then((manifestFileName) => {\r\n        // skip if not exists\r\n        if (!manifestFileName) return Promise.resolve();\r\n        const uiManifestFile = path.join(outputPath, manifestFileName);\r\n        return fs.readJson(uiManifestFile)\r\n          .then(manifest => this.agent.putCloudConnectedMetadata(projectId,\r\n            deviceProfileId, manifestId, manifest, 'CIT-UI'));\r\n      });\r\n  }\r\n\r\n\r\n  updateCloudConnectedVoiceManifest(outputPath, projectId, deviceProfileId, manifestId) {\r\n    return fs.readDir(outputPath)\r\n      .then(files => files.find(file => file.endsWith(ProjectConfigurator.VOICE_MANIFEST_FILE)))\r\n      .then((manifestFileName) => {\r\n        // skip if not exists\r\n        if (!manifestFileName) return Promise.resolve();\r\n        const voiceManifestFile = path.join(outputPath, manifestFileName);\r\n        return fs.readJson(voiceManifestFile)\r\n          .then(manifest => this.agent.putCloudConnectedMetadata(projectId,\r\n            deviceProfileId, manifestId, manifest, 'CIT-VOICE'));\r\n      });\r\n  }\r\n\r\n\r\n  deleteCloudConnectedManfest(projectId, deviceProfileId, manifestId) {\r\n    return this.agent.deleteCloudConnectedManfest(projectId, deviceProfileId, manifestId);\r\n  }\r\n\r\n\r\n  createCloudConnectedCatalog(outputPath, projectId, deviceProfileId) {\r\n    const catalogFile = path.join(outputPath, ProjectConfigurator.CATALOG_FILE);\r\n    return fs.readJson(catalogFile)\r\n      .then((catalog) => {\r\n        const body = {\r\n          modelCd: catalog.items[0].name,\r\n          setupId: catalog.items[0].versions[0].appData.setupAppData.ocf.setupId,\r\n        };\r\n\r\n        return this.agent.postCloudConnectedCatalog(projectId, deviceProfileId, body);\r\n      });\r\n  }\r\n\r\n\r\n  readCloudConnectedCatalog(projectId, deviceProfileId, catalogId) {\r\n    return this.agent.getCloudConnectedCatalog(projectId, deviceProfileId, catalogId)\r\n      .then(resp => WebConsoleCatalog.createFromCloudConnectedResp(resp));\r\n  }\r\n\r\n\r\n  // NOTE. Updating Catalog API is not supported\r\n  updateCloudConnectedCatalog(outputPath, projectId, deviceProfileId, catalogId) {\r\n    return this.deleteCloudConnectedCatalog(projectId, deviceProfileId, catalogId)\r\n      .then(() => this.createCloudConnectedCatalog(outputPath, projectId, deviceProfileId));\r\n  }\r\n\r\n\r\n  deleteCloudConnectedCatalog(projectId, deviceProfileId, catalogId) {\r\n    return this.agent.deleteCloudConnectedCatalog(projectId, deviceProfileId, catalogId);\r\n  }\r\n\r\n\r\n  createCloudConnectedDevicePlugin(outputPath, projectId, deviceProfileId, ppkFileName) {\r\n    const ppkFile = path.join(outputPath, ppkFileName);\r\n    return this.agent.postCloudConnectedDevicePlugin(projectId, deviceProfileId, ppkFile);\r\n  }\r\n\r\n\r\n  static findDevicePluginFile(outputPath) {\r\n    return fs.readDir(outputPath)\r\n      .then(files => files.find(file => file.endsWith('.ppk')));\r\n  }\r\n\r\n  readCloudConnectedDevicePlugin(projectId, deviceProfileId, devicePluginId) {\r\n    return this.agent.getCloudConnectedDevicePlugin(projectId, deviceProfileId, devicePluginId)\r\n      .then(resp => WebConsoleDevicePlugin.createFromCloudConnectedResp(resp));\r\n  }\r\n\r\n\r\n  updateCloudConnectedDevicePlugin(outputPath, projectId, deviceProfileId, devicePluginId) {\r\n    return fs.readDir(outputPath)\r\n      .then(files => files.find(file => file.endsWith('.ppk')))\r\n      .then((ppkFileName) => {\r\n        // skip if not exists\r\n        if (!ppkFileName) return Promise.resolve();\r\n        const ppkFile = path.join(outputPath, ppkFileName);\r\n        return this.agent.postCloudConnectedDevicePluginForUpdate(projectId, deviceProfileId,\r\n          devicePluginId, ppkFile);\r\n      });\r\n  }\r\n\r\n\r\n  deleteCloudConnectedDevicePlugin(projectId, deviceProfileId, devicePluginId) {\r\n    return this.agent.deleteCloudConnectedDevicePlugin(projectId, deviceProfileId, devicePluginId);\r\n  }\r\n\r\n\r\n  createAutomationApp(appName, projectId) {\r\n    let smartApp = null;\r\n\r\n    return this.smartAppMgr.retrieveSmartApp(appName)\r\n      .then((app) => { smartApp = app; })\r\n      .then(() => this.smartAppMgr.retrieveSmartAppOauth(appName))\r\n      .then((smartAppOauth) => {\r\n        smartApp.oauth = smartAppOauth;\r\n        return this.agent.postAutomationApp(projectId, smartApp.toCreateRequestBodyIotConsole());\r\n      });\r\n  }\r\n\r\n\r\n  updateAutomationApp(appName, projectId, appId) {\r\n    let smartApp = null;\r\n\r\n    return this.smartAppMgr.retrieveSmartApp(appName)\r\n      .then((app) => { smartApp = app; })\r\n      .then(() => this.smartAppMgr.retrieveSmartAppOauth(appName))\r\n      .then((smartAppOauth) => {\r\n        smartApp.oauth = smartAppOauth;\r\n        return this.agent.putAutomationApp(projectId, appId,\r\n          smartApp.toUpdateRequestBodyIotConsole());\r\n      });\r\n  }\r\n\r\n\r\n  createAutomationCatalog(outputPath, projectId, appId) {\r\n    const catalogFile = path.join(outputPath, ProjectConfigurator.CATALOG_FILE);\r\n    return fs.readJson(catalogFile)\r\n      .then((catalog) => {\r\n        const body = {\r\n          dispNm: catalog.items[0].name,\r\n        };\r\n\r\n        return this.agent.postAutomationCatalog(projectId, appId, body);\r\n      });\r\n  }\r\n\r\n\r\n  readAutomationCatalog(projectId, appId, catalogId) {\r\n    return this.agent.getAutomationCatalog(projectId, appId, catalogId)\r\n      .then(resp => WebConsoleCatalog.createFromAutomationResp(resp));\r\n  }\r\n\r\n\r\n  updateAutomationCatalog(outputPath, projectId, appId, catalogId) {\r\n    const catalogFile = path.join(outputPath, ProjectConfigurator.CATALOG_FILE);\r\n    return fs.readJson(catalogFile)\r\n      .then((catalog) => {\r\n        const body = {\r\n          dispNm: catalog.items[0].name,\r\n        };\r\n\r\n        return this.agent.putAutomationCatalog(projectId, appId, catalogId, body);\r\n      });\r\n  }\r\n\r\n\r\n  deleteAutomationCatalog(projectId, appId, catalogId) {\r\n    return this.agent.deleteAutomationCatalog(projectId, appId, catalogId);\r\n  }\r\n}\r\nmodule.exports = new Proxy(WebConsoleProjectManager, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/WebConsoleProjectManager.js\n// module id = 131\n// module chunks = 0","const pathUtil = require('path');\r\nconst clone = require('lodash/clone');\r\n\r\nconst fs = require('./FileSystemHandler');\r\nconst StError = require('../errors/StError');\r\nconst getClassLogger = require('../common/getClassLogger');\r\n\r\n\r\nconst CONFIG_FILE = '.web-console-project';\r\n\r\n/**\r\n * Controller that has a responsibility for configure Web Console Project\r\n */\r\nclass WebConsoleProjectConfigurator {\r\n  constructor(config) {\r\n    this.config = config;\r\n  }\r\n\r\n\r\n  retrieveConfig(projPath) {\r\n    const configPath = pathUtil.join(projPath, CONFIG_FILE);\r\n    return fs.exists(configPath)\r\n      .then((exists) => {\r\n        if (!exists) throw new StError('WEB_CONSOLE_PROJECT_CONFIG_NOT_FOUND', configPath);\r\n\r\n        return fs.readJson(configPath);\r\n      })\r\n      .then((configuration) => {\r\n        if (configuration.uri !== this.config.iotConsole.uri) {\r\n          throw new StError('WEB_CONSOLE_URI_NOT_MATCHED', configuration.uri);\r\n        }\r\n        return configuration;\r\n      });\r\n  }\r\n\r\n\r\n  updateConfig(projPath, config) {\r\n    // update Web Console URI\r\n    const updatedConfig = clone(config);\r\n    updatedConfig.uri = this.config.iotConsole.uri;\r\n\r\n    const configuration = JSON.stringify(updatedConfig, null, 2);\r\n    const configPath = pathUtil.join(projPath, CONFIG_FILE);\r\n    return fs.writeFile(configPath, configuration);\r\n  }\r\n\r\n\r\n  deleteConfig(projPath) { // eslint-disable-line class-methods-use-this\r\n    const configPath = pathUtil.join(projPath, CONFIG_FILE);\r\n    return fs.remove(configPath);\r\n  }\r\n}\r\n\r\nWebConsoleProjectConfigurator.CONFIG_FILE = CONFIG_FILE;\r\n\r\n\r\nmodule.exports = new Proxy(WebConsoleProjectConfigurator, getClassLogger());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controllers/WebConsoleProjectConfigurator.js\n// module id = 132\n// module chunks = 0"],"sourceRoot":""}