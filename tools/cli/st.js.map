{"version":3,"sources":["webpack:///webpack/bootstrap b9b3e9b79a038d1d4b8d","webpack:///external \"iotcloud-lib\"","webpack:///external \"lodash\"","webpack:///external \"bluebird\"","webpack:///./src/util.js","webpack:///external \"path\"","webpack:///./src/consolePrinter.js","webpack:///./src/index.js","webpack:///./src/CommandManager.js","webpack:///external \"yargs\"","webpack:///./src/StCommands.js","webpack:///external \"electron\"","webpack:///external \"tmp-promise\"","webpack:///external \"child-process-es6-promise\"","webpack:///external \"lodash/cloneDeepWith\"","webpack:///external \"columnify\"","webpack:///external \"debug\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","require","path","fs","FileSystemHandler","getRoot","root","__dirname","existsSync","resolve","getCLIVersion","packageFile","readJsonSync","version","isFloat","match","isNaN","parseFloat","columnify","printOutput","output","console","log","printColumn","data","columns","option","Array","isArray","preserveNewLines","StLogger","CommandManager","StCommands","printer","debugLog","debug","commandManager","addCommands","getCommands","runCommand","catch","error","process","exitCode","undefined","message","stack","stderr","_","yargs","Promise","StError","getLibVersion","util","YARGS_TYPES","makeSubCommandsDesc","command","keys","children","desc","join","makeOptions","opts","sort","o1","o2","full","options","forEach","opt","retOpt","description","alias","short","demandOption","required","has","indexOf","type","[object Object]","filename","this","commands","runner","commandObj","parent","commandIndex","length","isLeafCmd","fullCommand","slice","setCommand","yargsForCmd","isEmpty","describe","builder","argv","usage","trim","demandCommand","yargsForChildren","key","applyCommand","help","cmd","then","locale","strict","parsedOption","info","$0","pathUtil","electron","tmp","spawn","cloneDeepWith","Configurator","Project","ProjectManager","ManifestManager","LocationManager","DeviceManager","OcfDeviceManager","DeviceProfileManager","C2cDeviceProfileManager","AuthManager","OneAppController","CapabilityManager","ResourceTypeManager","DevPortalManager","LogManager","OcfLogManager","StLogManager","MetaDataGenerator","GroupManager","OcfGroupManager","CertManager","WebConsoleProjectManager","PluginManager","getFlatKeys","getText","TextHandler","configurator","ensureAuthToken","refreshToken","accessToken","reject","authManager","init","generateSignInUiFiles","tempDir","purpose","iotConsoleUri","getConfig","iotConsole","uri","templateJsFile","jsFile","templateHtmlFile","htmlFile","readFile","jsContents","compiled","template","writeFile","htmlContents","hash","Date","now","getConfigByUI","dirSync","generatedJsFile","stdout","config","JSON","parse","Error","e","finally","removeSync","requestTokenByUI","set","show-ui","showUi","authcode","on","msg","requestTokenByAuthCode","PROJ_TYPE","OCF","device-profile","deviceProfile","main-state","mainState","main-action","mainAction","vid","import-things-sdk","importThingsSdk","app-name","appName","app-type","appType","lambda-arn","lambdaArn","target-url","targetUrl","plugin-id","pluginId","generate-plugin","generatePlugin","dashboard-card","enableDashboardCard","projManager","createProjectByTemplate","cwd","createProjectFromThingsSDK","createOcfProject","AUTOMATION","createLambdaAutomationProject","C2C","createLambdaC2cProject","SERVICE","createDefaultServicePluginProject","retrieveProjectList","projects","project-path","projectPath","sign-ppk","signPpk","passwd","buildProject","out","show","outputPath","exportToThingsSDK","device","stringify","searchCriteria","retrieveTemplateList","templates","in","ppkIn","verbose","verifyPackage","result","code","inPath","outPath","signPackage","ppkPath","extractPackage","target","serial","simulator","sim-path","simulatorPath","oac","installApplicationToDevice","installApplicationToSimulator","mgr","createProject","prj","id","oauthClientId","oauthClientSecret","readProject","readProjectInLocalProject","app","readProjectList","resp","updateProject","force","deleteProject","deleteProjectInLocalProject","publishProject","publishProjectInLocalProject","unpublishProject","unpublishProjectInLocalProject","launchSimulator","config-name","configName","vd-path","vdPath","launchVirtualDevice","plugin-type","pluginType","pm","registerPlugin","pkgNm","package-name","unregisterPlugin","pkgName","status","retrievePluginList","printable","map","plugin","plgnType","substring","dvcType","devStatCd","verNm","verCd","projectLinked","pjtId","retrievePlugin","owner-id","ownerId","mnid","dpm","requestMnid","mdm","retrieveManifestList","mnmn","ver","retrieveManifestById","retrieveManifest","manifests","registerManifest","workflowId","deleteManifest","mag","updateManifest","resource-model","resourceModel","deviceName","deviceType","client","ocfDeviceManager","retrieveClientDeviceList","devices","rt","retrieveDeviceList","toListEntry","deviceManager","detail","retrieveDevice","toSimple","component","resource","retrieveStatus","retrieveDeviceComponentStatus","deleteDevice","err","capability","args","href","prefix","resource-type","interface","interf","commandArgs","commandDevice","deviceCommand","arguments","profileId","authCode","sso-token","ssoToken","device-profile-path","profilePath","device-key-path","keyPath","device-cert-path","certPath","dtm","promise","retrieveDeviceProfile","retrieveDeviceProfileFromFile","retrieveDeviceProfileInProject","dm","publishDeviceBySsoToken","publishDevice","token","locationManager","retrieveLocationList","locations","retrieveLocation","location","country-code","countryCode","latitude","longitude","radius","temperature-scale","temperatureScale","toString","rr","parseInt","createLocation","updateLocation","deleteLocation","gm","createGroup","group","retrieveGroupList","res","response","v","k","retrieveGroup","g","owner","subGroups","members","operation","updateGroup","deleteGroup","inputFile","manager","exists","readJson","createDeviceProfile","category","builtIn","retrieveDeviceProfileList","deviceProfiles","showResourceModel","profile","convertToResourceModelByDeviceProfile","updateDeviceProfile","deleteDeviceProfile","inputPath","registerDeviceProfile","registerDeviceProfileByJsonFile","updateDeviceProfileByJsonFile","sdk-only","sdkOnly","retrieveCapabilityList","capabilities","resources","mapCapabilityToResources","retrieveCapability","rtm","retrieveResourceTypeList","resourceTypes","retrieveResourceType","resourceType","flatKeys","configs","value","mode","changeMode","isValidKey","del","converted","test","inFile","deviceProfilePath","out-dir","outDir","device-plugin","devicePlugin","ui-version","uiVersion","voice-version","voiceVersion","capability-property-map","propertyMapStr","metaGenerator","capabilityPropertyMap","generateUiMetaFromCapability","uiManifest","targetFilePath","msCapability","maCapability","generateManifestFilesFromDeviceProfile","generateManifestFilesFromProjectPath","smart-app","smartApp","installed-smart-app","installedSmartApp","st-device","stDevice","lm","observeDeviceStateChangesByAuthCode","ocfLog","time","di","event","formatted","createRealtimeLogs","distributor-type","distributorType","common-name","commonName","organizational-unit","organizationalUnit","organization","locality","state","country","PASSWORD_REGEX","cm","createPpkCertPair","device-name","access-token","accessTokenParam","mnidParam","email","emailParam","createDeviceCertForProduct","changeMnidType","setLogLevel"],"mappings":"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","file":"st.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b9b3e9b79a038d1d4b8d","module.exports = require(\"iotcloud-lib\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"iotcloud-lib\"\n// module id = 0\n// module chunks = 0","module.exports = require(\"lodash\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash\"\n// module id = 1\n// module chunks = 0","module.exports = require(\"bluebird\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bluebird\"\n// module id = 2\n// module chunks = 0","const path = require('path');\r\nconst fs = require('iotcloud-lib').FileSystemHandler;\r\n\r\nfunction getRoot() {\r\n  let root = __dirname;\r\n  if (!fs.existsSync(path.resolve(root, 'package.json'))) root = path.resolve(root, '..');\r\n  return root;\r\n}\r\n\r\nfunction getCLIVersion() {\r\n  const packageFile = path.resolve(getRoot(), 'package.json');\r\n  return fs.readJsonSync(packageFile).version;\r\n}\r\n\r\nfunction isFloat(n) {\r\n  if (n.match(/^-?\\d*(\\.\\d+)?$/) && !isNaN(parseFloat(n)) && (n % 1 !== 0)) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nmodule.exports = {\r\n  getRoot,\r\n  getCLIVersion,\r\n  isFloat,\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/util.js\n// module id = 3\n// module chunks = 0","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 4\n// module chunks = 0","const columnify = require('columnify');\r\n\r\nfunction printOutput(output) {\r\n  console.log(output);\r\n}\r\n\r\nfunction printColumn(data, columns) {\r\n  const option = Array.isArray(columns) ? { columns } : {};\r\n  option.preserveNewLines = true;\r\n  printOutput(columnify(data, option));\r\n}\r\n\r\nmodule.exports = {\r\n  printOutput,\r\n  printColumn,\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/consolePrinter.js\n// module id = 5\n// module chunks = 0","const log = require('iotcloud-lib').StLogger;\r\nconst CommandManager = require('./CommandManager');\r\nconst StCommands = require('./StCommands');\r\nconst printer = require('./consolePrinter');\r\nconst debugLog = require('debug').debug('debugLog');\r\n\r\ntry {\r\n  const commandManager = new CommandManager('st');\r\n  commandManager.addCommands(StCommands.getCommands());\r\n  commandManager.runCommand()\r\n  .catch((error) => {\r\n    if (process.exitCode === undefined || process.exitCode === 0) {\r\n      process.exitCode = 1;\r\n    }\r\n    printer.printOutput(`Error: ${error.message}`);\r\n    debugLog(error.stack);\r\n    debugLog(`stderr: ${error.stderr}`);\r\n    log.error(error.stack);\r\n    log.error(`stderr: ${error.stderr}`);\r\n  });\r\n} catch (error) {\r\n  if (process.exitCode === undefined || process.exitCode === 0) {\r\n    process.exitCode = 1;\r\n  }\r\n  printer.printOutput(`Error: ${error.message}`);\r\n  debugLog(error.stack);\r\n  debugLog(`stderr: ${error.stderr}`);\r\n  log.error(error.stack);\r\n  log.error(`stderr: ${error.stderr}`);\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 6\n// module chunks = 0","const _ = require('lodash');\r\nconst yargs = require('yargs');\r\nconst Promise = require('bluebird');\r\nconst log = require('iotcloud-lib').StLogger;\r\nconst StError = require('iotcloud-lib').StError;\r\nconst { getLibVersion } = require('iotcloud-lib').util;\r\nconst { getCLIVersion } = require('./util.js');\r\n\r\nconst YARGS_TYPES = ['array', 'boolean', 'count', 'number', 'string'];\r\n\r\nfunction makeSubCommandsDesc(command) {\r\n  const keys = Object.keys(command.children);\r\n  const desc = `<${keys.join(' | ')}>`;\r\n  return desc;\r\n}\r\n\r\nfunction makeOptions(opts) {\r\n  opts.sort((o1, o2) => {\r\n    if (o1.full < o2.full) {\r\n      return -1;\r\n    } else if (o1.full > o2.full) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n\r\n  const options = {};\r\n  opts.forEach((opt) => {\r\n    const retOpt = {\r\n      desc: opt.description,\r\n      alias: opt.short,\r\n      demandOption: false,\r\n      full: false,\r\n    };\r\n    if (opt.required) {\r\n      retOpt.demandOption = true;\r\n    }\r\n    if (_.has(opt, 'type') && YARGS_TYPES.indexOf(opt.type) !== -1) {\r\n      retOpt[opt.type] = true;\r\n    }\r\n\r\n    options[opt.full] = retOpt;\r\n  });\r\n  return options;\r\n}\r\n\r\nclass CommandManager {\r\n  constructor(filename) {\r\n    this.filename = filename;\r\n    this.alias = {};\r\n    this.commands = {};\r\n    this.runner = Object;\r\n  }\r\n  /**\r\n   * Sets commandObj's command at commandIndex into parent's children.\r\n   */\r\n  setCommand(commandObj, parent, commandIndex) {\r\n    if (!commandObj.commands.length) throw new StError('NO_COMMAND');\r\n    if (!Array.isArray(commandObj.options)) throw new StError('NO_COMMAND_OPTION');\r\n    if (typeof commandObj.description !== 'string') throw new StError('NO_COMMAND_DESCRIPTION');\r\n    if (typeof commandObj.runner !== 'function') throw new StError('NO_COMMAND_RUNNER');\r\n\r\n    const children = (parent) ? parent.children : this.commands;\r\n    const isLeafCmd = commandObj.commands.length === (commandIndex + 1);\r\n    if (isLeafCmd && children[commandObj.commands[commandIndex]]) {\r\n      throw new StError('COMMAND_ALREADY_ADDED', commandObj.commands[commandIndex], commandObj.commands);\r\n    }\r\n\r\n    let command;\r\n    if (children[commandObj.commands[commandIndex]]) {\r\n      command = children[commandObj.commands[commandIndex]];\r\n    } else {\r\n      command = {\r\n        command: commandObj.commands[commandIndex],\r\n        fullCommand: commandObj.commands.slice(0, commandIndex + 1).join(' '),\r\n        desc: isLeafCmd ? commandObj.description : '',\r\n        options: isLeafCmd ? commandObj.options : '',\r\n        runner: isLeafCmd ? commandObj.runner : '',\r\n        children: {},\r\n      };\r\n      children[commandObj.commands[commandIndex]] = command;\r\n    }\r\n\r\n    if (!isLeafCmd) {\r\n      this.setCommand(commandObj, command, commandIndex + 1);\r\n    }\r\n  }\r\n\r\n  applyCommand(yargsForCmd, command) {\r\n    if (_.isEmpty(command.children)) {\r\n      const options = makeOptions(command.options);\r\n      yargsForCmd.command({\r\n        command: command.command,\r\n        describe: command.desc,\r\n        builder: (argv) => {\r\n          this.runner = command.runner;\r\n          argv.options(options)\r\n          .usage(`Usage\r\n$ st ${command.fullCommand.trim()} [options]\r\n\r\nDescription\r\n${command.desc}`)\r\n          .demandCommand(0, 0, '', '');\r\n          // demandCommand function determines if the command has subcommands.\r\n          // In this case, the command NEVER has subcommand.\r\n          return argv;\r\n        },\r\n      });\r\n    } else {\r\n      const desc = makeSubCommandsDesc(command);\r\n      yargsForCmd.command({\r\n        command: command.command,\r\n        describe: desc,\r\n        builder: (yargsForChildren) => {\r\n          const keys = Object.keys(command.children).sort();\r\n          keys.forEach(key => this.applyCommand(yargsForChildren, command.children[key]));\r\n          yargsForChildren.usage(`Usage\r\n$ st ${command.fullCommand.trim()} <commands> [options]`)\r\n          .demandCommand(1, 1, '', '');\r\n          // demandCommand function determines if the command has subcommands.\r\n          // In this case, the command must have A subcommand.\r\n          return yargsForChildren;\r\n        },\r\n      })\r\n      .help();\r\n    }\r\n  }\r\n\r\n  addCommands(commands) {\r\n    commands.forEach(cmd => this.setCommand(cmd, null, 0));\r\n    const keys = Object.keys(this.commands).sort();\r\n    keys.forEach(key => this.applyCommand(yargs, this.commands[key]));\r\n    yargs.demandCommand(1, 1, '', '');\r\n  }\r\n  // version(optionKey: string, description: string, version: string): Argv;\r\n\r\n  runCommand() {\r\n    return Promise.resolve().then(() => {\r\n      yargs.locale('en').strict(true).help()\r\n      .usage('Usage\\n$ st <commands> [options]')\r\n      .version('version', 'Show version number of Smartthings SDK CLI and Lib',\r\n        `Smartthings SDK Version\\n CLI: ${getCLIVersion()}\\n Library: ${getLibVersion()}`)\r\n      .option('version', {\r\n        alias: 'v',\r\n      });\r\n      const parsedOption = yargs.argv;\r\n      // run command\r\n      log.info(`[COMMAND] ${parsedOption.$0} ${parsedOption._.join(' ')}`);\r\n      return this.runner(parsedOption);\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = CommandManager;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/CommandManager.js\n// module id = 7\n// module chunks = 0","module.exports = require(\"yargs\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"yargs\"\n// module id = 8\n// module chunks = 0","const pathUtil = require('path');\r\nconst Promise = require('bluebird');\r\nconst electron = require('electron');\r\nconst tmp = require('tmp-promise');\r\nconst _ = require('lodash');\r\nconst { spawn } = require('child-process-es6-promise');\r\nconst cloneDeepWith = require('lodash/cloneDeepWith');\r\nconst printer = require('./consolePrinter');\r\nconst Configurator = require('iotcloud-lib').Configurator;\r\nconst Project = require('iotcloud-lib').Project;\r\nconst ProjectManager = require('iotcloud-lib').ProjectManager;\r\n// const SmartAppManager = require('iotcloud-lib').SmartAppManager;\r\n// const SmartAppInstManager = require('iotcloud-lib').SmartAppInstManager;\r\n// const SmartAppSubManager = require('iotcloud-lib').SmartAppSubManager;\r\n// const SmartAppSchManager = require('iotcloud-lib').SmartAppSchManager;\r\nconst ManifestManager = require('iotcloud-lib').ManifestManager;\r\n// const SmartApp = require('iotcloud-lib').SmartApp;\r\n// const SmartAppSubscription = require('iotcloud-lib').SmartAppSubscription;\r\nconst LocationManager = require('iotcloud-lib').LocationManager;\r\nconst DeviceManager = require('iotcloud-lib').DeviceManager;\r\nconst OcfDeviceManager = require('iotcloud-lib').OcfDeviceManager;\r\nconst DeviceProfileManager = require('iotcloud-lib').DeviceProfileManager;\r\nconst C2cDeviceProfileManager = require('iotcloud-lib').C2cDeviceProfileManager;\r\nconst AuthManager = require('iotcloud-lib').AuthManager;\r\nconst fs = require('iotcloud-lib').FileSystemHandler;\r\nconst OneAppController = require('iotcloud-lib').OneAppController;\r\nconst CapabilityManager = require('iotcloud-lib').CapabilityManager;\r\nconst ResourceTypeManager = require('iotcloud-lib').ResourceTypeManager;\r\nconst DevPortalManager = require('iotcloud-lib').DevPortalManager;\r\nconst LogManager = require('iotcloud-lib').OcfLogManager;\r\nconst StLogManager = require('iotcloud-lib').StLogManager;\r\nconst MetaDataGenerator = require('iotcloud-lib').MetaDataGenerator;\r\nconst GroupManager = require('iotcloud-lib').OcfGroupManager;\r\nconst CertManager = require('iotcloud-lib').CertManager;\r\nconst WebConsoleProjectManager = require('iotcloud-lib').WebConsoleProjectManager;\r\nconst PluginManager = require('iotcloud-lib').PluginManager;\r\n\r\nconst { getFlatKeys } = require('iotcloud-lib').util;\r\nconst { getText } = require('iotcloud-lib').TextHandler;\r\nconst StError = require('iotcloud-lib').StError;\r\nconst log = require('iotcloud-lib').StLogger;\r\nconst { getRoot, isFloat } = require('./util.js');\r\n\r\n// const debugLog = require('debug').debug('debugLog');\r\n\r\nlet configurator;\r\n\r\nfunction ensureAuthToken() {\r\n  const refreshToken = configurator.get('refreshToken');\r\n  const accessToken = configurator.get('accessToken');\r\n  if (!accessToken) return Promise.reject(new StError('SIGN_UP_NO_LOGIN', 'accessToken'));\r\n  if (!refreshToken) return Promise.reject(new StError('SIGN_UP_NO_LOGIN', 'refreshToken'));\r\n\r\n  const authManager = new AuthManager(configurator);\r\n  authManager.init();\r\n  return authManager.refreshToken(true);\r\n}\r\n\r\nfunction generateSignInUiFiles(tempDir, purpose) {\r\n  const iotConsoleUri = configurator.getConfig().iotConsole.uri;\r\n\r\n  const templateJsFile = pathUtil.resolve(getRoot(), 'assets/signIn.js');\r\n  const jsFile = pathUtil.resolve(tempDir, 'signIn.js');\r\n  const templateHtmlFile = pathUtil.resolve(getRoot(), 'assets/signIn.html');\r\n  const htmlFile = pathUtil.resolve(tempDir, 'signIn.html');\r\n\r\n  return fs.readFile(templateJsFile, 'utf-8')\r\n    .then((jsContents) => {\r\n      const compiled = _.template(jsContents);\r\n      return fs.writeFile(jsFile, compiled({}), 'utf-8');\r\n    })\r\n    .then(() => fs.readFile(templateHtmlFile, 'utf-8'))\r\n    .then((htmlContents) => {\r\n      const compiled = _.template(htmlContents);\r\n      const hash = `?hash=${Date.now()}`;\r\n      return fs.writeFile(htmlFile, compiled({ iotConsoleUri, purpose, hash }), 'utf-8');\r\n    })\r\n    .then(() => jsFile);\r\n}\r\n\r\nfunction getConfigByUI(purpose) {\r\n  const tempDir = tmp.dirSync();\r\n  return generateSignInUiFiles(tempDir.name, purpose)\r\n    .then(generatedJsFile => spawn(electron, [generatedJsFile]))\r\n    .then(\r\n      ({ stdout, stderr }) => {\r\n        try {\r\n          const config = JSON.parse(stdout.trim());\r\n          if (config) return config;\r\n          throw new Error('SDK configuration not found!');\r\n        } catch (e) {\r\n          const message = stdout.trim() + stderr.trim();\r\n          if (message) {\r\n            throw new StError('LOGIN_ERROR', message);\r\n          } else {\r\n            throw new StError('UI_CLOSED');\r\n          }\r\n        }\r\n      },\r\n      ({ stdout, stderr }) => Promise.reject(new StError('LOGIN_ERROR', stdout + stderr)))\r\n    .finally(() => {\r\n      // Remove temporarilly generated files\r\n      fs.removeSync(tempDir.name);\r\n    });\r\n}\r\n\r\nfunction requestTokenByUI(purpose = 'login') {\r\n  if (purpose !== 'login' && !configurator.get('userId')) {\r\n    throw new StError('NO_LOGIN');\r\n  }\r\n  printer.printOutput(getText('REQUEST_TOKEN.SIGNING_IN_SAMSUNG_ACCOUNT'));\r\n  return getConfigByUI(purpose)\r\n    .then((config) => {\r\n      // override configuration\r\n      Object.keys(config).forEach((key) => {\r\n        if (!config[key]) return;\r\n        if (key === 'authServerUrl') {\r\n          configurator.set('authProvider.uri', config[key]);\r\n        } else {\r\n          configurator.set(key, config[key]);\r\n        }\r\n      });\r\n    });\r\n}\r\n\r\nconst commands = [{\r\n  commands: ['request-token'],\r\n  options: [\r\n    { full: 'show-ui', type: 'boolean', description: getText('REQUEST_TOKEN.OPT.SHOW_UI') },\r\n    { full: 'authcode', type: 'boolean', description: getText('REQUEST_TOKEN.OPT.AUTH_CODE') },\r\n  ],\r\n  description: getText('REQUEST_TOKEN.DESC'),\r\n  runner: ({ 'show-ui': showUi, authcode }) => {\r\n    return Promise.resolve()\r\n      .then(() => {\r\n        if (showUi) {\r\n          return requestTokenByUI();\r\n        } else if (authcode) {\r\n          configurator.set('authCode', authcode);\r\n        }\r\n\r\n        return Promise.resolve();\r\n      })\r\n      .then(() => {\r\n        const authManager = new AuthManager(configurator);\r\n        authManager.init();\r\n        authManager.on('progress', msg => printer.printOutput(msg));\r\n\r\n        return authManager.requestTokenByAuthCode();\r\n      })\r\n      .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n  },\r\n}, {\r\n  commands: ['refresh-token'],\r\n  options: [],\r\n  description: getText('REFRESH_TOKEN.DESC'),\r\n  runner: () => {\r\n    const authManager = new AuthManager(configurator);\r\n    authManager.init();\r\n    return authManager.refreshToken()\r\n      .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n  },\r\n}, {\r\n  commands: ['create', 'project'],\r\n  options: [\r\n    { short: 'n', full: 'name', type: 'string', required: true, description: getText('CREATE_PROJECT.OPT.NAME') },\r\n    { full: 'type', type: 'string', description: getText('CREATE_PROJECT.OPT.TYPE') },\r\n    { full: 'template', type: 'string', description: getText('CREATE_PROJECT.OPT.TEMPLATE') },\r\n    { full: 'device-profile', type: 'string', description: getText('CREATE_PROJECT.OPT.DEVICE_PROFILE') },\r\n    { full: 'main-state', type: 'string', description: getText('CREATE_PROJECT.OPT.MAIN_STATE') },\r\n    { full: 'main-action', type: 'string', description: getText('CREATE_PROJECT.OPT.MAIN_ACTION') },\r\n    { full: 'vid', type: 'string', description: getText('CREATE_PROJECT.OPT.VID') },\r\n    { full: 'import-things-sdk', type: 'string', description: getText('CREATE_PROJECT.OPT.IMPORT_THINGS_SDK') },\r\n    { full: 'app-name', type: 'string', description: getText('CREATE_PROJECT.OPT.APP_NAME') },\r\n    { full: 'app-type', type: 'string', description: getText('CREATE_PROJECT.OPT.APP_TYPE') },\r\n    { full: 'lambda-arn', type: 'array', description: getText('CREATE_PROJECT.OPT.LAMBDA_ARN') },\r\n    { full: 'target-url', type: 'string', description: getText('CREATE_PROJECT.OPT.TARGET_URL') },\r\n    { full: 'plugin-id', type: 'string', description: getText('CREATE_PROJECT.OPT.PLUGIN_ID') },\r\n    { full: 'generate-plugin', type: 'boolean', description: getText('CREATE_PROJECT.OPT.GENERATE_PLUGIN') },\r\n    { full: 'dashboard-card', type: 'boolean', description: getText('CREATE_PROJECT.OPT.DASHBOARD_CARD') },\r\n  ],\r\n  description: getText('CREATE_PROJECT.DESC'),\r\n  runner: ({ name, type = Project.PROJ_TYPE.OCF,\r\n    template, 'device-profile': deviceProfile,\r\n    'main-state': mainState, 'main-action': mainAction, vid,\r\n    'import-things-sdk': importThingsSdk,\r\n    'app-name': appName,\r\n    'app-type': appType,\r\n    'lambda-arn': lambdaArn,\r\n    'target-url': targetUrl,\r\n    'plugin-id': pluginId,\r\n    'generate-plugin': generatePlugin,\r\n    'dashboard-card': enableDashboardCard,\r\n  }) => {\r\n    const projManager = new ProjectManager(configurator.getConfig());\r\n    projManager.init();\r\n    printer.printOutput(getText('CREATE_PROJECT.CREATING', name));\r\n\r\n    if (template) {\r\n      return projManager.createProjectByTemplate(name, process.cwd(), template, type)\r\n        .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n    }\r\n\r\n    switch (type) {\r\n      case Project.PROJ_TYPE.OCF:\r\n        if (generatePlugin && !pluginId) {\r\n          throw new StError('CREATE_PROJECT_PLUGIN_ID_OPT_REQUIRED');\r\n        }\r\n        if (importThingsSdk) {\r\n          return projManager.createProjectFromThingsSDK(name, process.cwd(), importThingsSdk,\r\n              mainState, mainAction, vid, pluginId, generatePlugin)\r\n            .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n        }\r\n\r\n        return projManager.createOcfProject(name, process.cwd(), deviceProfile,\r\n            mainState, mainAction, vid, pluginId, generatePlugin)\r\n          .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n      case Project.PROJ_TYPE.AUTOMATION:\r\n        return projManager.createLambdaAutomationProject(name, process.cwd(), appName, appType,\r\n          lambdaArn, targetUrl)\r\n          .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n      case Project.PROJ_TYPE.C2C:\r\n        if (generatePlugin && !pluginId) {\r\n          throw new StError('CREATE_PROJECT_PLUGIN_ID_OPT_REQUIRED');\r\n        }\r\n        return projManager.createLambdaC2cProject(name, process.cwd(), deviceProfile,\r\n          mainState, mainAction, vid, pluginId, generatePlugin, appName, appType,\r\n          lambdaArn, targetUrl)\r\n          .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n      case Project.PROJ_TYPE.SERVICE:\r\n        if (generatePlugin && !pluginId) {\r\n          throw new StError('CREATE_PROJECT_PLUGIN_ID_OPT_REQUIRED');\r\n        }\r\n        return projManager.createDefaultServicePluginProject(name, process.cwd(), appName, appType,\r\n          lambdaArn, targetUrl, pluginId, generatePlugin, enableDashboardCard)\r\n          .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n      default:\r\n        if (generatePlugin && !pluginId) {\r\n          throw new StError('CREATE_PROJECT_PLUGIN_ID_OPT_REQUIRED');\r\n        }\r\n        return projManager.createOcfProject(name, process.cwd(), deviceProfile,\r\n          mainState, mainAction, vid, pluginId, generatePlugin)\r\n          .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n    }\r\n  },\r\n}, {\r\n  commands: ['list', 'project'],\r\n  options: [],\r\n  description: getText('LIST_PROJECT.DESC'),\r\n  runner: () => {\r\n    const projManager = new ProjectManager();\r\n    // TODO: \"process\" is unavailable on web environment\r\n    return projManager.retrieveProjectList(process.cwd())\r\n      .then(projects => printer.printColumn(projects, ['name', 'type']));\r\n  },\r\n}, {\r\n  commands: ['build', 'project'],\r\n  options: [\r\n    { full: 'project-path', type: 'string', description: getText('BUILD_PROJECT.OPT.PROJECT_PATH') },\r\n    { full: 'sign-ppk', type: 'boolean', description: getText('BUILD_PROJECT.OPT.SIGN_PPK') },\r\n    { full: 'passwd', type: 'string', description: getText('BUILD_PROJECT.OPT.PASSWD') },\r\n  ],\r\n  description: getText('BUILD_PROJECT.DESC'),\r\n  runner: ({ 'project-path': projectPath, 'sign-ppk': signPpk, passwd }) => {\r\n    const projManager = new ProjectManager(configurator.getConfig());\r\n    projManager.init();\r\n    projManager.on('start', msg => printer.printOutput(getText('BUILD_PROJECT.BUILDING', msg)));\r\n    projManager.on('progress', msg => printer.printOutput(msg));\r\n    return projManager.buildProject(projectPath, { signPpk, passwd })\r\n      .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n  },\r\n}, {\r\n  commands: ['export', 'project'],\r\n  options: [\r\n    { full: 'project-path', type: 'string', description: getText('EXPORT_PROJECT.OPT.PROJECT_PATH') },\r\n    { full: 'out', type: 'string', description: getText('EXPORT_PROJECT.OPT.OUT') },\r\n    { full: 'show', type: 'boolean', description: getText('EXPORT_PROJECT.OPT.SHOW') },\r\n  ],\r\n  description: getText('BUILD_PROJECT.DESC'),\r\n  runner: ({ 'project-path': projectPath, out, show }) => {\r\n    const projManager = new ProjectManager(configurator.getConfig());\r\n    projManager.init();\r\n    projManager.on('progress', msg => printer.printOutput(msg));\r\n\r\n    let outputPath = null;\r\n    if (out) {\r\n      outputPath = pathUtil.resolve(out);\r\n    } else {\r\n      outputPath = !show ? `${process.cwd()}/device_def.json` : null;\r\n    }\r\n    return projManager.exportToThingsSDK(projectPath, outputPath)\r\n      .then((device) => {\r\n        if (show) {\r\n          printer.printOutput(JSON.stringify(device, null, 2));\r\n        } else {\r\n          printer.printOutput(getText('COMMON.SUCCESS'));\r\n        }\r\n      });\r\n  },\r\n}, {\r\n  commands: ['list', 'template'],\r\n  options: [\r\n    { full: 'device-profile', type: 'string', description: getText('LIST_TEMPLATE.OPT.DEVICE_PROFILE') },\r\n  ],\r\n  description: getText('LIST_TEMPLATE.DESC'),\r\n  runner: (option) => {\r\n    const searchCriteria = {\r\n      deviceProfile: option['device-profile'],\r\n    };\r\n    const projManager = new ProjectManager(configurator.getConfig());\r\n    projManager.init();\r\n    return projManager.retrieveTemplateList(searchCriteria)\r\n      .then(templates => printer.printColumn(templates, ['id', 'name', 'description']));\r\n  },\r\n}, {\r\n  commands: ['verify', 'ppk'],\r\n  options: [\r\n    { full: 'in', required: true, type: 'string', description: getText('VERIFY_PPK.OPT.IN') },\r\n    { full: 'verbose', type: 'boolean', description: getText('VERIFY_PPK.OPT.VERBOSE') }],\r\n  description: getText('VERIFY_PPK.DESC'),\r\n  runner: ({ in: ppkIn, verbose = false }) => {\r\n    if (!ppkIn) throw new StError('VERIFY_PPK_NO_IN');\r\n    printer.printOutput(getText('VERIFY_PPK.VERIFING', ppkIn));\r\n\r\n    return new ProjectManager().verifyPackage(ppkIn, verbose)\r\n      .then((result) => {\r\n        if (verbose) printer.printOutput(result.stdout);\r\n        if (result.code === 0) {\r\n          printer.printOutput(getText('VERIFY_PPK.SUCCESS', ppkIn));\r\n        } else {\r\n          throw new StError('VERIFY_PPK_FAIL', ppkIn);\r\n        }\r\n      });\r\n  },\r\n}, {\r\n  commands: ['sign', 'ppk'],\r\n  options: [\r\n    { full: 'passwd', type: 'string', description: getText('SIGN_PPK.OPT.PASSWD') },\r\n    { full: 'in', type: 'string', required: true, description: getText('SIGN_PPK.OPT.IN') },\r\n    { full: 'out', type: 'string', description: getText('SIGN_PPK.OPT.OUT') },\r\n  ],\r\n  description: getText('SIGN_PPK.DESC'),\r\n  runner: ({ passwd, in: inPath, out: outPath = inPath }) => {\r\n    printer.printOutput(getText('SIGN_PPK.SIGNING', inPath));\r\n    if (!passwd) throw new StError('SIGN_PPK_NO_REQUIRED');\r\n    return new ProjectManager(configurator.getConfig())\r\n      .signPackage(inPath, false, outPath, passwd)\r\n        .then((result) => {\r\n          if (result.code === 0) {\r\n            printer.printOutput(getText('SIGN_PPK.SUCCESS', outPath));\r\n          } else {\r\n            throw new StError('SIGN_PPK_FAIL', inPath);\r\n          }\r\n        });\r\n  },\r\n}, {\r\n  commands: ['extract', 'ppk'],\r\n  options: [\r\n    { full: 'in', required: true, type: 'string', description: getText('EXTRACT_PPK.OPT.IN') },\r\n    { full: 'out', type: 'string', description: getText('EXTRACT_PPK.OPT.OUT') }],\r\n  description: getText('EXTRACT_PPK.DESC'),\r\n  runner: ({ in: ppkPath, out: outputPath }) => {\r\n    if (!outputPath) throw new StError('EXTRACT_PPK_NO_OUT');\r\n\r\n    printer.printOutput(getText('EXTRACT_PPK.EXTRACTING', ppkPath));\r\n    const projManager = new ProjectManager();\r\n    projManager.on('progress', msg => printer.printOutput(msg));\r\n    return projManager.extractPackage(ppkPath, outputPath)\r\n      .then(() => {\r\n        printer.printOutput(getText('COMMON.SUCCESS'));\r\n      });\r\n  },\r\n}, {\r\n  commands: ['install', 'app'],\r\n  options: [{ full: 'target', type: 'boolean', description: getText('INSTALL_APP.OPT.TARGET') },\r\n            { full: 'serial', type: 'string', description: getText('INSTALL_APP.OPT.SERIAL') },\r\n            { full: 'simulator', type: 'boolean', description: getText('INSTALL_APP.OPT.SIMULATOR') },\r\n            { full: 'sim-path', type: 'string', description: getText('INSTALL_APP.OPT.SIMULATOR_PATH') }],\r\n  description: getText('INSTALL_APP.DESC'),\r\n  runner: ({ target, serial, simulator, 'sim-path': simulatorPath }) => {\r\n    const oac = new OneAppController(configurator.getConfig());\r\n    if (target) {\r\n      return oac.installApplicationToDevice(process.cwd(), serial)\r\n        .then(() => {\r\n          printer.printOutput(getText('INSTALL_APP.SUCCESS'));\r\n        })\r\n        .catch((error) => {\r\n          throw new StError('INSTALL_APP_FAIL', error);\r\n        });\r\n    } else if (simulator) {\r\n      return oac.installApplicationToSimulator('cli', process.cwd(), simulatorPath)\r\n        .then((result) => {\r\n          if (result.code === 0) printer.printOutput(getText('INSTALL_APP.SUCCESS_ON_SIM'));\r\n          else throw new StError('INSTALL_APP_FAIL_ON_SIM');\r\n        });\r\n    }\r\n    throw new StError('INSTALL_APP_NO_OPT');\r\n  },\r\n},\r\n{\r\n  commands: ['register', 'web-console-project'],\r\n  options: [\r\n    { short: 'n', full: 'name', type: 'string', description: getText('REGISTER_WEB_CONSOLE_PROJECT.OPT.NAME') },\r\n    { full: 'description', type: 'string', description: getText('REGISTER_WEB_CONSOLE_PROJECT.OPT.DESCRIPTION') },\r\n  ],\r\n  description: getText('REGISTER_WEB_CONSOLE_PROJECT.DESC'),\r\n  runner: ({ name, description }) => {\r\n    const mgr = new WebConsoleProjectManager(configurator.getConfig());\r\n    mgr.init();\r\n    mgr.on('progress', msg => printer.printOutput(msg));\r\n\r\n    return mgr.createProject(process.cwd(), name, description)\r\n      .then((prj) => {\r\n        printer.printOutput(getText('COMMON.SUCCESS'));\r\n        const result = {\r\n          id: prj.id,\r\n          name: prj.name,\r\n          description: prj.description,\r\n        };\r\n        if (prj.oauthClientId) result.oauthClientId = prj.oauthClientId;\r\n        if (prj.oauthClientSecret) result.oauthClientSecret = prj.oauthClientSecret;\r\n        printer.printOutput(JSON.stringify(result, null, 2));\r\n      });\r\n  },\r\n}, {\r\n  commands: ['describe', 'web-console-project'],\r\n  options: [\r\n    { short: 'i', full: 'id', type: 'string', description: getText('DESCRIBE_WEB_CONSOLE_PROJECT.OPT.ID') },\r\n  ],\r\n  description: getText('DESCRIBE_WEB_CONSOLE_PROJECT.DESC'),\r\n  runner: ({ id }) => {\r\n    const mgr = new WebConsoleProjectManager(configurator.getConfig());\r\n    mgr.init();\r\n    return Promise.resolve()\r\n      .then(() => (id ? mgr.readProject(id) : mgr.readProjectInLocalProject(process.cwd())))\r\n      .then(app => printer.printOutput(JSON.stringify(app, null, 2)));\r\n  },\r\n}, {\r\n  commands: ['list', 'web-console-project'],\r\n  options: [\r\n    // { full: 'type', type: 'string', description: getText('LIST_WEB_CONSOLE_PROJECT.OPT.TYPE') },\r\n  ],\r\n  description: getText('LIST_WEB_CONSOLE_PROJECT.DESC'),\r\n  runner: (\r\n    // { type }\r\n  ) => {\r\n    const mgr = new WebConsoleProjectManager(configurator.getConfig());\r\n    mgr.init();\r\n    return mgr.readProjectList(\r\n      //{ type }\r\n      )\r\n      .then(resp => printer.printColumn(resp, ['id', 'name', 'type', 'status', 'description']));\r\n  },\r\n}, {\r\n  commands: ['update', 'web-console-project'],\r\n  options: [\r\n    { short: 'i', full: 'id', type: 'string', description: getText('UPDATE_WEB_CONSOLE_PROJECT.OPT.ID') },\r\n    { short: 'n', full: 'name', type: 'string', description: getText('UPDATE_WEB_CONSOLE_PROJECT.OPT.NAME') },\r\n    { full: 'description', type: 'string', description: getText('UPDATE_WEB_CONSOLE_PROJECT.OPT.DESCRIPTION') },\r\n  ],\r\n  description: getText('UPDATE_WEB_CONSOLE_PROJECT.DESC'),\r\n  runner: ({ id, name, description }) => {\r\n    const mgr = new WebConsoleProjectManager(configurator.getConfig());\r\n    mgr.init();\r\n    mgr.on('progress', msg => printer.printOutput(msg));\r\n    return mgr.updateProject(process.cwd(), id, name, description)\r\n      .then(() => { printer.printOutput(getText('COMMON.SUCCESS')); });\r\n  },\r\n}, {\r\n  commands: ['unregister', 'web-console-project'],\r\n  options: [\r\n    { short: 'i', full: 'id', type: 'string', description: getText('UNREGISTER_WEB_CONSOLE_PROJECT.OPT.ID') },\r\n    { full: 'force', type: 'boolean', description: getText('UNREGISTER_WEB_CONSOLE_PROJECT.OPT.FORCE') },\r\n  ],\r\n  description: getText('UNREGISTER_WEB_CONSOLE_PROJECT.DESC'),\r\n  runner: ({ id, force }) => {\r\n    const mgr = new WebConsoleProjectManager(configurator.getConfig());\r\n    mgr.init();\r\n    return Promise.resolve()\r\n      .then(() => {\r\n        if (id) {\r\n          return mgr.deleteProject(id);\r\n        }\r\n        const option = {\r\n          force,\r\n        };\r\n\r\n        return mgr.deleteProjectInLocalProject(process.cwd(), option);\r\n      })\r\n      .then(() => { printer.printOutput(getText('COMMON.SUCCESS')); });\r\n  },\r\n}, {\r\n  commands: ['publish', 'web-console-project'],\r\n  options: [\r\n    { short: 'i', full: 'id', type: 'string', description: getText('PUBLISH_WEB_CONSOLE_PROJECT.OPT.ID') },\r\n  ],\r\n  description: getText('PUBLISH_WEB_CONSOLE_PROJECT.DESC'),\r\n  runner: ({ id, force }) => {\r\n    const mgr = new WebConsoleProjectManager(configurator.getConfig());\r\n    mgr.init();\r\n    return Promise.resolve()\r\n      .then(() => {\r\n        if (id) {\r\n          return mgr.publishProject(id);\r\n        }\r\n        const option = {\r\n          force,\r\n        };\r\n\r\n        return mgr.publishProjectInLocalProject(process.cwd(), option);\r\n      })\r\n      .then(() => { printer.printOutput(getText('COMMON.SUCCESS')); });\r\n  },\r\n}, {\r\n  commands: ['unpublish', 'web-console-project'],\r\n  options: [\r\n    { short: 'i', full: 'id', type: 'string', description: getText('UNPUBLISH_WEB_CONSOLE_PROJECT.OPT.ID') },\r\n  ],\r\n  description: getText('UNPUBLISH_WEB_CONSOLE_PROJECT.DESC'),\r\n  runner: ({ id, force }) => {\r\n    const mgr = new WebConsoleProjectManager(configurator.getConfig());\r\n    mgr.init();\r\n    return Promise.resolve()\r\n      .then(() => {\r\n        if (id) {\r\n          return mgr.unpublishProject(id);\r\n        }\r\n        const option = {\r\n          force,\r\n        };\r\n\r\n        return mgr.unpublishProjectInLocalProject(process.cwd(), option);\r\n      })\r\n      .then(() => { printer.printOutput(getText('COMMON.SUCCESS')); });\r\n  },\r\n},\r\n{\r\n  commands: ['launch', 'simulator'],\r\n  options: [],\r\n  description: getText('LAUNCH_ONEAPP_SIMULATOR.DESC'),\r\n  runner: () => {\r\n    return Promise.resolve()\r\n      .then(() => {\r\n        const oac = new OneAppController(configurator.getConfig());\r\n        return oac.launchSimulator();\r\n      })\r\n      .then((result) => {\r\n        if (result.code === 0) printer.printOutput(getText('LAUNCH_ONEAPP_SIMULATOR.SUCCESS'));\r\n        else if (result.code === 100) throw new StError('LAUNCH_ONEAPP_SIM_FAIL_BY_MEMORY');\r\n        else throw new StError('LAUNCH_ONEAPP_SIM_FAIL', result.stderr);\r\n      });\r\n  },\r\n}, {\r\n  commands: ['launch', 'virtual-device'],\r\n  options: [\r\n    { full: 'config-name', type: 'string', description: getText('LAUNCH_VIRTUAL_DEVICE.OPT.CONFIG') },\r\n    { full: 'vd-path', type: 'string', description: getText('LAUNCH_VIRTUAL_DEVICE.OPT.PATH') },\r\n  ],\r\n  description: getText('LAUNCH_VIRTUAL_DEVICE.DESC'),\r\n  runner: ({ 'config-name': configName, 'vd-path': vdPath }) => {\r\n    return Promise.resolve()\r\n      .then(() => {\r\n        const oac = new OneAppController(configurator.getConfig());\r\n        return oac.launchVirtualDevice(configName, vdPath);\r\n      })\r\n      .then((result) => {\r\n        if (result.code === 0) printer.printOutput(getText('LAUNCH_VIRTUAL_DEVICE.SUCCESS'));\r\n        else throw new StError('LAUNCH_VD_FAIL', result.stderr);\r\n      });\r\n  },\r\n}, {\r\n  commands: ['register', 'plugin'],\r\n  options: [\r\n    { full: 'in', required: true, type: 'string', description: getText('REGISTER_PLUGIN.OPT.IN') },\r\n    { full: 'plugin-type', required: true, type: 'string', description: getText('REGISTER_PLUGIN.OPT.PLGNTYPE') }],\r\n  description: getText('REGISTER_PLUGIN.DESC'),\r\n  runner: ({ in: path, 'plugin-type': pluginType }) => ensureAuthToken()\r\n    .then(() => {\r\n      const pm = new PluginManager(configurator.getConfig());\r\n      pm.init();\r\n      return pm.registerPlugin(path, pluginType)\r\n        .then(({ pkgNm }) => printer.printOutput(getText('REGISTER_PLUGIN.SUCCESS', pkgNm)));\r\n    }),\r\n}, {\r\n  commands: ['unregister', 'plugin'],\r\n  options: [\r\n    { short: 'n', full: 'package-name', required: true, type: 'string', description: getText('UNREGISTER_PLUGIN.OPT.PKGNM') },\r\n  ],\r\n  description: getText('UNREGISTER_PLUGIN.DESC'),\r\n  runner: ({ 'package-name': pkgNm }) => ensureAuthToken()\r\n    .then(() => {\r\n      const pm = new PluginManager(configurator.getConfig());\r\n      pm.init();\r\n      return pm.unregisterPlugin(pkgNm)\r\n        .then(() => printer.printOutput(getText('UNREGISTER_PLUGIN.SUCCESS', pkgNm)));\r\n    }),\r\n}, {\r\n  commands: ['list', 'plugin'],\r\n  options: [\r\n    { short: 'n', full: 'package-name', type: 'string', description: getText('LIST_PLUGIN.OPT.PKGNM') },\r\n    { full: 'plugin-type', type: 'string', description: getText('LIST_PLUGIN.OPT.PLGNTYPE') }, // DEVICE|SERVICE\r\n    { full: 'status', type: 'string', description: getText('LIST_PLUGIN.OPT.STATUS') }, // DRAFT|DEVELOP|ALPHA|RC|GOLD|PUBLISHED\r\n  ],\r\n  description: getText('LIST_PLUGIN.DESC'),\r\n  runner: ({ 'package-name': pkgName, 'plugin-type': pluginType, status }) => ensureAuthToken()\r\n    .then(() => {\r\n      const pm = new PluginManager(configurator.getConfig());\r\n      pm.init();\r\n      return pm.retrievePluginList(pkgName, pluginType, status);\r\n    })\r\n    .then((resp) => {\r\n      const printable = resp.map(plugin => ({\r\n        pkgNm: plugin.pkgNm,\r\n        plgnType: plugin.plgnType.substring(4),\r\n        dvcType: plugin.dvcType,\r\n        devStatCd: plugin.devStatCd.substring(4),\r\n        verNm: plugin.verNm,\r\n        verCd: plugin.verCd,\r\n        projectLinked: !!plugin.pjtId,\r\n      }));\r\n      printer.printColumn(printable, ['pkgNm', 'plgnType', 'dvcType', 'devStatCd', 'verNm', 'verCd', 'projectLinked']);\r\n    }),\r\n}, {\r\n  commands: ['describe', 'plugin'],\r\n  options: [\r\n    { short: 'n', full: 'package-name', type: 'string', description: getText('DESCRIBE_PLUGIN.OPT.PKGNM') },\r\n  ],\r\n  description: getText('DESCRIBE_PLUGIN.DESC'),\r\n  runner: ({ 'package-name': pkgName }) => ensureAuthToken()\r\n    .then(() => {\r\n      const pm = new PluginManager(configurator.getConfig());\r\n      pm.init();\r\n      return pm.retrievePlugin(pkgName);\r\n    })\r\n    .then(resp => printer.printOutput(JSON.stringify(resp, null, 2))),\r\n}, {\r\n  commands: ['list', 'manifest'],\r\n  options: [\r\n    { short: 'i', full: 'id', type: 'string', description: getText('LIST_MANIFEST.OPT.ID') },\r\n    { full: 'status', type: 'string', description: getText('LIST_MANIFEST.OPT.STATUS') },\r\n    { full: 'owner-id', type: 'string', description: getText('LIST_MANIFEST.OPT.OWNER_ID') },\r\n    { full: 'type', type: 'string', description: getText('LIST_MANIFEST.OPT.TYPE') },\r\n  ],\r\n  description: getText('LIST_MANIFEST.DESC'),\r\n  runner: ({ id, status, 'owner-id': ownerId, type }) => ensureAuthToken()\r\n    .then(() => {\r\n      const { mnid } = configurator.getConfig();\r\n      if (!mnid) {\r\n        const dpm = new DevPortalManager(configurator);\r\n        dpm.init();\r\n        return dpm.requestMnid();\r\n      }\r\n      return mnid;\r\n    })\r\n    .then(() => {\r\n      const mdm = new ManifestManager(configurator.getConfig());\r\n      mdm.init();\r\n      return mdm.retrieveManifestList(id, status, ownerId, type);\r\n    })\r\n    .then(resp => printer.printColumn(resp, ['mnmn', 'vid', 'version', 'workflowId', 'uid', 'status', 'type'])),\r\n}, {\r\n  commands: ['describe', 'manifest'],\r\n  options: [\r\n    { full: 'type', type: 'string', description: getText('DESCRIBE_MANIFEST.OPT.TYPE') },\r\n    { full: 'mnmn', type: 'string', description: getText('DESCRIBE_MANIFEST.OPT.MNMN') },\r\n    { full: 'vid', type: 'string', description: getText('DESCRIBE_MANIFEST.OPT.VID') },\r\n    { full: 'ver', type: 'string', description: getText('DESCRIBE_MANIFEST.OPT.VERSION') },\r\n    { short: 'i', full: 'id', type: 'string', description: getText('DESCRIBE_MANIFEST.OPT.ID') }],\r\n  description: getText('DESCRIBE_MANIFEST.DESC'),\r\n  runner: ({ type, mnmn, vid, ver, id }) => ensureAuthToken()\r\n    .then(() => {\r\n      const mdm = new ManifestManager(configurator.getConfig());\r\n      mdm.init();\r\n      if (id) {\r\n        return mdm.retrieveManifestById(id);\r\n      }\r\n      if (!mnmn || !vid || !ver || !type) throw new StError('DESCRIBE_MANIFEST_FAIL');\r\n      return mdm.retrieveManifest(mnmn, vid, ver, type);\r\n    })\r\n    .then(manifests => printer.printOutput(JSON.stringify(manifests, null, 2))),\r\n}, {\r\n  commands: ['register', 'manifest'],\r\n  options: [\r\n    { full: 'in', required: true, type: 'string', description: getText('REGISTER_MANIFEST.OPT.IN') },\r\n    { full: 'type', required: true, type: 'string', description: getText('REGISTER_MANIFEST.OPT.TYPE') }],\r\n  description: getText('REGISTER_MANIFEST.DESC'),\r\n  runner: ({ in: path, type }) => ensureAuthToken()\r\n    .then(() => {\r\n      const mdm = new ManifestManager(configurator.getConfig());\r\n      mdm.init();\r\n      return mdm.registerManifest(path, type)\r\n        .then((resp) => {\r\n          if (resp.workflowId) printer.printOutput(getText('REGISTER_MANIFEST.SUCCESS', resp.vid, resp.version));\r\n          else throw new StError('REGISTER_MANIFEST_FAIL', resp.message, resp.data);\r\n        });\r\n    }),\r\n}, {\r\n  commands: ['delete', 'manifest'],\r\n  options: [{ short: 'i', full: 'id', required: true, type: 'string', description: getText('DELETE_MANIFEST.OPT.ID') }],\r\n  description: getText('DELETE_MANIFEST.DESC'),\r\n  runner: ({ id }) => ensureAuthToken()\r\n    .then(() => {\r\n      const mdm = new ManifestManager(configurator.getConfig());\r\n      mdm.init();\r\n      return mdm.deleteManifest(id)\r\n        .then((resp) => {\r\n          if (resp.code === 2000000) {\r\n            const data = resp.data;\r\n            printer.printOutput(getText('DELETE_MANIFEST.SUCCESS', resp.message, data.mnmn, data.vid, data.version));\r\n          } else throw new StError('DELETE_MANIFEST_FAIL', resp.mag);\r\n        });\r\n    }),\r\n}, {\r\n  commands: ['update', 'manifest'],\r\n  options: [\r\n    { short: 'i', full: 'id', required: true, type: 'string', description: getText('UPDATE_MANIFEST.OPT.ID') },\r\n    { full: 'in', required: true, type: 'string', description: getText('UPDATE_MANIFEST.OPT.IN') }],\r\n  description: getText('UPDATE_MANIFEST.DESC'),\r\n  runner: ({ id, in: path }) => ensureAuthToken()\r\n    .then(() => {\r\n      const mdm = new ManifestManager(configurator.getConfig());\r\n      mdm.init();\r\n      return mdm.updateManifest(id, path)\r\n        .then((resp) => {\r\n          if (resp.code === 2000000) printer.printOutput(`${resp.message}, ${resp.data}`);\r\n          else throw new StError('UPDATE_MANIFEST_FAIL', resp.message, resp.data);\r\n        });\r\n    }),\r\n}, {\r\n  commands: ['list', 'device'],\r\n  options: [\r\n    { full: 'resource-model', type: 'boolean', description: getText('LIST_DEVICE.OPT.RESOURCE_MODEL') },\r\n    { full: 'mnid', type: 'string', description: getText('LIST_DEVICE.OPT.MNID') },\r\n    { full: 'name', type: 'string', description: getText('LIST_DEVICE.OPT.NAME') },\r\n    { full: 'type', type: 'string', description: getText('LIST_DEVICE.OPT.TYPE') },\r\n    { full: 'vid', type: 'string', description: getText('LIST_DEVICE.OPT.VID') },\r\n    { full: 'client', type: 'boolean', description: getText('LIST_DEVICE.OPT.CLIENT') },\r\n  ],\r\n  description: getText('LIST_DEVICE.DESC'),\r\n  runner: ({\r\n    'resource-model': resourceModel,\r\n    mnid,\r\n    name: deviceName,\r\n    type: deviceType,\r\n    vid,\r\n    client }) => ensureAuthToken()\r\n    .then(() => {\r\n      if (client) {\r\n        const ocfDeviceManager = new OcfDeviceManager(configurator.getConfig());\r\n        ocfDeviceManager.init();\r\n        return ocfDeviceManager.retrieveClientDeviceList()\r\n          .then(devices => printer.printColumn(devices, ['id', 'type']));\r\n      }\r\n      if (resourceModel) {\r\n        const ocfDeviceManager = new OcfDeviceManager(configurator.getConfig());\r\n        ocfDeviceManager.init();\r\n        const searchCriteria = {};\r\n        if (mnid) searchCriteria.mnmn = mnid;\r\n        if (deviceName) searchCriteria.name = deviceName;\r\n        if (deviceType) searchCriteria.rt = deviceType;\r\n        if (vid) searchCriteria.vid = vid;\r\n        return ocfDeviceManager.retrieveDeviceList(true, searchCriteria)\r\n          .then(devices => printer.printColumn(devices.map(device => device.toListEntry()),\r\n            ['id', 'state', 'name', 'type', 'mnid', 'vid']));\r\n      }\r\n\r\n      const deviceManager = new DeviceManager(configurator.getConfig());\r\n      deviceManager.init();\r\n      return deviceManager.retrieveDeviceList()\r\n        .then(devices => printer.printColumn(devices, ['name', 'deviceId']));\r\n    }),\r\n}, {\r\n  commands: ['describe', 'device'],\r\n  options: [\r\n    { short: 'i', full: 'id', required: true, type: 'string', description: getText('DESCRIBE_DEVICE.OPT.ID') },\r\n    { full: 'resource-model', type: 'boolean', description: getText('DESCRIBE_DEVICE.OPT.RESOURCE_MODEL') },\r\n    { full: 'detail', type: 'boolean', description: getText('DESCRIBE_DEVICE.OPT.DETAIL') },\r\n  ],\r\n  description: getText('DESCRIBE_DEVICE.DESC'),\r\n  runner: ({ id, 'resource-model': resourceModel, detail }) => ensureAuthToken()\r\n    .then(() => {\r\n      if (resourceModel) {\r\n        const ocfDeviceManager = new OcfDeviceManager(configurator.getConfig());\r\n        ocfDeviceManager.init();\r\n        return ocfDeviceManager.retrieveDevice(id)\r\n          .then((device) => {\r\n            printer.printOutput(JSON.stringify(detail ? device : device.toSimple(), null, 2));\r\n          });\r\n      }\r\n      const deviceManager = new DeviceManager(configurator.getConfig());\r\n      deviceManager.init();\r\n      return deviceManager.retrieveDevice(id)\r\n        .then(device => printer.printOutput(JSON.stringify(device, null, 2)));\r\n    }),\r\n}, {\r\n  commands: ['describe', 'device-status'],\r\n  options: [\r\n    { short: 'i', full: 'id', required: true, type: 'string', description: getText('DESCRIBE_DEVICE_STATUS.OPT.ID') },\r\n    { full: 'component', type: 'string', description: getText('DESCRIBE_DEVICE_STATUS.OPT.COMPONENT') },\r\n    { full: 'resource-model', type: 'boolean', description: getText('DESCRIBE_DEVICE_STATUS.OPT.RESOURCE_MODEL') },\r\n    { short: 'r', full: 'resource', type: 'string', description: getText('DESCRIBE_DEVICE_STATUS.OPT.RESOURCE') },\r\n  ],\r\n  description: getText('DESCRIBE_DEVICE_STATUS.DESC'),\r\n  runner: ({ id, component = 'main', 'resource-model': resourceModel, resource }) => ensureAuthToken()\r\n    .then(() => {\r\n      if (resourceModel) {\r\n        if (!resource) throw new StError('NO_RESOURCE_OPTION');\r\n        const ocfDeviceManager = new OcfDeviceManager(configurator.getConfig());\r\n        ocfDeviceManager.init();\r\n        return ocfDeviceManager.retrieveStatus(id, resource)\r\n          .then(status => printer.printOutput(JSON.stringify(status, null, 2)));\r\n      }\r\n\r\n      const deviceManager = new DeviceManager(configurator.getConfig());\r\n      deviceManager.init();\r\n      return deviceManager.retrieveDeviceComponentStatus(id, component)\r\n        .then(status => printer.printOutput(JSON.stringify(status, null, 2)));\r\n    }),\r\n}, {\r\n  commands: ['delete', 'device'],\r\n  options: [\r\n    { short: 'i', full: 'id', required: true, type: 'string', description: getText('DELETE_DEVICE.OPT.ID') },\r\n    { full: 'client', type: 'boolean', description: getText('DELETE_DEVICE.OPT.CLIENT') },\r\n  ],\r\n  description: getText('DELETE_DEVICE.DESC'),\r\n  runner: ({ id, client }) =>\r\n      ensureAuthToken()\r\n      .then(() => {\r\n        const ocfDeviceManager = new OcfDeviceManager(configurator.getConfig());\r\n        ocfDeviceManager.init();\r\n        return ocfDeviceManager.deleteDevice(id, client)\r\n          .catch((error) => {\r\n            if (error.code === 'IOT_CLOUD_DEVICE_NOT_FOUND') {\r\n              const deviceManager = new DeviceManager(configurator.getConfig());\r\n              deviceManager.init();\r\n              return deviceManager.deleteDevice(id)\r\n                .catch((err) => {\r\n                  if (err.code === 'BAD_REQUEST') throw new StError('DEVICE_NOT_FOUND');\r\n                  throw err;\r\n                });\r\n            }\r\n            throw error;\r\n          });\r\n      })\r\n      .then(() => printer.printOutput('Done.')),\r\n}, {\r\n  commands: ['command', 'device'],\r\n  options: [\r\n    { short: 'i', full: 'id', required: true, type: 'string', description: getText('COMMAND_DEVICE.OPT.ID') },\r\n    { full: 'capability', type: 'string', description: getText('COMMAND_DEVICE.OPT.CAPABILITY') },\r\n    { full: 'command', type: 'string', description: getText('COMMAND_DEVICE.OPT.COMMAND') },\r\n    { full: 'args', type: 'string', description: getText('COMMAND_DEVICE.OPT.ARGS') },\r\n    { full: 'component', type: 'string', description: getText('COMMAND_DEVICE.OPT.COMPONENT') },\r\n    { full: 'resource-model', type: 'boolean', description: getText('COMMAND_DEVICE.OPT.RESOURCE_MODEL') },\r\n    { short: 'r', full: 'resource', type: 'string', description: getText('COMMAND_DEVICE.OPT.RESOURCE') },\r\n    { full: 'resource-type', type: 'string', description: getText('COMMAND_DEVICE.OPT.RESOURCE_TYPE') },\r\n    { full: 'interface', type: 'string', description: getText('COMMAND_DEVICE.OPT.INTERFACE') },\r\n  ],\r\n  description: getText('COMMAND_DEVICE.DESC'),\r\n  runner: ({ id, capability, command, args, component = 'main',\r\n    'resource-model': resourceModel, resource: href, prefix,\r\n    'resource-type': rt, interface: interf }) => ensureAuthToken()\r\n    .then(() => {\r\n      if (resourceModel) {\r\n        let commandArgs = {};\r\n        try {\r\n          commandArgs = JSON.parse(args);\r\n        } catch (e) {\r\n          return Promise.reject(new StError('CANNOT_PARSE_JSON'));\r\n        }\r\n\r\n        const ocfDeviceManager = new OcfDeviceManager(configurator.getConfig());\r\n        ocfDeviceManager.init();\r\n        return ocfDeviceManager.commandDevice(id, href, commandArgs, prefix, rt, interf);\r\n      }\r\n\r\n      const deviceManager = new DeviceManager(configurator.getConfig());\r\n      deviceManager.init();\r\n      const deviceCommand = {\r\n        component,\r\n        capability,\r\n        command,\r\n      };\r\n      if (args) {\r\n        deviceCommand.arguments = JSON.parse(args);\r\n      }\r\n\r\n      return deviceManager.commandDevice(id, deviceCommand);\r\n    })\r\n    .then(() => printer.printOutput(getText('COMMON.SUCCESS'))),\r\n}, {\r\n  commands: ['publish', 'device'],\r\n  options: [\r\n    { short: 'i', full: 'id', type: 'string', description: getText('PUBLISH_DEVICE.OPT.ID') },\r\n    { full: 'device-profile', type: 'string', description: getText('PUBLISH_DEVICE.OPT.DEVICE_PROFILE') },\r\n    { full: 'authcode', type: 'string', description: getText('PUBLISH_DEVICE.OPT.AUTH_CODE') },\r\n    { full: 'name', type: 'string', description: getText('PUBLISH_DEVICE.OPT.NAME') },\r\n    { full: 'device-profile-path', type: 'string', description: getText('PUBLISH_DEVICE.OPT.DEVICE_PROFILE_PATH') },\r\n    { full: 'device-key-path', type: 'string', description: getText('PUBLISH_DEVICE.OPT.DEVICE_KEY') },\r\n    { full: 'device-cert-path', type: 'string', description: getText('PUBLISH_DEVICE.OPT.DEVICE_CERT') },\r\n  ],\r\n  description: getText('PUBLISH_DEVICE.DESC'),\r\n  runner: ({ id, 'device-profile': profileId, authcode: authCode, name: deviceName,\r\n    'sso-token': ssoToken, 'device-profile-path': profilePath, 'device-key-path': keyPath, 'device-cert-path': certPath,\r\n  }) => {\r\n    if (profileId && profilePath) return Promise.reject(new StError('AMBIGUOUS_DEVICE_PROFILE_OPT'));\r\n\r\n    const dtm = new DeviceProfileManager(configurator.getConfig());\r\n    let promise;\r\n    if (profileId) {\r\n      promise = dtm.retrieveDeviceProfile(profileId);\r\n    } else if (profilePath) {\r\n      promise = dtm.retrieveDeviceProfileFromFile(profilePath);\r\n    } else {\r\n      promise = dtm.retrieveDeviceProfileInProject(process.cwd());\r\n    }\r\n\r\n    return promise\r\n    .then((deviceProfile) => {\r\n      if (ssoToken) {\r\n        const dm = new OcfDeviceManager(configurator.getConfig());\r\n        dm.init(null, keyPath, certPath);\r\n        return dm.publishDeviceBySsoToken(ssoToken, id, deviceProfile, deviceName);\r\n      }\r\n      if (authCode) {\r\n        const dm = new OcfDeviceManager(configurator.getConfig());\r\n        dm.init(null, keyPath, certPath);\r\n        return dm.publishDevice(authCode, id, deviceProfile, deviceName);\r\n      }\r\n\r\n      return Promise.resolve()\r\n        .then(() => requestTokenByUI('authcode'))\r\n        .then(() => {\r\n          const token = configurator.get('authCode');\r\n          if (!token) throw new StError('PUBLISH_DEVICE_NO_TOKEN');\r\n          const dm = new OcfDeviceManager(configurator.getConfig());\r\n          dm.init(null, keyPath, certPath);\r\n          return dm.publishDevice(token, id, deviceProfile, deviceName);\r\n        });\r\n    })\r\n    .then((result) => {\r\n      if (id) {\r\n        printer.printOutput(getText('COMMON.SUCCESS'));\r\n      } else {\r\n        printer.printOutput(JSON.stringify(result, null, 2));\r\n      }\r\n    });\r\n  },\r\n}, {\r\n  commands: ['list', 'location'],\r\n  options: [],\r\n  description: getText('LIST_LOCATION.DESC'),\r\n  runner: () => ensureAuthToken()\r\n    .then(() => {\r\n      const locationManager = new LocationManager(configurator.getConfig());\r\n      locationManager.init();\r\n      return locationManager.retrieveLocationList();\r\n    })\r\n    .then(locations => printer.printColumn(locations, ['name', 'locationId'])),\r\n}, {\r\n  commands: ['describe', 'location'],\r\n  options: [{ short: 'i', full: 'id', required: true, type: 'string', description: getText('DESCRIBE_LOCATION.OPT.ID') }],\r\n  description: getText('DESCRIBE_LOCATION.DESC'),\r\n  runner: ({ id }) => ensureAuthToken()\r\n    .then(() => {\r\n      const locationManager = new LocationManager(configurator.getConfig());\r\n      locationManager.init();\r\n      return locationManager.retrieveLocation(id);\r\n    })\r\n    .then(location => printer.printOutput(JSON.stringify(location, null, 2))),\r\n}, {\r\n  commands: ['create', 'location'],\r\n  options: [\r\n    { short: 'n', full: 'name', required: true, type: 'string', description: getText('CREATE_LOCATION.OPT.NAME') },\r\n    { full: 'country-code', required: true, type: 'string', description: getText('CREATE_LOCATION.OPT.COUNTRY_CODE') },\r\n    { full: 'latitude', description: getText('CREATE_LOCATION.OPT.LATITUDE') },\r\n    { full: 'longitude', description: getText('CREATE_LOCATION.OPT.LONGITUDE') },\r\n    { full: 'radius', description: getText('CREATE_LOCATION.OPT.RADIUS') },\r\n    { full: 'temperature-scale', type: 'string', description: getText('CREATE_LOCATION.OPT.TEMP_SCALE') }],\r\n  description: getText('CREATE_LOCATION.DESC'),\r\n  runner: ({ name, 'country-code': countryCode, latitude, longitude,\r\n    radius, 'temperature-scale': temperatureScale }) => {\r\n    if (radius && isFloat(radius.toString())) throw new StError('CREATE_LOCATION_NO_RADIUS_FLOAT');\r\n    const rr = parseInt(radius, 10);\r\n    if (radius && !rr) throw new StError('CREATE_LOCATION_NO_RADIUS');\r\n\r\n    return ensureAuthToken()\r\n      .then(() => {\r\n        const locationManager = new LocationManager(configurator.getConfig());\r\n        locationManager.init();\r\n        return locationManager.createLocation(name, countryCode, latitude, longitude, rr,\r\n          temperatureScale);\r\n      })\r\n      .then(location => printer.printOutput(JSON.stringify(location, null, 2)));\r\n  },\r\n}, {\r\n  commands: ['update', 'location'],\r\n  options: [\r\n    { short: 'i', full: 'id', required: true, type: 'string', description: getText('UPDATE_LOCATION.OPT.ID') },\r\n    { short: 'n', full: 'name', type: 'string', description: getText('UPDATE_LOCATION.OPT.NAME') },\r\n    { full: 'latitude', description: getText('UPDATE_LOCATION.OPT.LATITUDE') },\r\n    { full: 'longitude', description: getText('UPDATE_LOCATION.OPT.LONGITUDE') },\r\n    { full: 'radius', description: getText('UPDATE_LOCATION.OPT.RADIUS') },\r\n    { full: 'temperature-scale', type: 'string', description: getText('UPDATE_LOCATION.OPT.TEMP_SCALE') }],\r\n  description: getText('UPDATE_LOCATION.DESC'),\r\n  runner: ({ id, name, latitude, longitude,\r\n    radius, 'temperature-scale': temperatureScale }) => {\r\n    if (radius && isFloat(radius.toString())) throw new StError('UPDATE_LOCATION_NO_RADIUS_FLOAT');\r\n    const rr = parseInt(radius, 10);\r\n    if (radius && !rr) throw new StError('UPDATE_LOCATION_NO_RADIUS');\r\n\r\n    return ensureAuthToken()\r\n      .then(() => {\r\n        const locationManager = new LocationManager(configurator.getConfig());\r\n        locationManager.init();\r\n        return locationManager.updateLocation(id, name, latitude, longitude, rr, temperatureScale);\r\n      })\r\n      .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n  },\r\n}, {\r\n  commands: ['delete', 'location'],\r\n  options: [{ short: 'i', full: 'id', required: true, type: 'string', description: getText('DELETE_LOCATION.OPT.ID') }],\r\n  description: getText('DELETE_LOCATION.DESC'),\r\n  runner: ({ id }) => {\r\n    if (!id) throw new StError('DELETE_LOCATION_NO_ID');\r\n\r\n    return ensureAuthToken()\r\n      .then(() => {\r\n        const locationManager = new LocationManager(configurator.getConfig());\r\n        locationManager.init();\r\n        return locationManager.deleteLocation(id);\r\n      })\r\n      .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n  },\r\n}, {\r\n  commands: ['create', 'group'],\r\n  options: [\r\n    { short: 'n', full: 'name', required: true, type: 'string', description: getText('CREATE_GROUP.OPT.NAME') },\r\n    { full: 'parent', type: 'string', description: getText('CREATE_GROUP.OPT.PARENT') },\r\n  ],\r\n  description: getText('CREATE_GROUP.DESC'),\r\n  runner: ({ name, parent }) =>\r\n      ensureAuthToken()\r\n      .then(() => {\r\n        const gm = new GroupManager(configurator.getConfig());\r\n        gm.init();\r\n        // TODO: members parameters\r\n        return gm.createGroup(name, parent);\r\n      })\r\n      .then(group => printer.printOutput(`id: ${group.id}`)),\r\n}, {\r\n  commands: ['list', 'group'],\r\n  options: [],\r\n  description: getText('LIST_GROUP.DESC'),\r\n  runner: () =>\r\n      ensureAuthToken()\r\n      .then(() => {\r\n        const gm = new GroupManager(configurator.getConfig());\r\n        gm.init();\r\n        return gm.retrieveGroupList();\r\n      })\r\n      .then((res) => {\r\n        const response = cloneDeepWith(res, (v, k) => {\r\n          if (Array.isArray(v) &&\r\n            (k === 'subgroups' || k === 'members' || k === 'devices')) {\r\n            return v.join('\\n');\r\n          }\r\n          return undefined;\r\n        });\r\n        printer.printColumn(response, ['id', 'name', 'owner', 'parent', 'members', 'devices']);\r\n      }),\r\n}, {\r\n  commands: ['describe', 'group'],\r\n  options: [{ short: 'i', full: 'id', required: true, type: 'string', description: getText('DESCRIBE_GROUP.OPT.ID') },\r\n  ],\r\n  description: getText('DESCRIBE_GROUP.DESC'),\r\n  runner: ({ id }) =>\r\n      ensureAuthToken()\r\n      .then(() => {\r\n        const gm = new GroupManager(configurator.getConfig());\r\n        gm.init();\r\n        return gm.retrieveGroup(id);\r\n      })\r\n      .then((group) => {\r\n        const g = `id: ${group.id}\r\nname: ${group.name}\r\nowner: ${group.owner}\r\nparent: ${group.parent || ''}\r\nsubgroup: ${group.subGroups || ''}\r\nmembers: ${group.members || ''}\r\ndevices: ${group.devices || ''}`;\r\n        printer.printOutput(g);\r\n      }),\r\n}, {\r\n  commands: ['update', 'group'],\r\n  options: [\r\n    { short: 'i', full: 'id', required: true, type: 'string', description: getText('UPDATE_GROUP.OPT.ID') },\r\n    { short: 'o', full: 'operation', required: true, type: 'string', description: getText('UPDATE_GROUP.OPT.OPERATION') },\r\n    { full: 'devices', type: 'array', description: getText('UPDATE_GROUP.OPT.DEVICES') },\r\n    { full: 'members', type: 'array', description: getText('UPDATE_GROUP.OPT.MEMBERS') }],\r\n  description: getText('UPDATE_GROUP.DESC'),\r\n  runner: ({ id, operation, devices, members }) =>\r\n      ensureAuthToken()\r\n      .then(() => {\r\n        const gm = new GroupManager(configurator.getConfig());\r\n        gm.init();\r\n        // TODO: masters, resources parameters\r\n        return gm.updateGroup(id, operation, members, null, devices, null);\r\n      })\r\n      .then(() => printer.printOutput('Done.')),\r\n}, {\r\n  commands: ['delete', 'group'],\r\n  options: [\r\n    { short: 'i', full: 'id', required: true, type: 'string', description: getText('DELETE_GROUP.OPT.ID') },\r\n  ],\r\n  description: getText('DELETE_GROUP.DESC'),\r\n  runner: ({ id }) =>\r\n      ensureAuthToken()\r\n      .then(() => {\r\n        const gm = new GroupManager(configurator.getConfig());\r\n        gm.init();\r\n        return gm.deleteGroup(id);\r\n      })\r\n      .then(() => printer.printOutput('Done.')),\r\n},\r\n/* eslint-disable */\r\n/*\r\n{\r\n  commands: ['register', 'smart-app'],\r\n  options: [\r\n    { short: 'n', full: 'name', type: 'string', description: getText('REGISTER_ENDPOINT_APP.OPT.NAME') },\r\n    { full: 'display-name', type: 'string', description: getText('REGISTER_ENDPOINT_APP.OPT.DISPLAY_NAME') },\r\n    { full: 'description', type: 'string', description: getText('REGISTER_ENDPOINT_APP.OPT.DESCRIPTION') },\r\n    { full: 'lambda-arn', type: 'string', description: getText('REGISTER_ENDPOINT_APP.OPT.LAMBDA_ARN') },\r\n    { full: 'single-instance', type: 'boolean', description: getText('REGISTER_ENDPOINT_APP.OPT.SINGLE_INSTANCE') },\r\n    { full: 'app-type', type: 'string', description: getText('REGISTER_ENDPOINT_APP.OPT.APP_TYPE') },\r\n    { full: 'target-url', type: 'string', description: getText('REGISTER_ENDPOINT_APP.OPT.TARGET_URL') },\r\n  ],\r\n  description: getText('REGISTER_ENDPOINT_APP.DESC'),\r\n  runner: ({ name: appName, 'display-name': displayName, description,\r\n    'lambda-arn': lambdaArn, 'single-instance': singleInstance,\r\n    'app-type': appType, 'target-url': targetUrl }) => {\r\n    const manager = new SmartAppManager(configurator.getConfig());\r\n\r\n    manager.init();\r\n    manager.on('progress', msg => debugLog(msg));\r\n\r\n    return ensureAuthToken()\r\n      .then(() => {\r\n        if (appName) {\r\n          if (!appType || appType === 'LAMBDA') {\r\n            return manager.registerLambdaSmartApp(appName, displayName, description,\r\n              singleInstance, lambdaArn);\r\n          } else if (appType === 'WEBHOOK') {\r\n            return manager.registerWebhookSmartApp(appName, displayName, description,\r\n              singleInstance, targetUrl);\r\n          }\r\n          throw new StError('INVALID_SMART_APP_TYPE', appType);\r\n        }\r\n\r\n        const projPath = process.cwd();\r\n        return manager.registerSmartAppInProject(projPath);\r\n      })\r\n      .then(app => printer.printOutput(JSON.stringify(app, null, 2)));\r\n  },\r\n}, {\r\n  commands: ['list', 'smart-app'],\r\n  options: [],\r\n  description: getText('LIST_ENDPOINT_APP.DESC'),\r\n  runner: () => {\r\n    const cam = new SmartAppManager(configurator.getConfig());\r\n    cam.init();\r\n    let result = [];\r\n    return ensureAuthToken()\r\n      .then(() => cam.retrieveSmartAppList(SmartApp.APP_TYPE.LAMBDA))\r\n      .then((apps) => {\r\n        result = result.concat(apps);\r\n        return cam.retrieveSmartAppList(SmartApp.APP_TYPE.WEBHOOK);\r\n      })\r\n      .then((apps) => {\r\n        result = result.concat(apps);\r\n        if (result.length) {\r\n          printer.printColumn(result, ['appName', 'appId', 'appType']);\r\n        } else {\r\n          printer.printOutput(getText('COMMON.EMPTY'));\r\n        }\r\n      });\r\n  },\r\n}, {\r\n  commands: ['describe', 'smart-app'],\r\n  options: [\r\n    { short: 'i', full: 'id', type: 'string', description: getText('DESCRIBE_ENDPOINT_APP.OPT.ID') },\r\n    { short: 'n', full: 'name', type: 'string', description: getText('DESCRIBE_ENDPOINT_APP.OPT.NAME') },\r\n  ],\r\n  description: getText('DESCRIBE_ENDPOINT_APP.DESC'),\r\n  runner: ({ id, name }) => {\r\n    const nameOrId = id || name;\r\n    const cam = new SmartAppManager(configurator.getConfig());\r\n    cam.init();\r\n\r\n    return ensureAuthToken()\r\n      .then(() => {\r\n        if (nameOrId) return cam.retrieveSmartApp(nameOrId);\r\n\r\n        const projPath = process.cwd();\r\n        return cam.retrieveSmartAppInProject(projPath);\r\n      })\r\n      .then(app => printer.printOutput(JSON.stringify(app, null, 2)));\r\n  },\r\n}, {\r\n  commands: ['update', 'smart-app'],\r\n  options: [\r\n    { short: 'i', full: 'id', type: 'string', description: getText('UPDATE_ENDPOINT_APP.OPT.ID') },\r\n    { short: 'n', full: 'name', type: 'string', description: getText('UPDATE_ENDPOINT_APP.OPT.NAME') },\r\n    { full: 'display-name', type: 'string', description: getText('UPDATE_ENDPOINT_APP.OPT.DISPLAY_NAME') },\r\n    { full: 'description', type: 'string', description: getText('UPDATE_ENDPOINT_APP.OPT.DESCRIPTION') },\r\n    { full: 'lambda-arn', type: 'string', description: getText('UPDATE_ENDPOINT_APP.OPT.LAMBDA_ARN') },\r\n    { full: 'single-instance', type: 'boolean', description: getText('UPDATE_ENDPOINT_APP.OPT.SINGLE_INSTANCE') },\r\n  ],\r\n  description: getText('UPDATE_ENDPOINT_APP.DESC'),\r\n  runner: ({ id, name, 'display-name': displayName, description,\r\n    'lambda-arn': lambdaArn, 'single-instance': singleInstance,\r\n  }) => {\r\n    const nameOrId = id || name;\r\n    const manager = new SmartAppManager(configurator.getConfig());\r\n    manager.init();\r\n    manager.on('progress', msg => debugLog(msg));\r\n\r\n    return ensureAuthToken()\r\n      .then(() => {\r\n        if (nameOrId) {\r\n          return manager.updateLambdaSmartApp(nameOrId, displayName, description,\r\n            singleInstance, lambdaArn);\r\n        }\r\n\r\n        const projPath = process.cwd();\r\n        return manager.updateLambdaSmartAppInProject(projPath, displayName, description,\r\n          singleInstance, lambdaArn);\r\n      })\r\n      .then(app => printer.printOutput(JSON.stringify(app, null, 2)));\r\n  },\r\n}, {\r\n  commands: ['unregister', 'smart-app'],\r\n  options: [\r\n    { short: 'i', full: 'id', type: 'string', description: getText('UNREGISTER_ENDPOINT_APP.OPT.ID') },\r\n    { short: 'n', full: 'name', type: 'string', description: getText('UNREGISTER_ENDPOINT_APP.OPT.NAME') },\r\n    { full: 'force-delete-lambda', type: 'boolean', description: getText('UNREGISTER_ENDPOINT_APP.OPT.FORCE_DELETE_LAMBDA') },\r\n  ],\r\n  description: getText('UNREGISTER_ENDPOINT_APP.DESC'),\r\n  runner: ({ id, name, 'force-delete-lambda': forceDeleteLambda }) => {\r\n    const nameOrId = id || name;\r\n    const cam = new SmartAppManager(configurator.getConfig());\r\n    cam.init();\r\n\r\n    return ensureAuthToken()\r\n      .then(() => {\r\n        if (nameOrId) return cam.deleteLambdaSmartApp(nameOrId, forceDeleteLambda);\r\n\r\n        const projPath = process.cwd();\r\n        return cam.deleteLambdaSmartAppInProject(projPath, forceDeleteLambda);\r\n      })\r\n      .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n  },\r\n}, {\r\n  commands: ['update', 'smart-app-oauth'],\r\n  options: [\r\n    { short: 'i', full: 'id', type: 'string', description: getText('UPDATE_ENDPOINT_APP_OAUTH.OPT.ID') },\r\n    { short: 'n', full: 'name', type: 'string', description: getText('UPDATE_ENDPOINT_APP_OAUTH.OPT.NAME') },\r\n    { full: 'scope', type: 'array', description: getText('UPDATE_ENDPOINT_APP_OAUTH.OPT.SCOPE') },\r\n    { full: 'client-name', type: 'string', description: getText('UPDATE_ENDPOINT_APP_OAUTH.OPT.CLIENT_NAME') }],\r\n  description: getText('UPDATE_ENDPOINT_APP_OAUTH.DESC'),\r\n  runner: ({ id, name, scope, 'client-name': clientName }) => {\r\n    const nameOrId = id || name;\r\n    const cam = new SmartAppManager(configurator.getConfig());\r\n    cam.init();\r\n\r\n    return ensureAuthToken()\r\n      .then(() => {\r\n        if (nameOrId) return cam.updateSmartAppOauth(nameOrId, clientName, scope);\r\n\r\n        return cam.updateSmartAppOauthInProject(process.cwd(), clientName, scope);\r\n      })\r\n      .then(result => printer.printOutput(JSON.stringify(result, null, 2)));\r\n  },\r\n}, {\r\n  commands: ['describe', 'smart-app-oauth'],\r\n  options: [\r\n    { short: 'i', full: 'id', type: 'string', description: getText('DESCRIBE_ENDPOINT_APP_OAUTH.OPT.ID') },\r\n    { short: 'n', full: 'name', type: 'string', description: getText('DESCRIBE_ENDPOINT_APP_OAUTH.OPT.NAME') },\r\n  ],\r\n  description: getText('DESCRIBE_ENDPOINT_APP_OAUTH.DESC'),\r\n  runner: ({ id, name }) => {\r\n    const nameOrId = id || name;\r\n    const cam = new SmartAppManager(configurator.getConfig());\r\n    cam.init();\r\n\r\n    return ensureAuthToken()\r\n      .then(() => {\r\n        if (nameOrId) return cam.retrieveSmartAppOauth(nameOrId);\r\n        return cam.retrieveSmartAppOauthInProject(process.cwd());\r\n      })\r\n      .then(result => printer.printOutput(JSON.stringify(result, null, 2)));\r\n  },\r\n}, {\r\n  commands: ['update', 'smart-app-settings'],\r\n  options: [\r\n    { short: 'i', full: 'id', type: 'string', description: getText('UPDATE_ENDPOINT_APP_SETTINGS.OPT.ID') },\r\n    { short: 'n', full: 'name', type: 'string', description: getText('UPDATE_ENDPOINT_APP_SETTINGS.OPT.NAME') },\r\n    { full: 'settings', type: 'array', description: getText('UPDATE_ENDPOINT_APP_SETTINGS.OPT.SETTINGS') }],\r\n  description: getText('UPDATE_ENDPOINT_APP_SETTINGS.DESC'),\r\n  runner: ({ id, name, settings }) => {\r\n    const nameOrId = id || name;\r\n    const cam = new SmartAppManager(configurator.getConfig());\r\n    cam.init();\r\n\r\n    return ensureAuthToken()\r\n      .then(() => {\r\n        if (nameOrId) return cam.updateSmartAppSettings(nameOrId, settings);\r\n        return cam.updateSmartAppSettingsInProject(process.cwd(), settings);\r\n      })\r\n      .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n  },\r\n}, {\r\n  commands: ['describe', 'smart-app-settings'],\r\n  options: [\r\n    { short: 'i', full: 'id', type: 'string', description: getText('DESCRIBE_ENDPOINT_APP_SETTING.OPT.ID') },\r\n    { short: 'n', full: 'name', type: 'string', description: getText('DESCRIBE_ENDPOINT_APP_SETTING.OPT.NAME') },\r\n  ],\r\n  description: getText('DESCRIBE_ENDPOINT_APP_SETTING.DESC'),\r\n  runner: ({ id, name }) => {\r\n    const nameOrId = id || name;\r\n    const cam = new SmartAppManager(configurator.getConfig());\r\n    cam.init();\r\n\r\n    return ensureAuthToken()\r\n      .then(() => {\r\n        if (nameOrId) return cam.retrieveSmartAppSettings(nameOrId);\r\n        return cam.retrieveSmartAppSettingsInProject(process.cwd());\r\n      })\r\n      .then(result => printer.printOutput(JSON.stringify(result, null, 2)));\r\n  },\r\n}, {\r\n  commands: ['install', 'smart-app'],\r\n  options: [],\r\n  description: getText('INSTALL_ENDPOINT_APP.DESC'),\r\n  runner: () => {\r\n    if (Configurator.isStageMode(configurator.getConfig())) {\r\n      return spawn(electron, [pathUtil.resolve(getRoot(), 'assets/openStrongman_stg.js')]);\r\n    }\r\n    return spawn(electron, [pathUtil.resolve(getRoot(), 'assets/openStrongman.js')]);\r\n  },\r\n// NOTE: keep API version as follows\r\n//   options: [\r\n//     { short: 'i', full: 'id', required: true, description: 'Specify endpoint app ID' },\r\n//     { full: 'type', required: true, description: 'Specify installed app type' },\r\n//     { full: 'status', required: true, description: 'Specify configuration status' },\r\n//     { full: 'config', description: 'Specify configuration file' },\r\n//     { full: 'display', description: 'Specify display name' },\r\n//     { full: 'reference', description: 'Specify reference ID' },\r\n//     { full: 'location', required: true, description: 'Specify location ID' }],\r\n//   description: 'Install endpoint app',\r\n//   runner: ({ id, type, status, config, display, reference, location }) => {\r\n//     ensureAuthToken()\r\n//       .then(() => {\r\n//         const cam = new SmartAppInstManager(configurator.getConfig());\r\n//         cam.init();\r\n//         if (config) {\r\n//           return fs.readFile(config)\r\n//             .then(data =>\r\n//               cam.installApp(id, type, status, JSON.parse(data), display, reference, location));\r\n//         }\r\n//         return cam.installApp(id, type, status, '', display, reference, location);\r\n//       })\r\n//       .then(({ installedApp, configurationDetail }) => {\r\n//         const output = `Installed App\r\n// ${installedApp.toString()}\r\n// Configuration Detail\r\n// ${configurationDetail.toString()}`;\r\n//         printer.printOutput(output);\r\n//       })\r\n//       .catch(e => printer.printOutput(`Error: ${e.message}`));\r\n//   },\r\n}, {\r\n  commands: ['list', 'installed-smart-app'],\r\n  options: [\r\n    { full: 'location', type: 'string', description: getText('LIST_INSTALLED_ENDPOINT_APP.OPT.LOCATION') },\r\n  ],\r\n  description: getText('LIST_INSTALLED_ENDPOINT_APP.DESC'),\r\n  runner: ({ location }) => ensureAuthToken()\r\n    .then(() => {\r\n      const cam = new SmartAppInstManager(configurator.getConfig());\r\n      cam.init();\r\n      return cam.retrieveInstalledAppList(location);\r\n    })\r\n    .then((apps) => {\r\n      if (apps.length) {\r\n        printer.printColumn(\r\n          apps, ['installedAppId', 'appId', 'locationId', 'installedAppStatus', 'installedAppType']);\r\n      } else {\r\n        printer.printOutput(getText('COMMON.EMPTY'));\r\n      }\r\n    }),\r\n}, {\r\n  commands: ['describe', 'installed-smart-app'],\r\n  options: [\r\n    { short: 'i', full: 'id', required: true, type: 'string', description: getText('DESCRIBE_INSTALLED_ENDPOINT_APP.OPT.ID') },\r\n  ],\r\n  description: getText('DESCRIBE_INSTALLED_ENDPOINT_APP.DESC'),\r\n  runner: ({ id }) => ensureAuthToken()\r\n    .then(() => {\r\n      const cam = new SmartAppInstManager(configurator.getConfig());\r\n      cam.init();\r\n      return cam.retrieveInstalledApp(id);\r\n    })\r\n    .then(app => printer.printOutput(JSON.stringify(app, null, 2))),\r\n}, {\r\n  commands: ['describe', 'installed-smart-app-config'],\r\n  options: [\r\n    { short: 'i', full: 'id', required: true, type: 'string', description: getText('DESCRIBE_INSTALLED_ENDPOINT_APP_CONFIG.OPT.ID') },\r\n    { full: 'configuration', required: true, type: 'string', description: getText('DESCRIBE_INSTALLED_ENDPOINT_APP_CONFIG.OPT.CONFIGURATION') },\r\n  ],\r\n  description: getText('DESCRIBE_INSTALLED_ENDPOINT_APP_CONFIG.DESC'),\r\n  runner: ({ id, configuration: cid }) => ensureAuthToken()\r\n    .then(() => {\r\n      const cam = new SmartAppInstManager(configurator.getConfig());\r\n      cam.init();\r\n      return cam.retrieveInstalledAppConfig(id, cid);\r\n    })\r\n    .then(config => printer.printOutput(JSON.stringify(config, null, 2))),\r\n}, {\r\n  commands: ['uninstall', 'installed-smart-app'],\r\n  options: [\r\n    { short: 'i', full: 'id', required: true, type: 'string', description: getText('UNINSTALL_INSTALLED_ENDPOINT_APP.OPT.ID') },\r\n  ],\r\n  description: getText('UNINSTALL_INSTALLED_ENDPOINT_APP.DESC'),\r\n  runner: ({ id }) => ensureAuthToken()\r\n    .then(() => {\r\n      const cam = new SmartAppInstManager(configurator.getConfig());\r\n      cam.init();\r\n      return cam.uninstallApp(id);\r\n    })\r\n    .then(() => printer.printOutput(getText('COMMON.SUCCESS'))),\r\n}, {\r\n  commands: ['create', 'subscription'],\r\n  options: [\r\n    { full: 'installed-smart-app', required: true, type: 'string', description: getText('CREATE_SUBSCRIPTION.OPT.INSTALLED_ENDPOINT_APP') },\r\n    { full: 'source-type', required: true, type: 'string', description: getText('CREATE_SUBSCRIPTION.OPT.SOURCE_TYPE') },\r\n    { full: 'name', type: 'string', description: getText('CREATE_SUBSCRIPTION.OPT.NAME') },\r\n    { full: 'device', type: 'string', description: getText('CREATE_SUBSCRIPTION.OPT.DEVICE') },\r\n    { full: 'location', type: 'string', description: getText('CREATE_SUBSCRIPTION.OPT.LOCATION') },\r\n    { full: 'component', type: 'string', description: getText('CREATE_SUBSCRIPTION.OPT.COMPONENT') },\r\n    { full: 'capability', type: 'string', description: getText('CREATE_SUBSCRIPTION.OPT.CAPABILITY') },\r\n    { full: 'attribute', type: 'string', description: getText('CREATE_SUBSCRIPTION.OPT.ATTRIBUTE') },\r\n    { full: 'value', description: getText('CREATE_SUBSCRIPTION.OPT.VALUE') },\r\n    { full: 'state-change-only', type: 'boolean', description: getText('CREATE_SUBSCRIPTION.OPT.STATE_CHANGE_ONLY') }],\r\n  description: getText('CREATE_SUBSCRIPTION.DESC'),\r\n  runner: ({ 'installed-smart-app': instAppId, 'source-type': sourceType,\r\n    name, device, location, component, capability, attribute, value,\r\n    'state-change-only': stateChangeOnly }) => {\r\n    if (!name) throw new StError('CREATE_SUBSCRIPTION_NO_NAME');\r\n\r\n    return ensureAuthToken()\r\n      .then(() => {\r\n        const cam = new SmartAppSubManager(configurator.getConfig());\r\n        cam.init();\r\n\r\n        const details = {};\r\n        switch (sourceType) {\r\n          case SmartAppSubscription.SOURCE_TYPE.CAPABILITY:\r\n            if (!location) throw new StError('CREATE_SUBSCRIPTION_NO_LOCATION');\r\n            details.locationId = location;\r\n            break;\r\n          case SmartAppSubscription.SOURCE_TYPE.DEVICE:\r\n            if (!device) throw new StError('CREATE_SUBSCRIPTION_NO_DEVICE');\r\n            details.deviceId = device;\r\n            details.componentId = component || '*';\r\n            break;\r\n          default:\r\n            throw new StError('CREATE_SUBSCRIPTION_NO_SOURCE', sourceType);\r\n        }\r\n        details.capability = capability || '*';\r\n        details.attribute = attribute || '*';\r\n        details.value = value || '*';\r\n        details.stateChangeOnly = stateChangeOnly || false;\r\n        details.subscriptionName = name;\r\n\r\n        return cam.subscribe(instAppId, sourceType, details);\r\n      })\r\n      .then(subscription => printer.printOutput(JSON.stringify(subscription, null, 2)));\r\n  },\r\n}, {\r\n  commands: ['delete', 'subscription'],\r\n  options: [\r\n    { short: 'i', full: 'id', required: true, type: 'string', description: getText('DELETE_SUBSCRIPTION.OPT.ID') },\r\n    { full: 'installed-smart-app', required: true, type: 'string', description: getText('DELETE_SUBSCRIPTION.OPT.INSTALLED_ENDPOINT_APP') }],\r\n  description: getText('DELETE_SUBSCRIPTION.DESC'),\r\n  runner: ({ id, 'installed-smart-app': instAppId }) => ensureAuthToken()\r\n    .then(() => {\r\n      const cam = new SmartAppSubManager(configurator.getConfig());\r\n      cam.init();\r\n      return cam.unsubscribe(instAppId, id);\r\n    })\r\n    .then(() => printer.printOutput(getText('COMMON.SUCCESS'))),\r\n}, {\r\n  commands: ['list', 'subscription'],\r\n  options: [{ full: 'installed-smart-app', required: true, type: 'string', description: getText('LIST_SUBSCRIPTION.OPT.INSTALLED_ENDPOINT_APP') }],\r\n  description: getText('LIST_SUBSCRIPTION.DESC'),\r\n  runner: ({ 'installed-smart-app': instAppId }) => ensureAuthToken()\r\n    .then(() => {\r\n      const cam = new SmartAppSubManager(configurator.getConfig());\r\n      cam.init();\r\n      return cam.retrieveSubscriptionList(instAppId);\r\n    })\r\n    .then((apps) => {\r\n      if (apps.length) {\r\n        printer.printColumn(apps, ['id', 'installedAppId', 'sourceType']);\r\n      } else {\r\n        printer.printOutput(getText('COMMON.EMPTY'));\r\n      }\r\n    }),\r\n}, {\r\n  commands: ['describe', 'subscription'],\r\n  options: [\r\n    { short: 'i', full: 'id', required: true, type: 'string', description: getText('DESCRIBE_SUBSCRIPTION.OPT.ID') },\r\n    { full: 'installed-smart-app', required: true, type: 'string', description: getText('DESCRIBE_SUBSCRIPTION.OPT.INSTALLED_ENDPOINT_APP') }],\r\n  description: getText('DESCRIBE_SUBSCRIPTION.DESC'),\r\n  runner: ({ id, 'installed-smart-app': instAppId }) => ensureAuthToken()\r\n    .then(() => {\r\n      const cam = new SmartAppSubManager(configurator.getConfig());\r\n      cam.init();\r\n      return cam.retrieveSubscription(instAppId, id);\r\n    })\r\n    .then(subscription => printer.printOutput(JSON.stringify(subscription, null, 2))),\r\n}, {\r\n  commands: ['create', 'schedule'],\r\n  options: [\r\n    { full: 'installed-smart-app', required: true, type: 'string', description: getText('CREATE_SCHEDULE.OPT.INSTALLED_ENDPOINT_APP') },\r\n    { full: 'name', required: true, type: 'string', description: getText('CREATE_SCHEDULE.OPT.NAME') },\r\n    { full: 'cron-expr', type: 'string', description: getText('CREATE_SCHEDULE.OPT.CRON_EXPR') },\r\n    { full: 'cron-timezone', type: 'string', description: getText('CREATE_SCHEDULE.OPT.CRON_TIMEZONE') },\r\n    { full: 'once', type: 'booelan', description: getText('CREATE_SCHEDULE.OPT.ONCE') },\r\n    { full: 'once-overwrite', type: 'boolean', description: getText('CREATE_SCHEDULE.OPT.ONCE_OVERWRITE') }],\r\n  description: getText('CREATE_SCHEDULE.DESC'),\r\n  runner: ({ 'installed-smart-app': instAppId, name, 'cron-expr': cronExpr,\r\n    'cron-timezone': cronTimezone, once, 'once-overwrite': onceOverwrite }) => ensureAuthToken()\r\n    .then(() => {\r\n      const cam = new SmartAppSchManager(configurator.getConfig());\r\n      cam.init();\r\n      return cam.createSchedule(instAppId, name, cronExpr, cronTimezone, once, onceOverwrite);\r\n    })\r\n    .then(schedule => printer.printOutput(JSON.stringify(schedule, null, 2))),\r\n}, {\r\n  commands: ['list', 'schedule'],\r\n  options: [{ full: 'installed-smart-app', required: true, type: 'string', description: getText('LIST_SCHEDULE.OPT.INSTALLED_ENDPOINT_APP') }],\r\n  description: getText('LIST_SCHEDULE.DESC'),\r\n  runner: ({ 'installed-smart-app': instAppId }) => ensureAuthToken()\r\n    .then(() => {\r\n      const cam = new SmartAppSchManager(configurator.getConfig());\r\n      cam.init();\r\n      return cam.retrieveScheduleList(instAppId);\r\n    })\r\n    .then((schedules) => {\r\n      if (schedules.length) {\r\n        printer.printColumn(schedules, ['installedAppId', 'name', 'scheduledExecutions']);\r\n      } else {\r\n        printer.printOutput(getText('COMMON.EMPTY'));\r\n      }\r\n    }),\r\n}, {\r\n  commands: ['describe', 'schedule'],\r\n  options: [\r\n    { short: 'n', full: 'name', required: true, type: 'string', description: getText('DESCRIBE_SCHEDULE.OPT.NAME') },\r\n    { full: 'installed-smart-app', required: true, type: 'string', description: getText('DESCRIBE_SCHEDULE.OPT.INSTALLED_ENDPOINT_APP') }],\r\n  description: getText('DESCRIBE_SCHEDULE.DESC'),\r\n  runner: ({ name, 'installed-smart-app': instAppId }) => ensureAuthToken()\r\n    .then(() => {\r\n      const cam = new SmartAppSchManager(configurator.getConfig());\r\n      cam.init();\r\n      return cam.retrieveSchedule(instAppId, name);\r\n    })\r\n    .then(schedule => printer.printOutput(JSON.stringify(schedule, null, 2))),\r\n}, {\r\n  commands: ['delete', 'schedule'],\r\n  options: [\r\n    { short: 'n', full: 'name', required: true, type: 'string', description: getText('DELETE_SCHEDULE.OPT.NAME') },\r\n    { full: 'installed-smart-app', required: true, type: 'string', description: getText('DELETE_SCHEDULE.OPT.INSTALLED_ENDPOINT_APP') }],\r\n  description: getText('DELETE_SCHEDULE.DESC'),\r\n  runner: ({ name, 'installed-smart-app': instAppId }) => ensureAuthToken()\r\n    .then(() => {\r\n      const cam = new SmartAppSchManager(configurator.getConfig());\r\n      cam.init();\r\n      return cam.deleteSchedule(instAppId, name);\r\n    })\r\n    .then(() => printer.printOutput(getText('COMMON.SUCCESS'))),\r\n},\r\n*/\r\n/* eslint-enable */\r\n{\r\n  commands: ['create', 'device-profile'],\r\n  options: [\r\n    { full: 'in', required: true, type: 'string', description: getText('CREATE_DEVICE_PROFILE.OPT.IN') },\r\n  ],\r\n  description: getText('CREATE_DEVICE_PROFILE.DESC'),\r\n  runner: ({ in: inputFile }) => {\r\n    const manager = new DeviceProfileManager(configurator.getConfig());\r\n\r\n    return fs.exists(inputFile)\r\n      .then((exists) => {\r\n        if (!exists) {\r\n          throw new StError('CREATE_DEVICE_PROFILE_NO_INPUT');\r\n        }\r\n        return fs.readJson(inputFile)\r\n          .then(deviceType => manager.createDeviceProfile('capability', deviceType))\r\n          .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n      });\r\n  },\r\n},\r\n{\r\n  commands: ['list', 'device-profile'],\r\n  options: [\r\n    { full: 'built-in', type: 'boolean', description: getText('LIST_DEVICE_PROFILE.OPT.BUILT_IN') },\r\n    { full: 'category', type: 'string', description: getText('LIST_DEVICE_PROFILE.OPT.CATEGORY') },\r\n    { full: 'type', type: 'string', description: getText('LIST_DEVICE_PROFILE.OPT.TYPE') },\r\n  ],\r\n  description: getText('LIST_DEVICE_PROFILE.DESC'),\r\n  runner: (option) => {\r\n    const type = option.type;\r\n    const category = option.category;\r\n    const searchCriteria = {\r\n      builtIn: option['built-in'],\r\n      type,\r\n      category,\r\n    };\r\n    const manager = new DeviceProfileManager(configurator.getConfig());\r\n    return manager.retrieveDeviceProfileList(searchCriteria)\r\n      .then((deviceProfiles) => {\r\n        if (deviceProfiles.length) {\r\n          printer.printColumn(deviceProfiles, ['id', 'name', 'type', 'category']);\r\n        } else {\r\n          printer.printOutput(getText('COMMON.EMPTY'));\r\n        }\r\n      });\r\n  },\r\n}, {\r\n  commands: ['describe', 'device-profile'],\r\n  options: [\r\n    { short: 'i', full: 'id', type: 'string', description: getText('DESCRIBE_DEVICE_PROFILE.OPT.ID') },\r\n    { full: 'in', type: 'string', description: getText('DESCRIBE_DEVICE_PROFILE.OPT.IN') },\r\n    { full: 'resource-model', type: 'boolean', description: getText('DESCRIBE_DEVICE_PROFILE.OPT.RESOURCE_MODEL') },\r\n  ],\r\n  description: getText('DESCRIBE_DEVICE_PROFILE.DESC'),\r\n  runner: ({ id, 'resource-model': showResourceModel, in: path }) => {\r\n    if (id && path) return Promise.reject(new StError('DESCRIBE_DEVICE_PROFILE_NO_BOTH_OPTION'));\r\n    const manager = new DeviceProfileManager(configurator.getConfig());\r\n    let promise;\r\n    if (id) {\r\n      promise = manager.retrieveDeviceProfile(id);\r\n    } else if (path) {\r\n      promise = manager.retrieveDeviceProfileFromFile(path);\r\n    } else {\r\n      promise = manager.retrieveDeviceProfileInProject(process.cwd());\r\n    }\r\n    return promise\r\n      .then((deviceProfile) => {\r\n        let profile = deviceProfile;\r\n        if (showResourceModel) {\r\n          profile = manager.convertToResourceModelByDeviceProfile(deviceProfile);\r\n        }\r\n\r\n        printer.printOutput(JSON.stringify(profile, null, 2));\r\n      });\r\n  },\r\n}, {\r\n  commands: ['update', 'device-profile'],\r\n  options: [\r\n    { full: 'id', required: true, type: 'string', description: getText('UPDATE_DEVICE_PROFILE.OPT.ID') },\r\n    { full: 'in', required: true, type: 'string', description: getText('UPDATE_DEVICE_PROFILE.OPT.IN') },\r\n  ],\r\n  description: getText('UPDATE_DEVICE_PROFILE.DESC'),\r\n  runner: ({ id, in: inputFile }) => {\r\n    const manager = new DeviceProfileManager(configurator.getConfig());\r\n\r\n    return fs.exists(inputFile)\r\n      .then((exists) => {\r\n        if (!exists) {\r\n          throw new StError('UPDATE_DEVICE_PROFILE_NO_INPUT');\r\n        }\r\n        return fs.readJson(inputFile)\r\n          .then(deviceType => manager.updateDeviceProfile(id, deviceType))\r\n          .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n      });\r\n  },\r\n}, {\r\n  commands: ['delete', 'device-profile'],\r\n  options: [\r\n    { full: 'id', required: true, type: 'string', description: getText('DELETE_DEVICE_PROFILE.OPT.ID') },\r\n  ],\r\n  description: getText('DELETE_DEVICE_PROFILE.DESC'),\r\n  runner: ({ id }) => {\r\n    const manager = new DeviceProfileManager(configurator.getConfig());\r\n\r\n    return manager.deleteDeviceProfile(id)\r\n      .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n  },\r\n},\r\n{\r\n  commands: ['register', 'c2c-device-profile'],\r\n  options: [\r\n    { full: 'device-profile', type: 'string', description: getText('REGISTER_C2C_DEVICE_PROFILE.OPT.DEVICE_PROFILE') },\r\n    { full: 'in', type: 'string', description: getText('REGISTER_C2C_DEVICE_PROFILE.OPT.IN') },\r\n  ],\r\n  description: getText('REGISTER_C2C_DEVICE_PROFILE.DESC'),\r\n  runner: ({ 'device-profile': deviceProfile, in: inputPath }) => {\r\n    if (!inputPath && !deviceProfile) throw new StError('NO_DEVICE_PROFILE_OR_IN');\r\n    // TODO: This case will be added for registering manifest by project information\r\n    const manager = new C2cDeviceProfileManager(configurator.getConfig());\r\n\r\n    manager.init();\r\n    if (deviceProfile) {\r\n      return manager.registerDeviceProfile(deviceProfile)\r\n        .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n    }\r\n    return manager.registerDeviceProfileByJsonFile(inputPath)\r\n      .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n  },\r\n},\r\n{\r\n  commands: ['list', 'c2c-device-profile'],\r\n  options: [],\r\n  description: getText('LIST_C2C_DEVICE_PROFILE.DESC'),\r\n  runner: () => {\r\n    const manager = new C2cDeviceProfileManager(configurator.getConfig());\r\n\r\n    manager.init();\r\n    return manager.retrieveDeviceProfileList()\r\n      .then((deviceProfiles) => {\r\n        if (deviceProfiles.length) {\r\n          printer.printColumn(deviceProfiles, ['id', 'name']);\r\n        } else {\r\n          printer.printOutput(getText('COMMON.SUCCESS'));\r\n        }\r\n      });\r\n  },\r\n}, {\r\n  commands: ['describe', 'c2c-device-profile'],\r\n  options: [\r\n    { short: 'i', full: 'id', required: true, type: 'string', description: getText('DESCRIBE_C2C_DEVICE_PROFILE.OPT.ID') },\r\n  ],\r\n  description: getText('DESCRIBE_C2C_DEVICE_PROFILE.DESC'),\r\n  runner: ({ id }) => {\r\n    const manager = new C2cDeviceProfileManager(configurator.getConfig());\r\n\r\n    manager.init();\r\n    return manager.retrieveDeviceProfile(id)\r\n      .then((deviceProfile) => {\r\n        printer.printOutput(JSON.stringify(deviceProfile, null, 2));\r\n      });\r\n  },\r\n}, {\r\n  commands: ['update', 'c2c-device-profile'],\r\n  options: [\r\n    { short: 'i', full: 'id', required: true, type: 'string', description: getText('UPDATE_C2C_DEVICE_PROFILE.OPT.ID') },\r\n    { full: 'device-profile', type: 'string', description: getText('UPDATE_C2C_DEVICE_PROFILE.OPT.DEVICE_PROFILE') },\r\n    { full: 'in', type: 'string', description: getText('UPDATE_C2C_DEVICE_PROFILE.OPT.IN') },\r\n  ],\r\n  description: getText('UPDATE_C2C_DEVICE_PROFILE.DESC'),\r\n  runner: ({ id, 'device-profile': deviceProfile, in: inputPath }) => {\r\n    if (!inputPath && !deviceProfile) throw new StError('NO_DEVICE_PROFILE_OR_IN');\r\n    // TODO: This case will be added for registering manifest by project information\r\n    const manager = new C2cDeviceProfileManager(configurator.getConfig());\r\n\r\n    manager.init();\r\n    if (deviceProfile) {\r\n      return manager.updateDeviceProfile(id, deviceProfile)\r\n        .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n    }\r\n    return manager.updateDeviceProfileByJsonFile(id, inputPath)\r\n      .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n  },\r\n}, {\r\n  commands: ['delete', 'c2c-device-profile'],\r\n  options: [\r\n    { short: 'i', full: 'id', required: true, type: 'string', description: getText('DELETE_C2C_DEVICE_PROFILE.OPT.ID') },\r\n  ],\r\n  description: getText('DELETE_C2C_DEVICE_PROFILE.DESC'),\r\n  runner: ({ id }) => {\r\n    const manager = new C2cDeviceProfileManager(configurator.getConfig());\r\n\r\n    manager.init();\r\n    return manager.deleteDeviceProfile(id)\r\n      .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n  },\r\n},\r\n/* eslint-enable */\r\n{\r\n  commands: ['list', 'capability'],\r\n  options: [\r\n    { full: 'main-state', type: 'boolean', description: getText('LIST_CAPABILITY.OPT.MAIN_STATE') },\r\n    { full: 'main-action', type: 'boolean', description: getText('LIST_CAPABILITY.OPT.MAIN_ACTION') },\r\n    { full: 'sdk-only', type: 'boolean', description: getText('LIST_CAPABILITY.OPT.SDK_ONLY') },\r\n  ],\r\n  description: getText('LIST_CAPABILITY.DESC'),\r\n  runner: ({ 'main-state': mainState, 'main-action': mainAction, 'sdk-only': sdkOnly }) => {\r\n    const searchCriteria = {\r\n      mainState,\r\n      mainAction,\r\n      sdkOnly,\r\n    };\r\n    const manager = new CapabilityManager(configurator.getConfig());\r\n    manager.init();\r\n    return manager.retrieveCapabilityList(searchCriteria)\r\n      .then(capabilities => printer.printColumn(capabilities, ['id', 'version', 'status', 'supportedComponents']));\r\n  },\r\n}, {\r\n  commands: ['describe', 'capability'],\r\n  options: [\r\n    { full: 'id', short: 'i', required: true, type: 'string', description: getText('DESCRIBE_CAPABILITY.OPT.ID') },\r\n    { full: 'ver', type: 'string', description: getText('DESCRIBE_CAPABILITY.OPT.VERSION') },\r\n    { full: 'component', type: 'string', description: getText('DESCRIBE_CAPABILITY.OPT.COMPONENT') },\r\n    { full: 'resource-model', type: 'boolean', description: getText('DESCRIBE_CAPABILITY.OPT.RESOURCE_MODEL') },\r\n  ],\r\n  description: getText('DESCRIBE_CAPABILITY.DESC'),\r\n  runner: ({ id, ver, component, 'resource-model': resourceModel }) => {\r\n    if (resourceModel) {\r\n      const dpm = new DeviceProfileManager(configurator.getConfig());\r\n      const resources = dpm.mapCapabilityToResources(id, component);\r\n      printer.printOutput(JSON.stringify(resources, null, 2));\r\n      return Promise.resolve();\r\n    }\r\n\r\n    const manager = new CapabilityManager(configurator.getConfig());\r\n    manager.init();\r\n    return manager.retrieveCapability(id, ver)\r\n      .then(capability => printer.printOutput(JSON.stringify(capability, null, 2)));\r\n  },\r\n}, {\r\n  commands: ['list', 'resource-type'],\r\n  options: [],\r\n  description: getText('LIST_RESOURCE_TYPE.DESC'),\r\n  runner: () => {\r\n    const rtm = new ResourceTypeManager();\r\n    rtm.init();\r\n    return rtm.retrieveResourceTypeList()\r\n      .then(resourceTypes => printer.printColumn(resourceTypes, ['id']));\r\n  },\r\n}, {\r\n  commands: ['describe', 'resource-type'],\r\n  options: [\r\n    { short: 'i', full: 'id', required: true, type: 'string', description: getText('DESCRIBE_RESOURCE_TYPE.OPT.ID') },\r\n  ],\r\n  description: getText('DESCRIBE_RESOURCE_TYPE.DESC'),\r\n  runner: ({ id }) => {\r\n    const rtm = new ResourceTypeManager();\r\n    rtm.init();\r\n    return rtm.retrieveResourceType(id)\r\n      .then(resourceType => printer.printOutput(JSON.stringify(resourceType, null, 2)));\r\n  },\r\n}, {\r\n  commands: ['list', 'config'],\r\n  options: [],\r\n  description: getText('LIST_CONFIG.DESC'),\r\n  runner: () => {\r\n    const config = configurator.getConfig();\r\n    const flatKeys = getFlatKeys(config);\r\n    const configs = flatKeys.map(key => ({ key, value: configurator.get(key) }));\r\n    printer.printColumn(configs, ['key', 'value']);\r\n    return Promise.resolve();\r\n  },\r\n}, {\r\n  commands: ['set', 'config'],\r\n  options: [\r\n    { full: 'key', type: 'string', description: getText('SET_CONFIG.OPT.KEY') },\r\n    { full: 'value', description: getText('SET_CONFIG.OPT.VALUE') },\r\n  ],\r\n  description: getText('SET_CONFIG.DESC'),\r\n  runner: ({ key, value, mode }) => {\r\n    configurator.on('progress', msg => printer.printOutput(msg));\r\n    if (mode) {\r\n      configurator.changeMode(mode);\r\n      printer.printOutput(getText('COMMON.SUCCESS'));\r\n      return Promise.resolve();\r\n    }\r\n    if (!Configurator.isValidKey(key)) throw new StError('SET_CONFIG_NO_KEY', key);\r\n\r\n    if (value === true) { // NOTE: empty value case\r\n      configurator.del(key);\r\n      printer.printOutput(getText('COMMON.SUCCESS'));\r\n      return Promise.resolve();\r\n    }\r\n\r\n    // NOTE: boolean and integer string will be converted\r\n    let converted = value;\r\n    if (value === 'false' || value === 'true') converted = value === 'true';\r\n    if (/^\\d+$/.test(value)) converted = parseInt(value, 10);\r\n\r\n    configurator.set(key, converted);\r\n    printer.printOutput(getText('COMMON.SUCCESS'));\r\n    return Promise.resolve();\r\n  },\r\n}, {\r\n  commands: ['get', 'config'],\r\n  options: [\r\n    { full: 'key', required: true, type: 'string', description: getText('GET_CONFIG.OPT.KEY') },\r\n  ],\r\n  description: getText('SET_CONFIG.DESC'),\r\n  runner: ({ key }) => {\r\n    const value = configurator.get(key);\r\n    if (value === undefined) printer.printOutput(getText('SET_CONFIG.NO_KEY', key));\r\n    else printer.printOutput(value);\r\n    return Promise.resolve();\r\n  },\r\n}, {\r\n  commands: ['generate', 'manifest'],\r\n  options: [\r\n    { full: 'capability', type: 'string', description: getText('GENERATE_MANIFEST.OPT.CAPABILITY') },\r\n    { full: 'component', type: 'string', description: getText('GENERATE_MANIFEST.OPT.COMPONENT') },\r\n    { full: 'in', type: 'string', description: getText('GENERATE_MANIFEST.OPT.IN') },\r\n    { full: 'device-profile-path', type: 'string', description: getText('GENERATE_MANIFEST.OPT.DEVICE_PROFILE_PATH') },\r\n    { full: 'out-dir', type: 'string', description: getText('GENERATE_MANIFEST.OPT.OUT_DIR') },\r\n    { full: 'main-action', type: 'string', description: getText('GENERATE_MANIFEST.OPT.MAIN_ACTION') },\r\n    { full: 'main-state', type: 'string', description: getText('GENERATE_MANIFEST.OPT.MAIN_STATE') },\r\n    { full: 'device-plugin', type: 'string', description: getText('GENERATE_MANIFEST.OPT.DEVICE_PLUGIN') },\r\n    { full: 'vid', type: 'string', description: getText('GENERATE_MANIFEST.OPT.VID') },\r\n    { full: 'mnid', type: 'string', description: getText('GENERATE_MANIFEST.OPT.MNID') },\r\n    { full: 'ui-version', type: 'string', description: getText('GENERATE_MANIFEST.OPT.UI_VERSION') },\r\n    { full: 'voice-version', type: 'string', description: getText('GENERATE_MANIFEST.OPT.VOICE_VERSION') },\r\n    { full: 'capability-property-map', type: 'string', description: getText('GENERATE_MANIFEST.OPT.CAPABILITY_PROPERTY_MAP') },\r\n  ],\r\n  description: getText('GENERATE_MANIFEST.DESC'),\r\n  runner: ({ capability, component = 'main',\r\n    in: inFile, 'device-profile-path': deviceProfilePath,\r\n    'out-dir': outDir = '.',\r\n    'main-state': mainState, 'main-action': mainAction,\r\n    'device-plugin': devicePlugin, mnid, vid,\r\n    'ui-version': uiVersion, 'voice-version': voiceVersion,\r\n    'capability-property-map': propertyMapStr,\r\n  }) => {\r\n    const metaGenerator = new MetaDataGenerator(configurator.getConfig());\r\n    /* if (!capability && !inFile && !deviceProfilePath) {\r\n      throw new StError('CAPABILITY_OR_DEVICE_PROFILE_PATH_REQUIRED');\r\n    } */\r\n    if (capability && (inFile || deviceProfilePath)) {\r\n      throw new StError('ONLY_ONE_OF_CAPABILITY_AND_DEVICE_PROFILE_PATH_REQUIRED');\r\n    }\r\n\r\n    // --capability\r\n    if (capability) {\r\n      const option = {\r\n        capabilityPropertyMap: propertyMapStr ? JSON.parse(propertyMapStr) : {},\r\n      };\r\n      return metaGenerator.generateUiMetaFromCapability(capability, component, option)\r\n        .then((uiManifest) => {\r\n          printer.printOutput(JSON.stringify(uiManifest, null, 2));\r\n        });\r\n    }\r\n\r\n    // --device-profile-path\r\n    if (deviceProfilePath || inFile) {\r\n      const targetFilePath = deviceProfilePath || inFile;\r\n      const deviceProfile = fs.readJsonSync(pathUtil.resolve(targetFilePath));\r\n      const option = {\r\n        msCapability: mainState,\r\n        maCapability: mainAction,\r\n        devicePlugin,\r\n        mnid,\r\n        vid,\r\n        uiVersion,\r\n        voiceVersion,\r\n        capabilityPropertyMap: propertyMapStr ? JSON.parse(propertyMapStr) : {},\r\n      };\r\n      return metaGenerator.generateManifestFilesFromDeviceProfile(deviceProfile, outDir, option)\r\n        .then(() => {\r\n          printer.printOutput(getText('COMMON.SUCCESS'));\r\n        });\r\n    }\r\n\r\n    const option = {\r\n      msCapability: mainState,\r\n      maCapability: mainAction,\r\n      devicePlugin,\r\n      mnid,\r\n      vid,\r\n      uiVersion,\r\n      voiceVersion,\r\n    };\r\n    return metaGenerator.generateManifestFilesFromProjectPath(option)\r\n      .then(() => {\r\n        printer.printOutput(getText('COMMON.SUCCESS'));\r\n      });\r\n  },\r\n}, {\r\n  commands: ['get', 'log'],\r\n  options: [\r\n    { full: 'device', type: 'string', description: getText('GET_LOG.OPT.DEVICE') },\r\n    { full: 'authcode', type: 'string', description: getText('GET_LOG.OPT.AUTH_CODE') },\r\n    { full: 'location', type: 'array', description: getText('GET_LOG.OPT.LOCATION') },\r\n    { full: 'smart-app', type: 'array', description: getText('GET_LOG.OPT.SMART_APP') },\r\n    { full: 'installed-smart-app', type: 'array', description: getText('GET_LOG.OPT.INSTALLED_SMART_APP') },\r\n    { full: 'st-device', type: 'array', description: getText('GET_LOG.OPT.ST_DEVICE') },\r\n  ],\r\n  description: getText('GET_LOG.DESC'),\r\n  runner: ({ device, authcode,\r\n    location, 'smart-app': smartApp, 'installed-smart-app': installedSmartApp, 'st-device': stDevice,\r\n  }) => {\r\n    if (!(device || location || smartApp || installedSmartApp || stDevice)) {\r\n      return Promise.reject(new StError('NO_OPTIONS'));\r\n    }\r\n\r\n    if (device && (location || smartApp || installedSmartApp || stDevice)) {\r\n      return Promise.reject(new StError('MUTUALLY_EXCLUSIVE_OPTIONS'));\r\n    }\r\n\r\n    if (location && (device || smartApp || installedSmartApp || stDevice)) {\r\n      return Promise.reject(new StError('MUTUALLY_EXCLUSIVE_OPTIONS'));\r\n    }\r\n\r\n    if (smartApp && (location || device || installedSmartApp || stDevice)) {\r\n      return Promise.reject(new StError('MUTUALLY_EXCLUSIVE_OPTIONS'));\r\n    }\r\n\r\n    if (installedSmartApp && (location || smartApp || device || stDevice)) {\r\n      return Promise.reject(new StError('MUTUALLY_EXCLUSIVE_OPTIONS'));\r\n    }\r\n\r\n    if (stDevice && (location || smartApp || installedSmartApp || device)) {\r\n      return Promise.reject(new StError('MUTUALLY_EXCLUSIVE_OPTIONS'));\r\n    }\r\n\r\n    if (device) {\r\n      return ensureAuthToken()\r\n        .then(() => {\r\n          const lm = new LogManager(configurator.getConfig());\r\n          lm.init();\r\n          if (authcode) {\r\n            lm.observeDeviceStateChangesByAuthCode(device, authcode,\r\n              ocfLog => printer.printOutput(`${ocfLog.time} | ${ocfLog.di} | ${ocfLog.message}`), true);\r\n          } else {\r\n            requestTokenByUI('authcode')\r\n            .then(() => {\r\n              const authCode = configurator.get('authCode');\r\n              if (!authCode) throw new StError('PUBLISH_DEVICE_NO_TOKEN');\r\n              return lm.observeDeviceStateChangesByAuthCode(device, authCode,\r\n                ocfLog => printer.printOutput(`${ocfLog.time} | ${ocfLog.di} | ${ocfLog.message}`), true);\r\n            });\r\n          }\r\n        });\r\n    }\r\n\r\n    if (location || smartApp || installedSmartApp || stDevice) {\r\n      return ensureAuthToken()\r\n        .then(() => {\r\n          const lm = new StLogManager(configurator.getConfig());\r\n          lm.init();\r\n          lm.on('log', (event, formatted) => printer.printOutput(formatted));\r\n          if (location) { lm.createRealtimeLogs('LOCATIONIDS', location); return; }\r\n          if (smartApp) { lm.createRealtimeLogs('SMARTAPPIDS', smartApp); return; }\r\n          if (installedSmartApp) { lm.createRealtimeLogs('INSTALLEDSMARTAPPIDS', installedSmartApp); return; }\r\n          if (stDevice) { lm.createRealtimeLogs('DEVICEIDS', stDevice); }\r\n        });\r\n    }\r\n\r\n    return Promise.resolve();\r\n  },\r\n}, {\r\n  commands: ['request', 'ppk-crt'],\r\n  options: [\r\n    { full: 'passwd', required: true, type: 'string', description: 'Specify generated private key access password' },\r\n    { full: 'distributor-type',\r\n      type: 'string',\r\n      description: 'Specify type of the generated distributor certificate. Can be \\'public\\' or \\'partner\\'. If not specified, default is \\'public\\'' },\r\n    { full: 'common-name', type: 'string', description: 'Specify common name attribute for generated certificates' },\r\n    { full: 'organizational-unit', type: 'string', description: 'Specify organizational unit attribute for generated certificates' },\r\n    { full: 'organization', type: 'string', description: 'Specify organization attribute for generated certificates' },\r\n    { full: 'locality', type: 'string', description: 'Specify locality attribute for generated certificates' },\r\n    { full: 'state', type: 'string', description: 'Specify state attribute for generated certificates' },\r\n    { full: 'country', type: 'string', description: 'Specify country attribute for generated certificates' },\r\n  ],\r\n  description: 'Request certificates for ppk signing.',\r\n  runner: ({\r\n    passwd,\r\n    'distributor-type': distributorType = 'public',\r\n    'common-name': commonName,\r\n    'organizational-unit': organizationalUnit,\r\n    organization,\r\n    locality,\r\n    state,\r\n    country,\r\n  }) => {\r\n    if (!CertManager.PASSWORD_REGEX.test(passwd)) {\r\n      return Promise.reject(new StError('CERT_INVALID_PASSWORD'));\r\n    }\r\n    const cm = new CertManager(configurator.getConfig());\r\n    return ensureAuthToken()\r\n    .then(() => {\r\n      cm.init();\r\n      return cm.createPpkCertPair(passwd, distributorType, commonName, organizationalUnit,\r\n        organization, locality, state, country)\r\n        .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n    });\r\n  },\r\n}, {\r\n  commands: ['request', 'device-crt'],\r\n  options: [\r\n    { full: 'device-name', type: 'string', required: true, description: 'Specify device name for generated certificates' },\r\n    { full: 'access-token', type: 'string', description: 'Specify access token for generated certificate' },\r\n    { full: 'mnid', type: 'string', description: 'Specify mnid for generated certificates' },\r\n    { full: 'email', type: 'string', description: 'Specify email for generated certificates' },\r\n    { full: 'out-dir', type: 'string', description: 'Specify output for generated certificates' },\r\n    { full: 'common-name', type: 'string', description: 'Specify common name attribute for generated certificates' },\r\n    { full: 'organizational-unit', type: 'string', description: 'Specify organizational unit attribute for generated certificates' },\r\n    { full: 'organization', type: 'string', description: 'Specify organization attribute for generated certificates' },\r\n    { full: 'locality', type: 'string', description: 'Specify locality attribute for generated certificates' },\r\n    { full: 'state', type: 'string', description: 'Specify state attribute for generated certificates' },\r\n    { full: 'country', type: 'string', description: 'Specify country attribute for generated certificates' },\r\n  ],\r\n  description: 'Request certificates for product',\r\n  runner: ({\r\n    'device-name': deviceName,\r\n    'access-token': accessTokenParam,\r\n    mnid: mnidParam,\r\n    email: emailParam,\r\n    'out-dir': outDir = '.',\r\n    'common-name': commonName,\r\n    'organizational-unit': organizationalUnit,\r\n    organization,\r\n    locality,\r\n    state,\r\n    country,\r\n  }) => {\r\n    const accessToken = accessTokenParam || configurator.get('accessToken');\r\n    const mnid = mnidParam || configurator.get('mnid');\r\n    const email = emailParam || configurator.get('email');\r\n\r\n    if (!accessToken) return Promise.reject(new StError('CERT_NO_LOGIN'));\r\n    if (!mnid) return Promise.reject(new StError('CERT_NO_LOGIN'));\r\n    if (!email) return Promise.reject(new StError('CERT_NO_LOGIN'));\r\n\r\n    // NOTE: modify config to apply accessTokenParam\r\n    const config = configurator.getConfig();\r\n    config.accessToken = accessToken;\r\n    const cm = new CertManager(config);\r\n    cm.init();\r\n\r\n    return cm.createDeviceCertForProduct(mnid, email, outDir, deviceName, commonName,\r\n      organizationalUnit, organization, locality, state, country)\r\n      .then(() => printer.printOutput(getText('COMMON.SUCCESS')));\r\n  },\r\n}, {\r\n  commands: ['set', 'mnid'],\r\n  options: [\r\n    { full: 'type', required: true, type: 'string', description: getText('SET_MNID.OPT.TYPE') },\r\n  ],\r\n  description: getText('SET_MNID.DESC'),\r\n  runner: ({ type }) => Promise.resolve()\r\n  .then(() => configurator.changeMnidType(type))\r\n  .then(() => printer.printOutput(getText('COMMON.SUCCESS'))),\r\n}];\r\n\r\nmodule.exports = {\r\n  getCommands: () => {\r\n    configurator = Configurator.getDefault();\r\n    log.setLogLevel(configurator.get('logLevel'));\r\n    return commands;\r\n  },\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/StCommands.js\n// module id = 9\n// module chunks = 0","module.exports = require(\"electron\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"electron\"\n// module id = 10\n// module chunks = 0","module.exports = require(\"tmp-promise\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"tmp-promise\"\n// module id = 11\n// module chunks = 0","module.exports = require(\"child-process-es6-promise\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"child-process-es6-promise\"\n// module id = 12\n// module chunks = 0","module.exports = require(\"lodash/cloneDeepWith\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash/cloneDeepWith\"\n// module id = 13\n// module chunks = 0","module.exports = require(\"columnify\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"columnify\"\n// module id = 14\n// module chunks = 0","module.exports = require(\"debug\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"debug\"\n// module id = 15\n// module chunks = 0"],"sourceRoot":""}